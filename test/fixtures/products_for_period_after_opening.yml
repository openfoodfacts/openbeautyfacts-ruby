---
http_interactions:
- request:
    method: get
    uri: https://world.openbeautyfacts.org/period-after-opening/12-months/1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Access-Control-Allow-Headers:
      - DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,If-None-Match,Authorization
      Access-Control-Allow-Methods:
      - HEAD, GET, PATCH, POST, PUT, OPTIONS
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Expose-Headers:
      - Content-Length,Content-Range
      Connection:
      - close
      Content-Type:
      - text/html; charset=iso-8859-1
      Date:
      - Mon, 29 Sep 2025 14:07:17 GMT
      Location:
      - "/facets/periods-after-opening/12-months"
      Server:
      - nginx/1.18.0
      Transfer-Encoding:
      - chunked
    body:
      encoding: UTF-8
      string: |
        <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
        <html><head>
        <title>301 Moved Permanently</title>
        </head><body>
        <h1>Moved Permanently</h1>
        <p>The document has moved <a href="/facets/periods-after-opening/12-months">here</a>.</p>
        <hr>
        <address>Apache/2.4.61 (Debian) Server at world.openbeautyfacts.org Port 80</address>
        </body></html>
  recorded_at: Mon, 29 Sep 2025 14:07:17 GMT
- request:
    method: get
    uri: https://world.openbeautyfacts.org/facets/periods-after-opening/12-months
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - close
      Content-Type:
      - text/html; charset=UTF-8
      Date:
      - Mon, 29 Sep 2025 14:07:17 GMT
      Expires:
      - Sun, 28 Sep 2025 14:07:17 GMT
      Server:
      - nginx/1.18.0
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Request-Id:
      - W4Qh2xFcn7ndkEn5
      X-Xss-Protection:
      - 1; mode=block
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCEtLSBzdGFydCB0ZW1wbGF0ZXMvd2ViL2NvbW1vbi9zaXRlX2xheW91dC50dC5odG1sIC0tPgoKPCFkb2N0eXBlIGh0bWw+CjxodG1sIGNsYXNzPSJuby1qcyIgbGFuZz0iZW4iIGRhdGEtc2VydmVyZG9tYWluPSJvcGVuYmVhdXR5ZmFjdHMub3JnIiBkaXI9Imx0ciI+CjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgPHRpdGxlPjEyIG1vbnRoczwvdGl0bGU+CiAgICAKICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCTxtZXRhIHByb3BlcnR5PSJmYjphcHBfaWQiIGNvbnRlbnQ9IjIxOTMzMTM4MTUxODA0MSI+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dHlwZSIgY29udGVudD0iZm9vZCI+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dGl0bGUiIGNvbnRlbnQ9IjEyIG1vbnRocyI+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6dXJsIiBjb250ZW50PSJodHRwczovL3dvcmxkLm9wZW5iZWF1dHlmYWN0cy5vcmcvZmFjZXRzL3BlcmlvZHMtYWZ0ZXItb3BlbmluZy9lbjoxMi1tb250aHMvMSI+CiAgICAKICAgIDxtZXRhIHByb3BlcnR5PSJvZzppbWFnZSIgY29udGVudD0iaHR0cHM6Ly9zdGF0aWMub3BlbmZvb2RmYWN0cy5vcmcvaW1hZ2VzL2xvZ29zL29iZi1sb2dvLXZlcnRpY2FsLXdoaXRlLXNvY2lhbC1tZWRpYS1wcmV2aWV3LnBuZyI+CiAgICA8bWV0YSBwcm9wZXJ0eT0ib2c6ZGVzY3JpcHRpb24iIGNvbnRlbnQ9IkEgY29sbGFib3JhdGl2ZSwgZnJlZSBhbmQgb3BlbiBkYXRhYmFzZSBvZiBpbmdyZWRpZW50cywgYW5kIGluZm9ybWF0aW9uIG9uIGNvc21ldGljIHByb2R1Y3RzIGZyb20gYXJvdW5kIHRoZSB3b3JsZCI+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24iIHNpemVzPSIxODB4MTgwIiBocmVmPSIvaW1hZ2VzL2Zhdmljb24vb2JmL2FwcGxlLXRvdWNoLWljb24ucG5nIj4KPGxpbmsgcmVsPSJpY29uIiB0eXBlPSJpbWFnZS9wbmciIHNpemVzPSIzMngzMiIgaHJlZj0iL2ltYWdlcy9mYXZpY29uL29iZi9mYXZpY29uLTMyeDMyLnBuZyI+CjxsaW5rIHJlbD0iaWNvbiIgdHlwZT0iaW1hZ2UvcG5nIiBzaXplcz0iMTZ4MTYiIGhyZWY9Ii9pbWFnZXMvZmF2aWNvbi9vYmYvZmF2aWNvbi0xNngxNi5wbmciPgo8bGluayByZWw9Im1hbmlmZXN0IiBocmVmPSIvaW1hZ2VzL2Zhdmljb24vb2JmL3NpdGUud2VibWFuaWZlc3QiPgo8bGluayByZWw9Im1hc2staWNvbiIgaHJlZj0iL2ltYWdlcy9mYXZpY29uL29iZi9zYWZhcmktcGlubmVkLXRhYi5zdmciIGNvbG9yPSIjNWJiYWQ1Ij4KPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBocmVmPSIvaW1hZ2VzL2Zhdmljb24vb2JmL2Zhdmljb24uaWNvIj4KPG1ldGEgbmFtZT0ibXNhcHBsaWNhdGlvbi1UaWxlQ29sb3IiIGNvbnRlbnQ9IiMyYjU3OTciPgo8bWV0YSBuYW1lPSJtc2FwcGxpY2F0aW9uLWNvbmZpZyIgY29udGVudD0iL2ltYWdlcy9mYXZpY29uL29iZi9icm93c2VyY29uZmlnLnhtbCI+CjxtZXRhIG5hbWU9InRoZW1lLWNvbG9yIiBjb250ZW50PSIjZmZmZmZmIj4KCgk8bWV0YSBuYW1lPSJhcHBsZS1pdHVuZXMtYXBwIiBjb250ZW50PSJhcHAtaWQ9NTg4Nzk3OTQ4Ij4KICAgIDxsaW5rIHJlbD0iY2Fub25pY2FsIiBocmVmPSJodHRwczovL3dvcmxkLm9wZW5iZWF1dHlmYWN0cy5vcmcvZmFjZXRzL3BlcmlvZHMtYWZ0ZXItb3BlbmluZy9lbjoxMi1tb250aHMvMSI+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvY3NzL2Rpc3QvYXBwLWx0ci5jc3M/dj0xNzU3NjU4MTAyIiBkYXRhLWJhc2UtbGF5b3V0PSJ0cnVlIj4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9jc3MvZGlzdC9qcXVlcnl1aS90aGVtZXMvYmFzZS9qcXVlcnktdWkuY3NzIiBkYXRhLWJhc2UtbGF5b3V0PSJ0cnVlIj4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9jc3MvZGlzdC9zZWxlY3QyLm1pbi5jc3MiPgogICAgPGxpbmsgcmVsPSJzZWFyY2giIGhyZWY9Imh0dHBzOi8vd29ybGQub3BlbmJlYXV0eWZhY3RzLm9yZy9jZ2kvb3BlbnNlYXJjaC5wbCIgdHlwZT0iYXBwbGljYXRpb24vb3BlbnNlYXJjaGRlc2NyaXB0aW9uK3htbCIgdGl0bGU9Ik9wZW4gQmVhdXR5IEZhY3RzIj4KICAgIDxzY3JpcHQgdHlwZT0ibW9kdWxlIiBzcmM9Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvanMvZGlzdC9vZmYtd2ViY29tcG9uZW50cy5idW5kbGVkLmpzIj48L3NjcmlwdD4KCQogICAgPHN0eWxlIG1lZGlhPSJhbGwiPgogICAgICAgIC5zaG93LXdoZW4tbm8tYWNjZXNzLXRvLXByb2R1Y2Vycy1wbGF0Zm9ybSB7ZGlzcGxheTpub25lfQouc2hvdy13aGVuLWxvZ2dlZC1pbiB7ZGlzcGxheTpub25lfQoKCQkKCQkuYmFkZ2UtY29udGFpbmVyewoJCQltYXJnaW46IDAgYXV0bzsKCQl9CgoJCS5iYWRnZS1jb250YWluZXIgaW1newoJCQltYXJnaW46IDVweDsKCQl9CgkJQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA1MzdweCApIGFuZCAobWluLXdpZHRoOiAyODBweCkgewoJCQkuYmFkZ2UtY29udGFpbmVyewoJCQkJd2lkdGg6IDI4MHB4OwoJCQl9CgkJfQoJCUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMjc5cHggKXsKCQkJLmJhZGdlLWNvbnRhaW5lcnsKCQkJCXdpZHRoOiAxMzBweDsKCQkJfQoJCX0KICAgIDwvc3R5bGU+CjwvaGVhZD4KPGJvZHkgY2xhc3M9InByb2R1Y3RzX3BhZ2UiPgoKCTwhLS0gTWF0b21vIC0tPgo8c2NyaXB0PgogIHZhciBfcGFxID0gd2luZG93Ll9wYXEgPSB3aW5kb3cuX3BhcSB8fCBbXTsKICAvKiB0cmFja2VyIG1ldGhvZHMgbGlrZSAic2V0Q3VzdG9tRGltZW5zaW9uIiBzaG91bGQgYmUgY2FsbGVkIGJlZm9yZSAidHJhY2tQYWdlVmlldyIgKi8KICBfcGFxLnB1c2goWyJzZXREb2N1bWVudFRpdGxlIiwgZG9jdW1lbnQuZG9tYWluICsgIi8iICsgZG9jdW1lbnQudGl0bGVdKTsKICBfcGFxLnB1c2goWyJzZXRDb29raWVEb21haW4iLCAiKi5vcGVuYmVhdXR5ZmFjdHMub3JnIl0pOwogIF9wYXEucHVzaChbInNldERvbWFpbnMiLCBbIioub3BlbmJlYXV0eWZhY3RzLm9yZyJdXSk7CiAgX3BhcS5wdXNoKFsic2V0RG9Ob3RUcmFjayIsIHRydWVdKTsKICBfcGFxLnB1c2goWyJkaXNhYmxlQ29va2llcyJdKTsKICBfcGFxLnB1c2goWyd0cmFja1BhZ2VWaWV3J10pOwogIF9wYXEucHVzaChbJ2VuYWJsZUxpbmtUcmFja2luZyddKTsKICAoZnVuY3Rpb24oKSB7CiAgICB2YXIgdT0iLy9hbmFseXRpY3Mub3BlbmZvb2RmYWN0cy5vcmcvIjsKICAgIF9wYXEucHVzaChbJ3NldFRyYWNrZXJVcmwnLCB1KydtYXRvbW8ucGhwJ10pOwogICAgX3BhcS5wdXNoKFsnc2V0U2l0ZUlkJywgJzEwJ10pOwogICAgdmFyIGQ9ZG9jdW1lbnQsIGc9ZC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKSwgcz1kLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTsKICAgIGcuYXN5bmM9dHJ1ZTsgZy5zcmM9dSsnbWF0b21vLmpzJzsgcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnLHMpOwogIH0pKCk7Cjwvc2NyaXB0Pgo8bm9zY3JpcHQ+PHA+PGltZyBzcmM9Ii8vYW5hbHl0aWNzLm9wZW5mb29kZmFjdHMub3JnL21hdG9tby5waHA/aWRzaXRlPTEwJmFtcDtyZWM9MSIgc3R5bGU9ImJvcmRlcjowOyIgYWx0PSIiIC8+PC9wPjwvbm9zY3JpcHQ+CgoKCTxvZmYtd2ViY29tcG9uZW50cy1jb25maWd1cmF0aW9uCiAgbGFuZ3VhZ2UtY29kZT0iZW4iCiAgY291bnRyeS1jb2RlPSJ3b3JsZCIKICByb2JvdG9mZi1jb25maWd1cmF0aW9uPSd7CiAgICAiYXBpVXJsIjogImh0dHBzOi8vcm9ib3RvZmYub3BlbmZvb2RmYWN0cy5vcmcvYXBpL3YxIiwKICAgICJpbWdVcmwiOiAiaHR0cHM6Ly9pbWFnZXMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvcHJvZHVjdHMiCiAgfScKICAKICBvcGVuZm9vZGZhY3RzLWFwaS11cmw9Imh0dHBzOi8vd29ybGQub3BlbmJlYXV0eWZhY3RzLm9yZyIKICBhc3NldHMtaW1hZ2VzLXBhdGg9Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvY3NzL2Rpc3QvaW1hZ2VzIgogID48L29mZi13ZWJjb21wb25lbnRzLWNvbmZpZ3VyYXRpb24+CgkKCQoJPGRpdiBjbGFzcz0ic2tpcCI+PGEgaHJlZj0iI2NvbnRlbnQiIHRhYmluZGV4PSIwIj5Ta2lwIHRvIENvbnRlbnQ8L2E+PC9kaXY+CgkKCgk8ZGl2IGlkPSJiYXJjb2RlLXNjYW5uZXItbW9kYWwiIGNsYXNzPSJtb2RhbCBpc19oaWRkZW4iPgogIDxkaXYgY2xhc3M9Im1vZGFsLWJhY2tkcm9wIj48L2Rpdj4KICA8ZGl2IGNsYXNzPSJtb2RhbC1jb250ZW50Ij4KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+CiAgICAgIDxzcGFuPjxoMj5TY2FuIGEgcHJvZHVjdDxoMj48L3NwYW4+CiAgICAgIDxidXR0b24gY2xhc3M9Im1vZGFsLWNsb3NlLWJ1dHRvbiI+JnRpbWVzOzwvYnV0dG9uPgogICAgPC9kaXY+CiAgICA8ZGl2PgogICAgICA8YmFyY29kZS1zY2FubmVyIGlkPSJiYXJjb2RlLXNjYW5uZXIiPjwvYmFyY29kZS1zY2FubmVyPgogICAgPC9kaXY+CiAgICA8ZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2ID4KICAgICAgPGxhYmVsIGZvcj0iYmFyY29kZS1tb2RhbC1pbnB1dCI+T3IgZW50ZXIgYmFyY29kZSBtYW51YWxseTwvbGFiZWw+CiAgICAgIDxkaXYgY2xhc3M9ImJhcmNvZGUtbW9kYWwtZ3JvdXAiPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iYmFyY29kZS1tb2RhbC1pbnB1dCIgY2xhc3M9ImJhcmNvZGUtbW9kYWwtaW5wdXQiIGlucHV0bW9kZT0ibnVtZXJpYyIgcGF0dGVybj0iXGQqIiAvPgogICAgICAgIDxidXR0b24gY2xhc3M9ImJhcmNvZGUtbW9kYWwtYnV0dG9uIGJ1dHRvbiIgaWQ9ImJhcmNvZGUtbW9kYWwtYnV0dG9uIiBkaXNhYmxlZD5TY2FuPC9idXR0b24+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CjwvZGl2PgoKPHNjcmlwdCBzcmM9Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvanMvZGlzdC9iYXJjb2RlLXNjYW5uZXIuanMiPjwvc2NyaXB0PgoKCgk8ZGl2IGlkPSJwYWdlIj4KCQkKCQk8ZGl2IGNsYXNzPSJ1cHBlci1uYXYgY29udGFpbi10by1ncmlkIiAgaWQ9InVwTmF2Ij4KCQkJPG5hdiBjbGFzcz0idG9wLWJhciAiIGRhdGEtdG9wYmFyIHJvbGU9Im5hdmlnYXRpb24iPgoJCQkJCgkJCQk8c2VjdGlvbiBjbGFzcz0idG9wLWJhci1zZWN0aW9uIj4KCQkJCQkKCQkJCQk8IS0tIExlZnQgTmF2IFNlY3Rpb24gLS0+CgkJCQkJPHVsIGNsYXNzPSJsZWZ0Ij4KCgkJCQkJCTxsaSBjbGFzcz0iaGFzLWRyb3Bkb3duIj4KCQkJCQkJCTxhIGlkPSJtZW51X2xpbmsiPgoJCQkJCQkJCTxzcGFuIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+CgkJCQkJCQkJCW1lbnUKCQkJCQkJCQk8L3NwYW4+CgkJCQkJCQk8L2E+CgkJCQkJCQk8dWwgY2xhc3M9ImRyb3Bkb3duIj4JCQkJCgkJCQkJCQkJCgkJCQkJCQkJCTxsaT48YSBocmVmPSIvZGlzY292ZXIiPkRpc2NvdmVyPC9hPjwvbGk+CgkJCQkJCQkJCTxsaT48YSBocmVmPSIvY29udHJpYnV0ZSI+Q29udHJpYnV0ZTwvYT48L2xpPgoJCQkJCQkJCQk8bGkgY2xhc3M9ImRpdmlkZXIiPjwvbGk+CgkJCQkJCQkJCTxsaT48bGFiZWw+QWRkIHByb2R1Y3RzPC9sYWJlbD48L2xpPgogICAgICAgICAgICAgICAgPCEtLSBGb3IgcmVmZXJlbmNlOiBnZXRfdGhlX2FwcF9saW5rX29mZiIgPSAvb3Blbi1mb29kLWZhY3RzLW1vYmlsZS1hcHAiIC0tPgoJCQkJCQkJCQk8bGk+PGEgaHJlZj0iL29wZW4tYmVhdXR5LWZhY3RzLW1vYmlsZS1hcHA/dXRtX3NvdXJjZT1vZmYmdXRmX21lZGl1bT13ZWImdXRtX2NhbXBhaWduPXByb19wbGF0Zm9ybV9pbnN0YWxsX3RoZV9hcHBfdG9fYWRkX3Byb2R1Y3RzX2VuIj5JbnN0YWxsIHRoZSBhcHAgdG8gYWRkIHByb2R1Y3RzPC9hPjwvbGk+CgkJCQkJCQkJCTxsaT48YSBocmVmPSIvY2dpL3Byb2R1Y3QucGw/dHlwZT1zZWFyY2hfb3JfYWRkJmFjdGlvbj1kaXNwbGF5Ij5BZGQgYSBwcm9kdWN0PC9hPjwvbGk+CgkJCQkJCQkJCgoJCQkJCQkJCTxsaSBjbGFzcz0iZGl2aWRlciI+PC9saT4KCQkJCQkJCQk8bGk+PGxhYmVsPlNlYXJjaCBhbmQgYW5hbHl6ZSBwcm9kdWN0czwvbGFiZWw+PC9saT4KCgkJCQkJCQkJPGxpPgoJCQkJCQkJCQk8YSBocmVmPSIvY2dpL3NlYXJjaC5wbCI+QWR2YW5jZWQgc2VhcmNoPC9hPgoJCQkJCQkJCTwvbGk+CgkJCQkJCQkJPGxpPgoJCQkJCQkJCQk8YSBocmVmPSIvY2dpL3NlYXJjaC5wbD9ncmFwaD0xIj5HcmFwaHMgYW5kIG1hcHM8L2E+CgkJCQkJCQkJPC9saT4KCQkJCQkJCQkKCQkJCQkJCTwvdWw+CgkJCQkJCTwvbGk+CgkJCQkJCQoJCQkJCQk8bGk+CgkJCQkJCQk8dWwgY2xhc3M9ImNvdW50cnlfbGFuZ3VhZ2Vfc2VsZWN0aW9uIj4KCQkJCQkJCQk8bGkgY2xhc3M9Imhhcy1mb3JtIGhhcy1kcm9wZG93biIgaWQ9InNlbGVjdF9jb3VudHJ5X2xpIj4KCQkJCQkJCQkJPHNlbGVjdCBpZD0ic2VsZWN0X2NvdW50cnkiIHN0eWxlPSJ3aWR0aDoxMDAlIiBkYXRhLXBsYWNlaG9sZGVyPSJDb3VudHJ5Ij4KCQkJCQkJCQkJCTxvcHRpb24+PC9vcHRpb24+CgkJCQkJCQkJCTwvc2VsZWN0PgoJCQkJCQkJCTwvbGk+CgkJCQkJCQkJPGxpIGNsYXNzPSJoYXMtZHJvcGRvd24iPgoJCQkJCQkJCQk8YSBocmVmPSJodHRwczovL3dvcmxkLm9wZW5iZWF1dHlmYWN0cy5vcmcvIj5FbmdsaXNoPC9hPgoKCQkJCQkJCQkJPHVsIGNsYXNzPSJkcm9wZG93biI+CgkJCQkJCQkJCQkKCQkJCQkJCQkJPC91bD4KCQkJCQkJCQk8L2xpPgoJCQkJCQkJPC91bD4KCQkJCQkJPC9saT4KCQkJCQk8L3VsPgoKCgkJCQkJPCEtLSBSaWdodCBOYXYgU2VjdGlvbiAtLT4KCQkJCQkKCQkJCQk8dWwgY2xhc3M9InJpZ2h0Ij4KCQkJCQkJCgkJCQkJCQk8bGkgY2xhc3M9Imgtc3BhY2UtdGlueSBoYXMtZm9ybSI+CgkJCQkJCQkJPGEgaHJlZj0iL2NnaS9zZXNzaW9uLnBsIiBjbGFzcz0icm91bmQgYnV0dG9uIHNlY29uZGFyeSI+CgkJCQkJCQkJCTxzcGFuIGNsYXNzPSJtYXRlcmlhbC1pY29ucyBtYXRlcmlhbC1zeW1ib2xzLWJ1dHRvbiI+YWNjb3VudF9jaXJjbGU8L3NwYW4+CgkJCQkJCQkJCVNpZ24gaW4KCQkJCQkJCQk8L2E+CgkJCQkJCQk8L2xpPgoJCQkJCQkKCQkJCQk8L3VsPgoJCQkJPC9zZWN0aW9uPgoJCQk8L25hdj4KCQk8L2Rpdj4KCQkKCgkJPGRpdiBpZD0ibWFpbl9jb250YWluZXIiIHN0eWxlPSJwb3NpdGlvbjpyZWxhdGl2ZSIgY2xhc3M9ImJsb2NrX2xhdHRlIj4KCQkKCQkKCQk8ZGl2IGNsYXNzPSJ0b3BiYXJzdGlja3kiPgoJCQk8ZGl2IGNsYXNzPSJjb250YWluLXRvLWdyaWQgIiBpZD0ib2ZmTmF2IiA+CgkJCQk8bmF2IGNsYXNzPSJ0b3AtYmFyIiBkYXRhLXRvcGJhciByb2xlPSJuYXZpZ2F0aW9uIiA+CgoJCQkJCTx1bCBjbGFzcz0idGl0bGUtYXJlYSI+CgkJCQkJCTxsaSBjbGFzcz0ibmFtZSI+CgkJCQkJCQk8ZGl2IHN0eWxlPSJwb3NpdGlvbjpyZWxhdGl2ZTttYXgtd2lkdGg6MjkycHg7Ij4KCQkJCQkJCQk8YSBocmVmPSIvIj4KCQkJCQkJCQk8aW1nIGlkPSJsb2dvIiBzcmM9Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2xvZ29zL29iZi1sb2dvLWhvcml6b250YWwtbGlnaHQuc3ZnIiBhbHQ9Ik9wZW4gQmVhdXR5IEZhY3RzIiBzdHlsZT0ibWFyZ2luOjhweDtoZWlnaHQ6NDhweDt3aWR0aDphdXRvOyI+CgkJCQkJCQkJCgkJCQkJCQk8L2E+CgkJCQkJCQk8L2Rpdj4KCQkJCQkJPC9saT4KCQkJCQk8L3VsPgoKCQkJCQkKCQkJCQkKCQkJCQk8c2VjdGlvbiBjbGFzcz0idG9wLWJhci1zZWN0aW9uIj4KCQkJCQkKCQkJCQkJPHVsIGNsYXNzPSJsZWZ0IHNtYWxsLTQiPgoJCQkJCQkJPGxpIGNsYXNzPSJzZWFyY2gtbGkiPgoJCQkJCQkJCgkJCQkJCQkJPGZvcm0gYWN0aW9uPSIvY2dpL3NlYXJjaC5wbCI+CgkJCQkJCQkJPGRpdiBjbGFzcz0icm93Ij48ZGl2IGNsYXNzPSJzbWFsbC0xMiI+CgkJCQkJCQkJPGRpdiBjbGFzcz0icm93IGNvbGxhcHNlIHBvc3RmaXgtcm91bmQiPgoJCQkJCQkJCQk8ZGl2IGNsYXNzPSJjb2x1bW5zIj4KCQkJCQkJCQkJPGlucHV0IHR5cGU9InRleHQiIHBsYWNlaG9sZGVyPSJTZWFyY2ggZm9yIGEgcHJvZHVjdCIgbmFtZT0ic2VhcmNoX3Rlcm1zIiB2YWx1ZT0iIiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjp3aGl0ZSI+CgkJCQkJCQkJCTxpbnB1dCBuYW1lPSJzZWFyY2hfc2ltcGxlIiB2YWx1ZT0iMSIgdHlwZT0iaGlkZGVuIj4KCQkJCQkJCQkJPGlucHV0IG5hbWU9ImFjdGlvbiIgdmFsdWU9InByb2Nlc3MiIHR5cGU9ImhpZGRlbiI+CgkJCQkJCQkJCTwvZGl2PgoJCQkJCQkJCQk8ZGl2IGNsYXNzPSJjb2x1bW5zIHBvc3RmaXgtYnV0dG9uLXdyYXBwZXIiPgoJCQkJCQkJCQk8YnV0dG9uIHR5cGU9InN1Ym1pdCIgdGl0bGU9IlNlYXJjaCIgY2xhc3M9ImJ1dHRvbiBwb3N0Zml4IiBzdHlsZT0ibGluZS1oZWlnaHQ6bm9ybWFsIj48c3ZnIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgdmlld0JveD0iMCAwIDI0IDI0IiBjbGFzcz0iaWNvbiIgYXJpYS1oaWRkZW49InRydWUiIGZvY3VzYWJsZT0iZmFsc2UiPjxwYXRoIGQ9Ik0xNS41IDE0aC0uNzlsLS4yOC0uMjdDMTUuNDEgMTIuNTkgMTYgMTEuMTEgMTYgOS41IDE2IDUuOTEgMTMuMDkgMyA5LjUgM1MzIDUuOTEgMyA5LjUgNS45MSAxNiA5LjUgMTZjMS42MSAwIDMuMDktLjU5IDQuMjMtMS41N2wuMjcuMjh2Ljc5bDUgNC45OUwyMC40OSAxOWwtNC45OS01em0tNiAwQzcuMDEgMTQgNSAxMS45OSA1IDkuNVM3LjAxIDUgOS41IDUgMTQgNy4wMSAxNCA5LjUgMTEuOTkgMTQgOS41IDE0eiIvPjxwYXRoIGQ9Ik0wIDBoMjR2MjRIMHoiIGZpbGw9Im5vbmUiLz48L3N2Zz48L2J1dHRvbj4KCQkJCQkJCQkJPC9kaXY+CgkJCQkJCQkJCTxkaXYgY2xhc3M9ImNvbHVtbnMgcG9zdGZpeC1idXR0b24td3JhcHBlciBpc19oaWRkZW4iPgogIDxidXR0b24KICAgIHR5cGU9ImJ1dHRvbiIKICAgIHRpdGxlPSJTY2FuIGEgcHJvZHVjdCIKICAgIGNsYXNzPSJidXR0b24gYmFyY29kZS1zY2FubmVyLWJ1dHRvbiIKICAgIGlkPSJiYXJjb2RlLXNjYW5uZXItYnV0dG9uIgogID4KICAgIDxzdmcgc3R5bGU9IndpZHRoOjI0cHg7aGVpZ2h0OjI0cHgiIHZpZXdCb3g9IjAgMCAyNCAyNCIgY2xhc3M9Imljb24iIGFyaWEtaGlkZGVuPSJ0cnVlIiBmb2N1c2FibGU9ImZhbHNlIj48cGF0aCBkPSJNMiw2SDRWMThIMlY2TTUsNkg2VjE4SDVWNk03LDZIMTBWMThIN1Y2TTExLDZIMTJWMThIMTFWNk0xNCw2SDE2VjE4SDE0VjZNMTcsNkgyMFYxOEgxN1Y2TTIxLDZIMjJWMThIMjFWNloiLz48L3N2Zz4KICA8L2J1dHRvbj4KCiAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvanMvZGlzdC9iYXJjb2RlLXNjYW5uZXItYnV0dG9uLmpzIj48L3NjcmlwdD4KPC9kaXY+CgoJCQkJCQkJCTwvZGl2PgoJCQkJCQkJCTwvZGl2PjwvZGl2PgoJCQkJCQkJCTwvZm9ybT4KCQkJCQkJCTwvbGk+CgkJCQkJCTwvdWw+CgkJCQkJPHVsIGNsYXNzPSJzZWFyY2hfYW5kX2xpbmtzIj4KCQkJCQkJPGxpPjxhIGhyZWY9Ii9kaXNjb3ZlciIgY2xhc3M9InRvcC1iYXItbGlua3MiPkRpc2NvdmVyPC9hPjwvbGk+CgkJCQkJCTxsaT48YSBocmVmPSIvY29udHJpYnV0ZSIgY2xhc3M9InRvcC1iYXItbGlua3MiPkNvbnRyaWJ1dGU8L2E+PC9saT4KCQkJCQkJPGxpIGNsYXNzPSJzaG93LWZvci14bGFyZ2UtdXAiPjxhIGhyZWY9Imh0dHBzOi8vd29ybGQucHJvLm9wZW5mb29kZmFjdHMub3JnLyIgY2xhc3M9InRvcC1iYXItbGlua3MiPlByb2R1Y2VyczwvYT48L2xpPgoJCQkJCQk8bGkgY2xhc3M9ImZsZXgtZ3JpZCBnZXRhcHAiPjxhIGhyZWY9Ii9vcGVuLWJlYXV0eS1mYWN0cy1tb2JpbGUtYXBwP3V0bV9zb3VyY2U9b2ZmJnV0Zl9tZWRpdW09d2ViJnV0bV9jYW1wYWlnbj1zZWFyY2hfYW5kX2xpbmtzX3Byb21vX2VuIiBjbGFzcz0iYnV0dG9uYmFyIGJ1dHRvbiIgc3R5bGU9InRvcDowOyI+PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAyNCAyNCIgY2xhc3M9Imljb24iIGFyaWEtaGlkZGVuPSJ0cnVlIiBmb2N1c2FibGU9ImZhbHNlIj48cGF0aCBkPSJNMTYgMUg4QzYuMzQgMSA1IDIuMzQgNSA0djE2YzAgMS42NiAxLjM0IDMgMyAzaDhjMS42NiAwIDMtMS4zNCAzLTNWNGMwLTEuNjYtMS4zNC0zLTMtM3ptLTIgMjBoLTR2LTFoNHYxem0zLjI1LTNINi43NVY0aDEwLjV2MTR6Ii8+PHBhdGggZD0iTTAgMGgyNHYyNEgweiIgZmlsbD0ibm9uZSIvPjwvc3ZnPiA8c3BhbiBjbGFzcz0iYnQtdGV4dCI+R2V0IHRoZSBhcHA8L3NwYW4+PC9hPjwvbGk+CgkJCQk8IS0tIEZvciByZWZlcmVuY2U6IGdldF90aGVfYXBwX2xpbmtfb2ZmIiA9IC9vcGVuLWZvb2QtZmFjdHMtbW9iaWxlLWFwcCIgLS0+CiAgICAgICAgICA8L3VsPgoJCQkJCTwvc2VjdGlvbj4KCQkJCQkKCQkJCTwvbmF2PgoJCQk8L2Rpdj4KCQk8L2Rpdj4KCgkKCQoJCTxuYXYgY2xhc3M9InRhYi1iYXIgaGlkZSI+CgkJCTxkaXYgY2xhc3M9ImxlZnQtc21hbGwiPgoJCQkJPGEgaHJlZj0iI2lkT2ZMZWZ0TWVudSIgcm9sZT0iYnV0dG9uIiBhcmlhLWNvbnRyb2xzPSJpZE9mTGVmdE1lbnUiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBjbGFzcz0ibGVmdC1vZmYtY2FudmFzLXRvZ2dsZSBidXR0b24gcG9zdGZpeCBhbm9ueW1vdXMiPgoJCQkJPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAyNCAyNCIgY2xhc3M9Imljb24iIGFyaWEtaGlkZGVuPSJ0cnVlIiBmb2N1c2FibGU9ImZhbHNlIj48cGF0aCBkPSJNMyA1djE0YzAgMS4xLjg5IDIgMiAyaDE0YzEuMSAwIDItLjkgMi0yVjVjMC0xLjEtLjktMi0yLTJINWMtMS4xMSAwLTIgLjktMiAyem0xMiA0YzAgMS42Ni0xLjM0IDMtMyAzcy0zLTEuMzQtMy0zIDEuMzQtMyAzLTMgMyAxLjM0IDMgM3ptLTkgOGMwLTIgNC0zLjEgNi0zLjFzNiAxLjEgNiAzLjF2MUg2di0xeiIvPjxwYXRoIGQ9Ik0wIDBoMjR2MjRIMHoiIGZpbGw9Im5vbmUiLz48L3N2Zz4KCQkJCTwvYT4KCQkJPC9kaXY+CgkJCTxkaXYgY2xhc3M9Im1pZGRsZSB0YWItYmFyLXNlY3Rpb24iPgoJCQkJPGZvcm0gYWN0aW9uPSIvY2dpL3NlYXJjaC5wbCI+CgkJCQkJPGRpdiBjbGFzcz0icm93IGNvbGxhcHNlIj4KCQkJCQkJPGRpdiBjbGFzcz0ic21hbGwtOCBjb2x1bW5zIj4KCQkJCQkJCTxpbnB1dCB0eXBlPSJ0ZXh0IiBwbGFjZWhvbGRlcj0iU2VhcmNoIGZvciBhIHByb2R1Y3QiIG5hbWU9InNlYXJjaF90ZXJtcyI+CgkJCQkJCQk8aW5wdXQgbmFtZT0ic2VhcmNoX3NpbXBsZSIgdmFsdWU9IjEiIHR5cGU9ImhpZGRlbiI+CgkJCQkJCQk8aW5wdXQgbmFtZT0iYWN0aW9uIiB2YWx1ZT0icHJvY2VzcyIgdHlwZT0iaGlkZGVuIj4KCQkJCQkJPC9kaXY+CgkJCQkJCTxkaXYgY2xhc3M9InNtYWxsLTIgY29sdW1ucyI+CgkJCQkJCQk8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9ImJ1dHRvbiBwb3N0Zml4Ij48c3ZnIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgdmlld0JveD0iMCAwIDI0IDI0IiBjbGFzcz0iaWNvbiIgYXJpYS1oaWRkZW49InRydWUiIGZvY3VzYWJsZT0iZmFsc2UiPjxwYXRoIGQ9Ik0xNS41IDE0aC0uNzlsLS4yOC0uMjdDMTUuNDEgMTIuNTkgMTYgMTEuMTEgMTYgOS41IDE2IDUuOTEgMTMuMDkgMyA5LjUgM1MzIDUuOTEgMyA5LjUgNS45MSAxNiA5LjUgMTZjMS42MSAwIDMuMDktLjU5IDQuMjMtMS41N2wuMjcuMjh2Ljc5bDUgNC45OUwyMC40OSAxOWwtNC45OS01em0tNiAwQzcuMDEgMTQgNSAxMS45OSA1IDkuNVM3LjAxIDUgOS41IDUgMTQgNy4wMSAxNCA5LjUgMTEuOTkgMTQgOS41IDE0eiIvPjxwYXRoIGQ9Ik0wIDBoMjR2MjRIMHoiIGZpbGw9Im5vbmUiLz48L3N2Zz48L2J1dHRvbj4KCQkJCQkJPC9kaXY+CgkJCQkJCTxkaXYgY2xhc3M9InNtYWxsLTIgY29sdW1ucyI+CgkJCQkJCQk8YSBocmVmPSIvY2dpL3NlYXJjaC5wbCIgdGl0bGU9IkFkdmFuY2VkIHNlYXJjaCI+PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAyNCAyNCIgY2xhc3M9Imljb24iIGFyaWEtaGlkZGVuPSJ0cnVlIiBmb2N1c2FibGU9ImZhbHNlIj48cGF0aCBkPSJNMTUuNSAxNGgtLjc5bC0uMjgtLjI3QzE1LjQxIDEyLjU5IDE2IDExLjExIDE2IDkuNSAxNiA1LjkxIDEzLjA5IDMgOS41IDNTMyA1LjkxIDMgOS41IDUuOTEgMTYgOS41IDE2YzEuNjEgMCAzLjA5LS41OSA0LjIzLTEuNTdsLjI3LjI4di43OWw1IDQuOTlMMjAuNDkgMTlsLTQuOTktNXptLTYgMEM3LjAxIDE0IDUgMTEuOTkgNSA5LjVTNy4wMSA1IDkuNSA1IDE0IDcuMDEgMTQgOS41IDExLjk5IDE0IDkuNSAxNHoiLz48cGF0aCBkPSJNMCAwaDI0djI0SDB6IiBmaWxsPSJub25lIi8+PC9zdmc+IDxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB2aWV3Qm94PSIwIDAgMjQgMjQiIGNsYXNzPSJpY29uIiBhcmlhLWhpZGRlbj0idHJ1ZSIgZm9jdXNhYmxlPSJmYWxzZSI+PHBhdGggZD0iTTE5IDEzaC02djZoLTJ2LTZINXYtMmg2VjVoMnY2aDZ2MnoiLz48cGF0aCBkPSJNMCAwaDI0djI0SDB6IiBmaWxsPSJub25lIi8+PC9zdmc+PC9hPgoJCQkJCQk8L2Rpdj4KCQkJCQk8L2Rpdj4KCQkJCTwvZm9ybT4KCQkJPC9kaXY+CgkJPC9uYXY+CgkJCgoJCTxkaXYgaWQ9ImNvbnRlbnQiIGNsYXNzPSJvZmYtY2FudmFzLXdyYXAgYmxvY2tfbGF0dGUiIGRhdGEtb2ZmY2FudmFzPgoJCQk8ZGl2IGNsYXNzPSJpbm5lci13cmFwIj4KCQkJCgkJCQk8YSBjbGFzcz0iZXhpdC1vZmYtY2FudmFzIj48L2E+CgoJCQkJCgkJCQkKCQkJCTwhLS0gZnVsbCB3aWR0aCBiYW5uZXIgb24gbW9iaWxlIC0tPgoJCQkJCgkJCQkKCgkJCQkKCgkJCQk8ZGl2IGNsYXNzPSJtYWluIGJsb2NrX2xpZ2h0Ij4KCQkJCQk8ZGl2IGlkPSJtYWluX2NvbHVtbiI+CgoJCQkJCQkKCQkJCQkJCgkJCQkJCQkKCQkJCQkJCQoJCQkJCQkJCTwhLS0gc3RhcnQgdGVtcGxhdGVzL3dlYi9jb21tb24vaW5jbHVkZXMvZG9uYXRlX2Jhbm5lci50dC5odG1sIC0tPgoKCgo8IS0tIERvbmF0aW9uIGJhbm5lciBAIGZvb3RlciAtLT4KCgo8IS0tIGVuZCB0ZW1wbGF0ZXMvd2ViL2NvbW1vbi9pbmNsdWRlcy9kb25hdGVfYmFubmVyLnR0Lmh0bWwgLS0+CgoJCQkJCQkJCQoKCjxzZWN0aW9uIGlkPSJkb25hdGlvbi1iYW5uZXItdG9wIiBjbGFzcz0icm93IiBzdHlsZT0icG9zaXRpb246cmVsYXRpdmUiPgogIAogIDxhIGhyZWY9Imh0dHBzOi8vY29ubmVjdC5vcGVuZm9vZGZhY3RzLm9yZy9ldmVudC9vcGVuLWZvb2QtZmFjdHMtZGF5cy0yMDI1LTMwL3JlZ2lzdGVyIj4KICAgIDxpbWcgc3JjPSIvaW1hZ2VzL21pc2MvZG9uYXRpb24tYmFubmVycy9vZmYtZGF5cy0yMDI1LWVuLjEyODB4MTkxLnBuZyIKICAgICAgIGFsdD0iT3BlbiBGb29kIEZhY3RzIERheXMgMjAyNSIKICAgICAgIHdpZHRoPSIxMjgwIgogICAgICAgaGVpZ2h0PSIxOTEiIGNsYXNzPSJzaG93LWZvci1tZWRpdW0tdXAiLz4KICAgIDxpbWcgc3JjPSIvaW1hZ2VzL21pc2MvZG9uYXRpb24tYmFubmVycy9vZmYtZGF5cy0yMDI1LWVuLm1vYmlsZS5wbmciCiAgICAgICBhbHQ9Ik9wZW4gRm9vZCBGYWN0cyBEYXlzIDIwMjUiCiAgICAgICB3aWR0aD0iMTI4MCIKICAgICAgIGhlaWdodD0iNDc3IiBjbGFzcz0ic2hvdy1mb3Itc21hbGwtb25seSIvPiAgICAKICA8L2E+CiAgCgoKICA8ZGl2IGNsYXNzPSJkb25hdGlvbi1iYW5uZXJfX2Nsb3NlIj4KICAgIDxidXR0b24gaWQ9ImhpZGUtZG9uYXRlLWJhbm5lciIgY2xhc3M9Im1hdGVyaWFsLWljb25zIG1vZGVzdCIgb25jbGljaz0iRG9uYXRpb25CdXR0b24oKTsiIG9ua2V5cHJlc3M9IkRvbmF0aW9uQnV0dG9uKCk7Ij5jbG9zZTwvYnV0dG9uPgogIDwvZGl2Pgo8L3NlY3Rpb24+Cgo8c2NyaXB0PgogIGxldCBkID0gbmV3IERhdGUoKTsKICBsZXQgYmFubmVySUQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZG9uYXRpb24tYmFubmVyLXRvcCcpOwogIGxldCBnZXREb21haW4gPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luLnNwbGl0KCcuJyk7CgogIGZ1bmN0aW9uIHNldEJhbm5lckNvb2tpZShiY25hbWUsIGJjdmFsLCBiY2V4ZGF5cykgewogICAgZC5zZXRUaW1lKGQuZ2V0VGltZSgpICsgKGJjZXhkYXlzKjYwKjYwKjI0KjEwMDApKTsKICAgIGxldCBleHBpcmVzID0gJ2V4cGlyZXM9JyArIGQudG9VVENTdHJpbmcoKTsKICAgIC8vIEFwcGx5IGNvb2tpZSBmb3IgZXZlcnkgZG9tYWluIGNvbnRhaW5zIG9wZW4uLi5mYWN0cwogICAgbGV0IGRvbWFpbiA9ICdkb21haW49LicgKyBnZXREb21haW4uc2xpY2UoMSkuam9pbignLicpOwogICAgZG9jdW1lbnQuY29va2llID0gYmNuYW1lICsgJz0nICsgYmN2YWwgKyAnOycgKyBleHBpcmVzICsgJzsnICsgZG9tYWluICsgJztTYW1lU2l0ZT1Ob25lO1NlY3VyZTtwYXRoPS8nOwogIH0KCiAgZnVuY3Rpb24gZ2V0QmFubmVyQ29va2llKGJjbmFtZSkgewogICAgY29uc3QgbmFtZSA9IGJjbmFtZSArICc9JzsKICAgIGNvbnN0IGRlY29kZWRDb29raWVzID0gZGVjb2RlVVJJQ29tcG9uZW50KGRvY3VtZW50LmNvb2tpZSk7CiAgICBjb25zdCBjb29raWVzID0gZGVjb2RlZENvb2tpZXMuc3BsaXQoJzsnKTsKICAgIGZvciAoY29uc3QgY29va2llIG9mIGNvb2tpZXMpIHsKICAgICAgbGV0IGMgPSBjb29raWU7CiAgICAgIHdoaWxlIChjLmNoYXJBdCgwKSA9PSAnICcpIHsgYyA9IGMuc3Vic3RyaW5nKDEpOyB9CiAgICAgIGlmIChjLmluZGV4T2YobmFtZSkgPT0gMCkgeyByZXR1cm4gYy5zdWJzdHJpbmcobmFtZS5sZW5ndGgsIGMubGVuZ3RoKTsgfQogICAgfQoKICAgIHJldHVybiAnJzsKICB9CgogIGZ1bmN0aW9uIERvbmF0aW9uQnV0dG9uKCkgewogICAgc2V0QmFubmVyQ29va2llKCdvZmZfZGF5c18yMDI1JywgMSwgMTgwKTsKICAgIGJhbm5lcklELnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgfQoKICBpZiAoZ2V0QmFubmVyQ29va2llKCdvZmZfZGF5c18yMDI1JykgIT09ICcnKSB7CiAgICBiYW5uZXJJRC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogIH0gZWxzZSB7CiAgICBiYW5uZXJJRC5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnOwogIH0KPC9zY3JpcHQ+CgoKCQkJCQkJCQoJCQkJCQkKCQkJCQkJCiAgICAgICAgICAgIAkJCQoJCQkJCQkKCQkJCQkJCQoJCQkJCQkJCTwhLS0gc29tZSBsaXN0cyBvZiBwcm9kdWN0cyBmb3IgZmFjZXRzIChlLmcuIGJyYW5kcykgaGF2ZSBtaWNyb2Zvcm1hdHMgZGF0YSAtLT4KCQkJCQkJCQk8ZGl2IGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cHM6Ly9zY2hlbWEub3JnL1RoaW5nIj4KCQkJCQkJCQkJPGRpdiBjbGFzcz0icm93Ij4KCQkJCQkJCQkJCTxkaXYgY2xhc3M9InNtYWxsLTEyIGNvbHVtbiB2LXNwYWNlLXNob3J0Ij4KCQkJCQkJCQkJCQk8aDEgaXRlbXByb3A9Im5hbWUiPjEyIG1vbnRoczwvaDE+CgkJCQkJCQkJCQk8L2Rpdj4KCQkJCQkJCQkJPC9kaXY+CgkJCQkJCQkJICA8IS0tIHN0YXJ0IHRlbXBsYXRlcy93ZWIvcGFnZXMvdGFnL3RhZy50dC5odG1sIC0tPgo8ZGl2IGNsYXNzPSJ0YWciPgogICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJsYXJnZS02IGNvbHVtbiI+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWdfbmF2aWdhdGlvbiI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZmFjZXRzL3BlcmlvZHMtYWZ0ZXItb3BlbmluZyI+UGVyaW9kIGFmdGVyIG9wZW5pbmc8L2E+OgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mYWNldHMvcGVyaW9kcy1hZnRlci1vcGVuaW5nLzEyLW1vbnRocyI+MTIgbW9udGhzPC9hPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0YWdfbG9nbyI+CiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9pbWFnZXMvbGFuZy9lbi9wZXJpb2RzX2FmdGVyX29wZW5pbmcvMTItbW9udGhzLjkweDkwLnN2ZyIgd2lkdGg9IjkwIiBoZWlnaHQ9IjkwIi8gc3R5bGU9ImRpc3BsYXk6aW5saW5lIiBhbHQ9IjEyIG1vbnRocyI+CgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgIAoKICAgICAgICAgICAgCgogICAgICAgICAgICAKICAgICAgICA8L2Rpdj4KCiAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgIAogICAgPC9kaXY+CjwvZGl2PgoKPCEtLSBlbmQgdGVtcGxhdGVzL3dlYi9wYWdlcy90YWcvdGFnLnR0Lmh0bWwgLS0+CjwhLS0gc3RhcnQgdGVtcGxhdGVzL3dlYi9jb21tb24vaW5jbHVkZXMvbGlzdF9vZl9wcm9kdWN0cy50dC5odG1sIC0tPiAKCjxkaXYgY2xhc3M9InJvdyI+CiAgPGRpdiBjbGFzcz0ic21hbGwtMTIgY29sdW1ucyI+IAogICAgCiAgICAKICAgICAgCiAgICAgIAogICAgICAKICAgICAgPCEtLSBkaXNwbGF5IGEgcGVybWFsaW5rIGlmIHRoZSB1cmwgaXMgZm9yIGEgc2NyaXB0IHRoYXQgbWF5IGhhdmUgUE9TVCBwYXJhbWV0ZXJzIC0tPgogICAgICAKICAgIAogICAgCiAgPC9kaXY+CjwvZGl2PgoKIAoKPGRpdiBjbGFzcz0iYmxvY2sgc2hvcnQgYmxvY2tfcmlzdHJldG8iPgogIDxkaXYgY2xhc3M9InJvdyI+CiAgICA8ZGl2IGNsYXNzPSJzbWFsbC0xMiBjb2x1bW5zIGZpbHRlclByb2R1Y3RzIj4KICAgICAgPGRpdj4KICAgICAgICA8c3BhbiBjbGFzcz0iZmlsdGVyUHJvZHVjdHNfX3Jlc3VsdHMiPgogICAgICAgICAgPHNwYW4gY2xhc3M9Im1hdGVyaWFsLWljb25zIiBhcmlhLWhpZGRlbj0idHJ1ZSI+c2VhcmNoPC9zcGFuPgogICAgICAgICAgMiw0NTIgcHJvZHVjdHMKICAgICAgICA8L3NwYW4+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJmaWx0ZXJQcm9kdWN0c19fYnV0dG9ucyI+CiAgICAgICAgPGRpdj4KICAgICAgICAgIDxidXR0b24gaHJlZj0iIyIgZGF0YS1kcm9wZG93bj0iZHJvcF9zb3J0IiBhcmlhLWNvbnRyb2xzPSJkcm9wX3NvcnQiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBjbGFzcz0iYnV0dG9uIHJvdW5kIGRyb3Bkb3duIHNtYWxsIHNlY29uZGFyeSB1bm1hcmdlZCI+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+c3dhcF92ZXJ0PC9zcGFuPgogICAgICAgICAgICBSZWNlbnRseSBtb2RpZmllZCBwcm9kdWN0cwogICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICA8dWwgaWQ9ImRyb3Bfc29ydCIgZGF0YS1kcm9wZG93bi1jb250ZW50IGNsYXNzPSJmLWRyb3Bkb3duIiBhcmlhLWhpZGRlbj0idHJ1ZSI+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9Ii9mYWNldHMvcGVyaW9kcy1hZnRlci1vcGVuaW5nLzEyLW1vbnRocz9zb3J0X2J5PWNyZWF0ZWRfdCIgb25jbGljaz0iJC5jb29raWUoJ2xhc3Rfc29ydF9ieScsICdjcmVhdGVkX3QnLCB7IGV4cGlyZXM6IDE4MCwgcGF0aDogJy8nIH0pOyI+UmVjZW50bHkgYWRkZWQgcHJvZHVjdHM8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICA8YSBocmVmPSIvZmFjZXRzL3BlcmlvZHMtYWZ0ZXItb3BlbmluZy8xMi1tb250aHM/c29ydF9ieT1sYXN0X21vZGlmaWVkX3QiIG9uY2xpY2s9IiQuY29va2llKCdsYXN0X3NvcnRfYnknLCAnbGFzdF9tb2RpZmllZF90JywgeyBleHBpcmVzOiAxODAsIHBhdGg6ICcvJyB9KTsiPlJlY2VudGx5IG1vZGlmaWVkIHByb2R1Y3RzPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgIAogICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICAKICAgICAgICA8ZGl2PgogICAgICAgICAgPGJ1dHRvbiBocmVmPSIjIiBkYXRhLWRyb3Bkb3duPSJkcm9wMSIgYXJpYS1jb250cm9scz0iZHJvcDEiIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIiBjbGFzcz0iYnV0dG9uIHJvdW5kIGRyb3Bkb3duIHNtYWxsIHNlY29uZGFyeSB1bm1hcmdlZCI+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtYXRlcmlhbC1pY29ucyI+c29ydDwvc3Bhbj4KICAgICAgICAgICAgRXhwbG9yZSBwcm9kdWN0cyBieS4uLgogICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICA8dWwgaWQ9ImRyb3AxIiBkYXRhLWRyb3Bkb3duLWNvbnRlbnQgY2xhc3M9ImYtZHJvcGRvd24iIGFyaWEtaGlkZGVuPSJ0cnVlIj4KICAgICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZhY2V0cy9wZXJpb2RzLWFmdGVyLW9wZW5pbmcvMTItbW9udGhzL2NvdW50cmllcyIgcmVsPSJub2ZvbGxvdyI+Q291bnRyaWVzPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICA8YSBocmVmPSIvZmFjZXRzL3BlcmlvZHMtYWZ0ZXItb3BlbmluZy8xMi1tb250aHMvYnJhbmRzIiByZWw9Im5vZm9sbG93Ij5CcmFuZHM8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9Ii9mYWNldHMvcGVyaW9kcy1hZnRlci1vcGVuaW5nLzEyLW1vbnRocy9jYXRlZ29yaWVzIiByZWw9Im5vZm9sbG93Ij5DYXRlZ29yaWVzPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICA8YSBocmVmPSIvZmFjZXRzL3BlcmlvZHMtYWZ0ZXItb3BlbmluZy8xMi1tb250aHMvbGFiZWxzIiByZWw9Im5vZm9sbG93Ij5MYWJlbHM8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9Ii9mYWNldHMvcGVyaW9kcy1hZnRlci1vcGVuaW5nLzEyLW1vbnRocy9wYWNrYWdpbmciIHJlbD0ibm9mb2xsb3ciPlBhY2thZ2luZzwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZhY2V0cy9wZXJpb2RzLWFmdGVyLW9wZW5pbmcvMTItbW9udGhzL29yaWdpbnMiIHJlbD0ibm9mb2xsb3ciPk9yaWdpbnMgb2YgaW5ncmVkaWVudHM8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9Ii9mYWNldHMvcGVyaW9kcy1hZnRlci1vcGVuaW5nLzEyLW1vbnRocy9tYW51ZmFjdHVyaW5nLXBsYWNlcyIgcmVsPSJub2ZvbGxvdyI+TWFudWZhY3R1cmluZyBvciBwcm9jZXNzaW5nIHBsYWNlczwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZhY2V0cy9wZXJpb2RzLWFmdGVyLW9wZW5pbmcvMTItbW9udGhzL3BhY2thZ2VyLWNvZGVzIiByZWw9Im5vZm9sbG93Ij5UcmFjZWFiaWxpdHkgY29kZXM8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9Ii9mYWNldHMvcGVyaW9kcy1hZnRlci1vcGVuaW5nLzEyLW1vbnRocy9pbmdyZWRpZW50cyIgcmVsPSJub2ZvbGxvdyI+SW5ncmVkaWVudHM8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9Ii9mYWNldHMvcGVyaW9kcy1hZnRlci1vcGVuaW5nLzEyLW1vbnRocy9hZGRpdGl2ZXMiIHJlbD0ibm9mb2xsb3ciPkFkZGl0aXZlczwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZhY2V0cy9wZXJpb2RzLWFmdGVyLW9wZW5pbmcvMTItbW9udGhzL3ZpdGFtaW5zIiByZWw9Im5vZm9sbG93Ij5BZGRlZCB2aXRhbWluczwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZhY2V0cy9wZXJpb2RzLWFmdGVyLW9wZW5pbmcvMTItbW9udGhzL21pbmVyYWxzIiByZWw9Im5vZm9sbG93Ij5BZGRlZCBtaW5lcmFsczwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZhY2V0cy9wZXJpb2RzLWFmdGVyLW9wZW5pbmcvMTItbW9udGhzL2FsbGVyZ2VucyIgcmVsPSJub2ZvbGxvdyI+QWxsZXJnZW5zPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICA8YSBocmVmPSIvZmFjZXRzL3BlcmlvZHMtYWZ0ZXItb3BlbmluZy8xMi1tb250aHMvdHJhY2VzIiByZWw9Im5vZm9sbG93Ij5UcmFjZXM8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9Ii9mYWNldHMvcGVyaW9kcy1hZnRlci1vcGVuaW5nLzEyLW1vbnRocy9taXNjIiByZWw9Im5vZm9sbG93Ij5NaXNjZWxsYW5lb3VzPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICA8YSBocmVmPSIvZmFjZXRzL3BlcmlvZHMtYWZ0ZXItb3BlbmluZy8xMi1tb250aHMvbGFuZ3VhZ2VzIiByZWw9Im5vZm9sbG93Ij5MYW5ndWFnZXM8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9Ii9mYWNldHMvcGVyaW9kcy1hZnRlci1vcGVuaW5nLzEyLW1vbnRocy9jb250cmlidXRvcnMiIHJlbD0ibm9mb2xsb3ciPkNvbnRyaWJ1dG9yczwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZhY2V0cy9wZXJpb2RzLWFmdGVyLW9wZW5pbmcvMTItbW9udGhzL3N0YXRlcyIgcmVsPSJub2ZvbGxvdyI+U3RhdGVzPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICA8YSBocmVmPSIvZmFjZXRzL3BlcmlvZHMtYWZ0ZXItb3BlbmluZy8xMi1tb250aHMvZGF0YS1zb3VyY2VzIiByZWw9Im5vZm9sbG93Ij5EYXRhIHNvdXJjZXM8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9Ii9mYWNldHMvcGVyaW9kcy1hZnRlci1vcGVuaW5nLzEyLW1vbnRocy9lbnRyeS1kYXRlcyIgcmVsPSJub2ZvbGxvdyI+RW50cnkgZGF0ZXM8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9Ii9mYWNldHMvcGVyaW9kcy1hZnRlci1vcGVuaW5nLzEyLW1vbnRocy9sYXN0LWVkaXQtZGF0ZXMiIHJlbD0ibm9mb2xsb3ciPkxhc3QgZWRpdCBkYXRlczwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIAogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZhY2V0cy9wZXJpb2RzLWFmdGVyLW9wZW5pbmcvMTItbW9udGhzL2xhc3QtY2hlY2stZGF0ZXMiIHJlbD0ibm9mb2xsb3ciPkxhc3QgY2hlY2sgZGF0ZXM8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxhIGhyZWY9Ii9mYWNldHMvcGVyaW9kcy1hZnRlci1vcGVuaW5nLzEyLW1vbnRocy90ZWFtcyIgcmVsPSJub2ZvbGxvdyI+VGVhbXM8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAKICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgICAgCiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CjwvZGl2PgoKCjxkaXYgY2xhc3M9InJvdyI+Cgk8ZGl2IGNsYXNzPSJzbWFsbC0xMiBjb2x1bW5zIj4KICAgIDxkaXYgaWQ9InByZWZlcmVuY2VzX3NlbGVjdGVkIiBjbGFzcz0ic21hbGwtMTIgZmxleC1ncmlkIHYtc3BhY2Utc2hvcnQgdi1hbGlnbi1jZW50ZXIgZGlyZWN0aW9uLXJvdyBmdWxsLXdpZHRoIHYtYWxpZ24tYmV0d2VlbiI+PC9kaXY+CiAgICA8ZGl2IGlkPSJwcmVmZXJlbmNlc19zZWxlY3Rpb25fZm9ybSIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+PC9kaXY+CiAgPC9kaXY+CjwvZGl2PgoKCSAKPGRpdiBjbGFzcz0icm93Ij4KPGRpdiBjbGFzcz0ibGFyZ2UtMTIgY29sdW1ucyI+CiAgICAKICAgIDxkaXYgaWQ9InNlYXJjaF9yZXN1bHRzIiBzdHlsZT0iY2xlYXI6bGVmdDsiPgogICAgICAgIDx1bCBjbGFzcz0icHJvZHVjdHMiPgogICAgCiAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgICAKICAgIAogICAgCgkJPC91bD4KICA8L2Rpdj4KICAgICAgCiAgICAKCTx1bCBpZD0icGFnZXMiIGNsYXNzPSJwYWdpbmF0aW9uIj48bGkgY2xhc3M9InVuYXZhaWxhYmxlIj5QYWdlczo8L2xpPjxsaSBjbGFzcz0iY3VycmVudCI+PGEgaHJlZj0iIj4xPC9hPjwvbGk+PGxpPjxhIGhyZWY9Ii9mYWNldHMvcGVyaW9kcy1hZnRlci1vcGVuaW5nLzEyLW1vbnRocy8yIj4yPC9hPjwvbGk+PGxpPjxhIGhyZWY9Ii9mYWNldHMvcGVyaW9kcy1hZnRlci1vcGVuaW5nLzEyLW1vbnRocy8zIj4zPC9hPjwvbGk+PGxpPjxhIGhyZWY9Ii9mYWNldHMvcGVyaW9kcy1hZnRlci1vcGVuaW5nLzEyLW1vbnRocy80Ij40PC9hPjwvbGk+PGxpIGNsYXNzPSJ1bmF2YWlsYWJsZSI+JmhlbGxpcDs8L2xpPjxsaT48YSBocmVmPSIvZmFjZXRzL3BlcmlvZHMtYWZ0ZXItb3BlbmluZy8xMi1tb250aHMvNDgiPjQ4PC9hPjwvbGk+PGxpPjxhIGhyZWY9Ii9mYWNldHMvcGVyaW9kcy1hZnRlci1vcGVuaW5nLzEyLW1vbnRocy80OSI+NDk8L2E+PC9saT48bGk+PGEgaHJlZj0iL2ZhY2V0cy9wZXJpb2RzLWFmdGVyLW9wZW5pbmcvMTItbW9udGhzLzUwIj41MDwvYT48L2xpPjxsaT48YSBocmVmPSIvZmFjZXRzL3BlcmlvZHMtYWZ0ZXItb3BlbmluZy8xMi1tb250aHMvMiIgcmVsPSJuZXh0JG5vZm9sbG93Ij5OZXh0PC9hPjwvbGk+PGxpIGNsYXNzPSJ1bmF2YWlsYWJsZSI+KDUwIHByb2R1Y3RzIHBlciBwYWdlKTwvbGk+PC91bD4KCiAgPC9kaXY+CjwvZGl2PgoKCjwhLS0gZW5kIHRlbXBsYXRlcy93ZWIvY29tbW9uL2luY2x1ZGVzL2xpc3Rfb2ZfcHJvZHVjdHMudHQuaHRtbCAtLT4KCgkJCQkJCQkJPC9kaXY+CgkJCQkJCQkKCQkJCQkJCgkJCQkJPC9kaXY+CgkJCQk8L2Rpdj4KCQkJPC9kaXY+CgkJPC9kaXY+CgkJPC9kaXY+CgoJCQoJCTxmb290ZXI+CgkJCTxkaXYgY2xhc3M9ImJsb2NrX2xpZ2h0IGJnLXdoaXRlIiBpZD0iaW5zdGFsbF90aGVfYXBwX2Jsb2NrIj4KCQkJCTxkaXYgY2xhc3M9InJvdyI+CgkJCQkJPGRpdiBjbGFzcz0ic21hbGwtMTIgZmxleC1ncmlkIHYtc3BhY2Utc2hvcnQgdi1hbGlnbi1jZW50ZXIgZGlyZWN0aW9uLXJvdyBoLXNwYWNlLXRpbnkiPgoJCQkJCQk8ZGl2IGNsYXNzPSJjZWxsIHNtYWxsLTEwMCBtZWRpdW0tMTAwIGxhcmdlLTUwIGZsZXgtZ3JpZCB2LWFsaWduLWNlbnRlciBkaXJlY3Rpb24tcm93Ij4KCQkJCQkJCTxpbWcgY2xhc3M9ImNlbGwgc21hbGwtNTAgdi1hbGlnbi1jZW50ZXIiIHNyYz0iL2ltYWdlcy9pbGx1c3RyYXRpb25zL2FwcC1pY29uLWluLXRoZS1jbG91ZHMuc3ZnIiBhbHQ9IlRoZSBPcGVuIEZvb2QgRmFjdHMgbG9nbyBpbiB0aGUgY2xvdWQiIHN0eWxlPSJoZWlnaHQ6MTIwcHgiPgoJCQkJCQkJPGRpdiBjbGFzcz0iY2VsbCBzbWFsbC01MCB2LWFsaWduLWNlbnRlciIgaWQ9ImZvb3Rlcl9zY2FuIiBzdHlsZT0iZGlzcGxheTpibG9jayI+CgkJCQkJCQkJPGRpdiBpZD0iZm9vdGVyX2luc3RhbGxfdGhlX2FwcCI+CgkJCQkJCQkJCUluc3RhbGwgdGhlIGFwcCEKCQkJCQkJCQk8L2Rpdj4KCQkJCQkJCQlTY2FuIHlvdXIgPHNwYW4gaWQ9ImV2ZXJ5ZGF5Ij5ldmVyeWRheTwvc3Bhbj4gPHNwYW4gaWQ9ImZvb2RzIj5mb29kczwvc3Bhbj4KCQkJCQkJCTwvZGl2PgoJCQkJCQk8L2Rpdj4KCQkJCQkJPGRpdiBjbGFzcz0icm93Ij4KCQkJCQkJCTxkaXYgY2xhc3M9InNtYWxsLTEyIG1lZGl1bS0xMiBsYXJnZS0xMiB2LXNwYWNlLW5vcm1hbCBjb2x1bW4gYmFkZ2UtY29udGFpbmVyIj4KCQkJCQkJCQk8IS0tIGFuZHJvaWRfYXBwX2xpbmsgLSBodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9hcHBzL2RldGFpbHM/aWQ9b3JnLm9wZW5iZWF1dHlmYWN0cy5zY2FubmVyJmhsPWVuIC0tPgoJCQkJCQkJCTxhICBocmVmPSJodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9hcHBzL2RldGFpbHM/aWQ9b3JnLm9wZW5mb29kZmFjdHMuc2Nhbm5lciZ1dG1fc291cmNlPW9iZiZ1dGZfbWVkaXVtPXdlYiZ1dG1fY2FtcGFpZ249aW5zdGFsbF90aGVfYXBwX2FuZHJvaWRfZm9vdGVyX2VuIj48aW1nIHNyYz0iL2ltYWdlcy9taXNjL3BsYXlzdG9yZS9pbWcvbGF0ZXN0L0dldEl0T25Hb29nbGVQbGF5X0JhZGdlX1dlYl9jb2xvcl9FbmdsaXNoLnN2ZyIgYWx0PSJHZXQgSXQgT24gR29vZ2xlIFBsYXkiIGxvYWRpbmc9ImxhenkiIGhlaWdodD0iNDAiIHdpZHRoPSIxMjAiPjwvYT4KCQkJCQkJCQkKCQkJCQkJCQk8YSBocmVmPSIiPjxpbWcgc3JjPSIvaW1hZ2VzL21pc2MvZi1kcm9pZC9zdmcvZ2V0LWl0LW9uLWVuLnN2ZyIgYWx0PSJBdmFpbGFibGUgb24gRi1Ecm9pZCIgbG9hZGluZz0ibGF6eSIgaGVpZ2h0PSI0MCIgd2lkdGg9IjEyMCI+PC9hPgoKCQkJCQkJCQk8IS0tIGFuZHJvaWRfYXBrX2FwcF9saW5rIC0gaHR0cHM6Ly93b3JsZC5vcGVuZm9vZGZhY3RzLm9yZy9pbWFnZXMvYXBwcy9vZmYuYXBrIC0tPgoJCQkJCQkJCTxhIGhyZWY9Imh0dHBzOi8vd29ybGQub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXBwcy9vYmYuYXBrP3V0bV9zb3VyY2U9b2JmJnV0Zl9tZWRpdW09d2ViP3V0bV9zb3VyY2U9b2ZmJnV0Zl9tZWRpdW09d2ViJnV0bV9jYW1wYWlnbj1pbnN0YWxsX3RoZV9hcHBfYXBrX2Zvb3Rlcl9lbiI+PGltZyBzcmM9Ii9pbWFnZXMvbWlzYy9hcHAtbGFuZGluZy1wYWdlL2Rvd25sb2FkLWFway9kb3dubG9hZC1hcGtfZW4uc3ZnIiBhbHQ9IkFuZHJvaWQgQVBLIiBsb2FkaW5nPSJsYXp5IiBoZWlnaHQ9IjQwIiB3aWR0aD0iMTIwIj48L2E+CgkJCQkJCQkJCgkJCQkJCQkJPCEtLSBtc2dpZCAiaHR0cHM6Ly9hcHBzLmFwcGxlLmNvbS9hcHAvb3Blbi1iZWF1dHktZmFjdHMvaWQxMTIyOTI2MzgwIiAtLT4KCQkJCQkJCQk8YSBocmVmPSJodHRwczovL2FwcHMuYXBwbGUuY29tL2FwcC9vcGVuLWJlYXV0eS1mYWN0cy9pZDExMjI5MjYzODA/dXRtX3NvdXJjZT1vYmYmdXRmX21lZGl1bT13ZWImdXRtX2NhbXBhaWduPWluc3RhbGxfdGhlX2FwcF9pb3NfZm9vdGVyX2VuIj48aW1nIHNyYz0iL2ltYWdlcy9taXNjL2FwcHN0b3JlL2JsYWNrL2FwcHN0b3JlX1VTLnN2ZyIgYWx0PSJEb3dubG9hZCBvbiB0aGUgQXBwIFN0b3JlIiAgbG9hZGluZz0ibGF6eSIgaGVpZ2h0PSI0MCIgd2lkdGg9IjEyMCI+PC9hPgoJCQkJCQkJPC9kaXY+CgkJCQkJCTwvZGl2PgoJCQkJCTwvZGl2PgoJCQkJPC9kaXY+CgkJCTwvZGl2PgoKCQkJCiAgICAgIAkJCTwhLS0gc3RhcnQgdGVtcGxhdGVzL3dlYi9jb21tb24vaW5jbHVkZXMvZG9uYXRlX2Jhbm5lci50dC5odG1sIC0tPgoKCgo8IS0tIERvbmF0aW9uIGJhbm5lciBAIGZvb3RlciAtLT4KCgo8IS0tIGVuZCB0ZW1wbGF0ZXMvd2ViL2NvbW1vbi9pbmNsdWRlcy9kb25hdGVfYmFubmVyLnR0Lmh0bWwgLS0+CgoJCQkJCgo8c2VjdGlvbiBjbGFzcz0iZG9uYXRpb24tYmFubmVyLWZvb3RlciByb3ciPgogIDxkaXYgY2xhc3M9ImRvbmF0aW9uLWJhbm5lci1mb290ZXJfX2xlZnQtYXNpZGUiPgogICAgPGRpdiBjbGFzcz0iZG9uYXRpb24tYmFubmVyLWZvb3Rlcl9faG9vay1zZWN0aW9uIj4KICAgICAgPHA+SGVscCB1cyBpbmZvcm0gbWlsbGlvbnMgb2YgY29uc3VtZXJzIGFyb3VuZCB0aGUgd29ybGQgYWJvdXQgd2hhdCB0aGV5IGVhdDwvcD4KICAgIDwvZGl2PgogICAgPGltZyBzcmM9Ii9pbWFnZXMvbWlzYy9kb25hdGlvbi1iYW5uZXJzL2RvbmF0aW9uLWJhbm5lci1ncm91cC1waG90by5wbmciIGFsdD0iZ3JvdXAgcGhvdG8gZG9uYXRpb24gMjAyNCIgLz4KICA8L2Rpdj4KICA8ZGl2PgogICAgPGRpdj4KICAgICAgPGRpdiBjbGFzcz0iZG9uYXRpb24tYmFubmVyLWZvb3Rlcl9fbWFpbi1zZWN0aW9uIj4KICAgICAgICA8aW1nCiAgICAgICAgICB3aWR0aD0iNTAiCiAgICAgICAgICBoZWlnaHQ9IjUwIgogICAgICAgICAgc3JjPSJodHRwczovL3dvcmxkLm9wZW5mb29kZmFjdHMub3JnL2ltYWdlcy9sb2dvcy9sb2dvLXZhcmlhbnRzL0NNSk4tSUNPTl9XSElURV9CR19PRkYuc3ZnIgogICAgICAgICAgYWx0PSJvcGVuIGZvb2QgZmFjdHMgbG9nbyIKICAgICAgICAvPgogICAgICAgIDxoMyBjbGFzcz0iZG9uYXRpb24tYmFubmVyLWZvb3Rlcl9fbWFpbi10aXRsZSI+UGxlYXNlIGdpdmUgdG8gb3VyIDIwMjUgRnVuZHJhaXNlcjwvaDM+CiAgICAgIDwvZGl2PgogICAgICA8cD5Zb3VyIGRvbmF0aW9ucyBmdW5kIHRoZSBkYXktdG8tZGF5IG9wZXJhdGlvbnMgb2Ygb3VyIG5vbi1wcm9maXQgYXNzb2NpYXRpb246PC9wPgogICAgICA8dWw+CiAgICAgICAgPGxpPgogICAgICAgICAga2VlcGluZyBvdXIgZGF0YWJhc2Ugb3BlbiAmIGF2YWlsYWJsZSB0byBhbGwsCiAgICAgICAgICA8dWw+CiAgICAgICAgICAgIDxsaT50ZWNobmljYWwgaW5mcmFzdHJ1Y3R1cmUgKHdlYnNpdGUvbW9iaWxlIGFwcCkgJiBhIHNtYWxsIHBlcm1hbmVudCB0ZWFtPC9saT4KICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgICA8cD5yZW1haW4gaW5kZXBlbmRlbnQgb2YgdGhlIGZvb2QgaW5kdXN0cnksPC9wPgogICAgICAgIDwvbGk+CiAgICAgICAgPGxpPgogICAgICAgICAgPHA+ZW5nYWdlIGEgY29tbXVuaXR5IG9mIGNvbW1pdHRlZCBjaXRpemVucyw8L3A+CiAgICAgICAgPC9saT4KICAgICAgICA8bGk+CiAgICAgICAgICA8cD5zdXBwb3J0IHRoZSBhZHZhbmNlbWVudCBvZiBwdWJsaWMgaGVhbHRoIHJlc2VhcmNoLjwvcD4KICAgICAgICA8L2xpPgogICAgICA8L3VsPgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJkb25hdGlvbi1iYW5uZXItZm9vdGVyX19hY3Rpb25zLXNlY3Rpb24iPgogICAgICA8ZGl2IGNsYXNzPSJkb25hdGlvbi1iYW5uZXItZm9vdGVyX19hY3Rpb25zLXNlY3Rpb25fX2ZpbmFuY2lhbCI+CiAgICAgICAgPHA+CiAgICAgICAgICBFYWNoIGRvbmF0aW9uIGNvdW50cyEgV2UgYXBwcmVjaWF0ZSB5b3VyIHN1cHBvcnQgaW4gYnJpbmdpbmcgZnVydGhlciBmb29kIHRyYW5zcGFyZW5jeSBpbiB0aGUgd29ybGQuCiAgICAgICAgPC9wPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iZG9uYXRpb24tYmFubmVyLWZvb3Rlcl9fYWN0aW9ucy1zZWN0aW9uX19kb25hdGUtYnV0dG9uIj4KICAgICAgICA8YSBocmVmPSJodHRwczovL3dvcmxkLm9wZW5mb29kZmFjdHMub3JnL2RvbmF0ZS10by1vcGVuLWZvb2QtZmFjdHM/dXRtX3NvdXJjZT1vZmYmdXRmX21lZGl1bT13ZWImdXRtX2NhbXBhaWduPWRvbmF0ZS0yMDI0LWEmdXRtX3Rlcm09ZW4tdGV4dC1idXR0b24iPgogICAgICAgICAgPGJ1dHRvbj5JIFNVUFBPUlQ8L2J1dHRvbj4KICAgICAgICA8L2E+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+Cjwvc2VjdGlvbj4KCgoJCQkKICAgICAgCQkKCQkJPGRpdiBjbGFzcz0iYmxvY2tfbGlnaHQgYmxvY2tfY2FwcHVjaW5vIiBpZD0iY29udHJpYnV0ZV9hbmRfZGlzY292ZXJfbGlua3NfYmxvY2siPgoJCQkJPGRpdiBjbGFzcz0icm93Ij4KCQkJCQk8ZGl2IGNsYXNzPSJzbWFsbC0xMiBsYXJnZS02IGNvbHVtbnMgdi1zcGFjZS1ub3JtYWwgYmxvY2tfb2ZmIj4KCQkJCQkJPGgzIGNsYXNzPSJ0aXRsZS01IHRleHQtbWVkaXVtIj5Kb2luIHRoZSBjb21tdW5pdHk8L2gzPgoJCQkJCQk8cD5EaXNjb3ZlciBvdXIgPGEgaHJlZj0iL2NvZGUtb2YtY29uZHVjdCI+Q29kZSBvZiBjb25kdWN0PC9hPjwvcD4KCQkJCQkJPHA+Sm9pbiB1cyBvbiA8YSBocmVmPSJodHRwczovL3NsYWNrLm9wZW5mb29kZmFjdHMub3JnIj5TbGFjazwvYT48L3A+CgkJCQkJCTxwPjxhIGhyZWY9Imh0dHBzOi8vZm9ydW0ub3BlbmZvb2RmYWN0cy5vcmcvIj5Gb3J1bTwvYT48L3A+CgkJCQkJCTxwIGlkPSJmb290ZXJfc29jaWFsX2ljb25zIj5Gb2xsb3cgdXM6IAoJCQkJCQkJPGEgaHJlZj0iaHR0cHM6Ly94LmNvbS9PcGVuRm9vZEZhY3RzIj48aW1nIHNyYz0iL2ltYWdlcy9pY29ucy9kaXN0L3guc3ZnIiBjbGFzcz0iZm9vdGVyX3NvY2lhbF9pY29uIiBhbHQ9IngiPjwvYT4KCQkJCQkJCTxhIGhyZWY9Imh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9vcGVuZm9vZGZhY3RzP3V0bV9zb3VyY2U9b2JmJnV0Zl9tZWRpdW09d2ViIj48aW1nIHNyYz0iL2ltYWdlcy9pY29ucy9kaXN0L2ZhY2Vib29rLnN2ZyIgY2xhc3M9ImZvb3Rlcl9zb2NpYWxfaWNvbiIgYWx0PSJGYWNlYm9vayI+PC9hPgoJCQkJCQkJPGEgaHJlZj0iaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9vcGVuLmZvb2QuZmFjdHMvIj48aW1nIHNyYz0iL2ltYWdlcy9pY29ucy9kaXN0L2luc3RhZ3JhbS5zdmciIGNsYXNzPSJmb290ZXJfc29jaWFsX2ljb24iIGFsdD0iSW5zdGFncmFtIj48L2E+CgkJCQkJCQkKCQkJCQkJPC9wPgoJCQkJCQk8cD48YSBocmVmPSJodHRwczovL2xpbmsub3BlbmZvb2RmYWN0cy5vcmcvbmV3c2xldHRlci1lbiI+U3Vic2NyaWJlIHRvIG91ciBuZXdzbGV0dGVyPC9hPjwvcD4KCQkJCQk8L2Rpdj4KCQkJCQk8ZGl2IGNsYXNzPSJzbWFsbC0xMiBsYXJnZS02IGNvbHVtbnMgcHJvamVjdCB2LXNwYWNlLW5vcm1hbCI+CgkJCQkJCTxoMyBjbGFzcz0idGl0bGUtNSB0ZXh0LW1lZGl1bSI+RGlzY292ZXIgdGhlIHByb2plY3Q8L2gzPgoJCQkJCQk8dWwgY2xhc3M9ImlubGluZS1saXN0IHRhZ3NfbGlua3Mgdi1zcGFjZS10aW55IGgtc3BhY2UtdGlueSIgPgoJCQkJCQkJPGxpPjxhIGNsYXNzPSJidXR0b24gc21hbGwgd2hpdGUtYnV0dG9uIHJhZGl1cyIgaHJlZj0iL3doby13ZS1hcmUiPldobyB3ZSBhcmU8L2E+PC9saT4KCQkJCQkJCTxsaT48YSBjbGFzcz0iYnV0dG9uIHNtYWxsIHdoaXRlLWJ1dHRvbiByYWRpdXMiIGhyZWY9Imh0dHBzOi8vd29ybGQub3BlbmZvb2RmYWN0cy5vcmcvb3Blbi1mb29kLWZhY3RzLXZpc2lvbi1taXNzaW9uLXZhbHVlcy1hbmQtcHJvZ3JhbXMiPlZpc2lvbiwgTWlzc2lvbiwgVmFsdWVzIGFuZCBQcm9ncmFtczwvYT48L2xpPgoJCQkJCQkJPGxpPjxhIGNsYXNzPSJidXR0b24gc21hbGwgd2hpdGUtYnV0dG9uIHJhZGl1cyIgaHJlZj0iaHR0cHM6Ly9zdXBwb3J0Lm9wZW5mb29kZmFjdHMub3JnL2hlbHAvZW4tZ2IiPkZyZXF1ZW50bHkgYXNrZWQgcXVlc3Rpb25zPC9hPjwvbGk+CgkJCQkJCQk8bGk+PGEgY2xhc3M9ImJ1dHRvbiBzbWFsbCB3aGl0ZS1idXR0b24gcmFkaXVzIiBocmVmPSJodHRwczovL2Jsb2cub3BlbmZvb2RmYWN0cy5vcmcvZW4vIj5PcGVuIEJlYXV0eSBGYWN0cyBibG9nPC9hPjwvbGk+CgkJCQkJCQk8bGk+PGEgY2xhc3M9ImJ1dHRvbiBzbWFsbCB3aGl0ZS1idXR0b24gcmFkaXVzIiBocmVmPSIvcHJlc3MiPlByZXNzPC9hPjwvbGk+CgkJCQkJCQk8bGk+PGEgY2xhc3M9ImJ1dHRvbiBzbWFsbCB3aGl0ZS1idXR0b24gcmFkaXVzIiBocmVmPSJodHRwczovL3dpa2kub3BlbmZvb2RmYWN0cy5vcmciPk9wZW4gQmVhdXR5IEZhY3RzIHdpa2kgKGVuKTwvYT48L2xpPgoJCQkJCQkJPGxpPjxhIGNsYXNzPSJidXR0b24gc21hbGwgd2hpdGUtYnV0dG9uIHJhZGl1cyIgaHJlZj0iL2NnaS90b3BfdHJhbnNsYXRvcnMucGwiPlRyYW5zbGF0b3JzPC9hPjwvbGk+CgkJCQkJCQk8bGk+PGEgY2xhc3M9ImJ1dHRvbiBzbWFsbCB3aGl0ZS1idXR0b24gcmFkaXVzIiBocmVmPSIvcGFydG5lcnMiPlBhcnRuZXJzPC9hPjwvbGk+CgkJCQkJCQk8bGk+PGEgY2xhc3M9ImJ1dHRvbiBzbWFsbCB3aGl0ZS1idXR0b24gcmFkaXVzIiBocmVmPSJodHRwczovL3dvcmxkLm9wZW5iZWF1dHlmYWN0cy5vcmciPk9wZW4gQmVhdXR5IEZhY3RzIC0gQ29zbWV0aWNzPC9hPjwvbGk+CgkJCQkJCQk8bGk+PGEgY2xhc3M9ImJ1dHRvbiBzbWFsbCB3aGl0ZS1idXR0b24gcmFkaXVzIiBocmVmPSJodHRwczovL3dvcmxkLnByby5vcGVuYmVhdXR5ZmFjdHMub3JnLyI+T3BlbiBGb29kIEZhY3RzIGZvciBQcm9kdWNlcnM8L2E+PC9saT4KCQkJCQkJPC91bD4KCQkJCQk8L2Rpdj4KCQkJCTwvZGl2PgoJCQk8L2Rpdj4KCgkJCTxkaXYgY2xhc3M9ImJsb2NrX29mZiBibG9ja19kYXJrIGJsb2NrX3Jpc3RyZXRvIiBpZD0iZm9vdGVyX2Jsb2NrIj4KCgkJCQk8ZGl2IGlkPSJmb290ZXJfYmxvY2tfaW1hZ2VfYmFubmVyX291dHNpZGUiPgoJCQkJCTxkaXYgaWQ9ImZvb3Rlcl9ibG9ja19pbWFnZV9iYW5uZXJfb3V0c2lkZTIiPgoKCQkJCQkJPGRpdiBjbGFzcz0icm93Ij4KCgkJCQkJCQk8ZGl2IGNsYXNzPSJzbWFsbC0xMiB0ZXh0LWNlbnRlciB2LXNwYWNlLXNob3J0IGgtc3BhY2UtbGFyZ2UiPgoJCQkJCQkJCTxhIGhyZWY9Ii8iIHN0eWxlPSJmb250LXNpemU6MXJlbTsiPjxpbWcgaWQ9ImxvZ28iIHNyYz0iaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvbG9nb3Mvb2JmLWxvZ28taG9yaXpvbnRhbC1tb25vLXdoaXRlLnN2ZyIgYWx0PSJPcGVuIEJlYXV0eSBGYWN0cyIgc3R5bGU9Im1hcmdpbjo4cHg7aGVpZ2h0OjQ4cHg7d2lkdGg6YXV0bzsiPjwvYT4KCgkJCQkJCQkJPHA+QSBjb2xsYWJvcmF0aXZlLCBmcmVlIGFuZCBvcGVuIGRhdGFiYXNlIG9mIGNvc21ldGljIHByb2R1Y3RzIGZyb20gYXJvdW5kIHRoZSB3b3JsZC48L3A+CgkJCQkJCQkJCgkJCQkJCQkJPHVsIGNsYXNzPSJpbmxpbmUtbGlzdCB0ZXh0LWNlbnRlciB0ZXh0LXNtYWxsIj4KCQkJCQkJCQkJPGxpPjxhIGhyZWY9Ii9sZWdhbCI+TGVnYWw8L2E+PC9saT4KCQkJCQkJCQkJPGxpPjxhIGhyZWY9Ii9wcml2YWN5Ij5Qcml2YWN5PC9hPjwvbGk+CgkJCQkJCQkJCTxsaT48YSBocmVmPSIvdGVybXMtb2YtdXNlIj5UZXJtcyBvZiB1c2U8L2E+PC9saT4KCQkJCQkJCQkJPGxpPjxhIGhyZWY9Ii9kYXRhIj5EYXRhLCBBUEkgYW5kIFNES3M8L2E+PC9saT4KCQkJCQkJCQkJPGxpPjxhIGhyZWY9Imh0dHBzOi8vd29ybGQub3BlbmZvb2RmYWN0cy5vcmcvZG9uYXRlLXRvLW9wZW4tZm9vZC1mYWN0cyI+RG9uYXRlIHRvIE9wZW4gRm9vZCBGYWN0czwvYT48L2xpPgoJCQkJCQkJCQk8bGk+PGEgaHJlZj0iaHR0cHM6Ly93b3JsZC5wcm8ub3BlbmZvb2RmYWN0cy5vcmcvIj5Qcm9kdWNlcnM8L2E+PC9saT4KCQkJCQkJCQkJPGxpPjxhIGhyZWY9Imh0dHBzOi8vbGluay5vcGVuZm9vZGZhY3RzLm9yZy9uZXdzbGV0dGVyLWVuIj5TdWJzY3JpYmUgdG8gb3VyIG5ld3NsZXR0ZXI8L2E+PC9saT4KCQkJCQkJCQk8L3VsPgoJCQkJCQkJPC9kaXY+CgoJCQkJCQk8L2Rpdj4KCgkJCQkJPC9kaXY+CgkJCQk8L2Rpdj4KCQkJPC9kaXY+CgkJPC9mb290ZXI+CgkJCgoJPC9kaXY+Cgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9qcy9kaXN0L21vZGVybml6ci5qcyIgZGF0YS1iYXNlLWxheW91dD0idHJ1ZSI+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2pzL2Rpc3QvanF1ZXJ5LmpzIiBkYXRhLWJhc2UtbGF5b3V0PSJ0cnVlIj48L3NjcmlwdD4KPHNjcmlwdCBzcmM9Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvanMvZGlzdC9qcXVlcnktdWkuanMiIGRhdGEtYmFzZS1sYXlvdXQ9InRydWUiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9qcy9kaXN0L2hjLXN0aWNreS5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2pzL2Rpc3QvZGlzcGxheS5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2pzL2Rpc3Qvc3Rpa2VsZW0uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9qcy9kaXN0L3Njcm9sbE5hdi5qcyI+PC9zY3JpcHQ+CiAgCgo8c2NyaXB0PgokKGZ1bmN0aW9uKCkgewpkaXNwbGF5X3VzZXJfcHJvZHVjdF9wcmVmZXJlbmNlcygiI3ByZWZlcmVuY2VzX3NlbGVjdGVkIiwgIiNwcmVmZXJlbmNlc19zZWxlY3Rpb25fZm9ybSIsIGZ1bmN0aW9uICgpIHsKCXJhbmtfYW5kX2Rpc3BsYXlfcHJvZHVjdHMoIiNzZWFyY2hfcmVzdWx0cyIsIHByb2R1Y3RzLCBjb250cmlidXRvcl9wcmVmcyk7Cn0pOwpyYW5rX2FuZF9kaXNwbGF5X3Byb2R1Y3RzKCIjc2VhcmNoX3Jlc3VsdHMiLCBwcm9kdWN0cywgY29udHJpYnV0b3JfcHJlZnMpOwoKCn0pOwo8L3NjcmlwdD4KCgoKPHNjcmlwdCBzcmM9Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvanMvZGlzdC9mb3VuZGF0aW9uLmpzIiBkYXRhLWJhc2UtbGF5b3V0PSJ0cnVlIj48L3NjcmlwdD4KPHNjcmlwdCBzcmM9Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvanMvZGlzdC9qcXVlcnkuY29va2llLmpzIj48L3NjcmlwdD4KPHNjcmlwdCBzcmM9Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvanMvZGlzdC9zZWxlY3QyLm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KdmFyIHBhZ2VfdHlwZSA9ICJwcm9kdWN0cyI7CnZhciBkZWZhdWx0X3ByZWZlcmVuY2VzID0geyJsYWJlbHNfZmFpcl90cmFkZSI6ImltcG9ydGFudCIsImxhYmVsc19vcmdhbmljIjoiaW1wb3J0YW50In07CnZhciBwcmVmZXJlbmNlc190ZXh0ID0gIkNsYXNzaWZ5IHRoZSA1MCBwcm9kdWN0cyBiZWxvdyBhY2NvcmRpbmcgdG8geW91ciBwcmVmZXJlbmNlcyI7CnZhciBjb250cmlidXRvcl9wcmVmcyA9IHsiZGlzcGxheV9iYXJjb2RlIjpudWxsLCJlZGl0X2xpbmsiOm51bGx9Owp2YXIgcHJvZHVjdHMgPSBbCiAgIHsKICAgICAgImF0dHJpYnV0ZV9ncm91cHMiOlsKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvdmVnYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2FuIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46dmVnYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2FuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvdmVnZXRhcmlhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdldGFyaWFuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdldGFyaWFuIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46dmVnZXRhcmlhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnZXRhcmlhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJhIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3BhbG0tb2lsLWZyZWUuc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoicGFsbV9vaWxfZnJlZSIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MTAwLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlBhbG0gb2lsIGZyZWUiLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjpwYWxtLW9pbC1mcmVlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiUGFsbSBvaWwgZnJlZSIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJpbmdyZWRpZW50c19hbmFseXNpcyIsCiAgICAgICAgICAgICJuYW1lIjoiSW5ncmVkaWVudHMiCiAgICAgICAgIH0sCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiJPcmdhbmljIGZhcm1pbmcgYWltcyB0byBwcm90ZWN0IHRoZSBlbnZpcm9ubWVudCBhbmQgdG8gY29uc2VydmUgYmlvZGl2ZXJzaXR5IGJ5IHByb2hpYml0aW5nIG9yIGxpbWl0aW5nIHRoZSB1c2Ugb2Ygc3ludGhldGljIGZlcnRpbGl6ZXJzLCBwZXN0aWNpZGVzIGFuZCBmb29kIGFkZGl0aXZlcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJPcmdhbmljIHByb2R1Y3RzIHByb21vdGUgZWNvbG9naWNhbCBzdXN0YWluYWJpbGl0eSBhbmQgYmlvZGl2ZXJzaXR5LiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3Qvb3JnYW5pYy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19vcmdhbmljIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJPcmdhbmljIGZhcm1pbmciLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik1pc3NpbmcgaW5mb3JtYXRpb246IG9yZ2FuaWMgcHJvZHVjdD8iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiV2hlbiB5b3UgYnV5IGZhaXIgdHJhZGUgcHJvZHVjdHMsIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcyBhcmUgcGFpZCBhbiBoaWdoZXIgYW5kIGZhaXJlciBwcmljZSwgd2hpY2ggaGVscHMgdGhlbSBpbXByb3ZlIGFuZCBzdXN0YWluIGhpZ2hlciBzb2NpYWwgYW5kIG9mdGVuIGVudmlyb25tZW50YWwgc3RhbmRhcmRzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6IkZhaXIgdHJhZGUgcHJvZHVjdHMgaGVscCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9mYWlyLXRyYWRlLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX2ZhaXJfdHJhZGUiLAogICAgICAgICAgICAgICAgICAibmFtZSI6IkZhaXIgdHJhZGUiLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik1pc3NpbmcgaW5mb3JtYXRpb246IGZhaXIgdHJhZGUgcHJvZHVjdD8iCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoibGFiZWxzIiwKICAgICAgICAgICAgIm5hbWUiOiJMYWJlbHMiCiAgICAgICAgIH0KICAgICAgXSwKICAgICAgImNvZGUiOiI0MDA1ODAwMDI3OTMyIiwKICAgICAgImltYWdlX2Zyb250X3NtYWxsX3VybCI6Imh0dHBzOi8vaW1hZ2VzLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL3Byb2R1Y3RzLzQwMC81ODAvMDAyLzc5MzIvZnJvbnRfZnIuNy4yMDAuanBnIiwKICAgICAgInByb2R1Y3RfZGlzcGxheV9uYW1lIjoiU3VuIFNlbnNpdGl2ZSBQcm90ZWN0IEtpZHMgU1BGIDUwKyBTcHJheSBDb3JwcyDigJMgRXVjZXJpbiDigJMgMjAwwqBtbCIsCiAgICAgICJ1cmwiOiJodHRwczovL3dvcmxkLm9wZW5iZWF1dHlmYWN0cy5vcmcvcHJvZHVjdC80MDA1ODAwMDI3OTMyL3N1bi1zZW5zaXRpdmUtcHJvdGVjdC1raWRzLXNwZi01MC1zcHJheS1jb3Jwcy1ldWNlcmluIgogICB9LAogICB7CiAgICAgICJhdHRyaWJ1dGVfZ3JvdXBzIjpbCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2FuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2FuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2FuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2V0YXJpYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiYSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9wYWxtLW9pbC1mcmVlLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InBhbG1fb2lsX2ZyZWUiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjEwMCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJQYWxtIG9pbCBmcmVlIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46cGFsbS1vaWwtZnJlZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlBhbG0gb2lsIGZyZWUiCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXMiLAogICAgICAgICAgICAibmFtZSI6IkluZ3JlZGllbnRzIgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiT3JnYW5pYyBmYXJtaW5nIGFpbXMgdG8gcHJvdGVjdCB0aGUgZW52aXJvbm1lbnQgYW5kIHRvIGNvbnNlcnZlIGJpb2RpdmVyc2l0eSBieSBwcm9oaWJpdGluZyBvciBsaW1pdGluZyB0aGUgdXNlIG9mIHN5bnRoZXRpYyBmZXJ0aWxpemVycywgcGVzdGljaWRlcyBhbmQgZm9vZCBhZGRpdGl2ZXMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiT3JnYW5pYyBwcm9kdWN0cyBwcm9tb3RlIGVjb2xvZ2ljYWwgc3VzdGFpbmFiaWxpdHkgYW5kIGJpb2RpdmVyc2l0eS4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJlIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L25vdC1vcmdhbmljLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19vcmdhbmljIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjowLAogICAgICAgICAgICAgICAgICAibmFtZSI6Ik9yZ2FuaWMgZmFybWluZyIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik5vdCBhbiBvcmdhbmljIHByb2R1Y3QiCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiV2hlbiB5b3UgYnV5IGZhaXIgdHJhZGUgcHJvZHVjdHMsIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcyBhcmUgcGFpZCBhbiBoaWdoZXIgYW5kIGZhaXJlciBwcmljZSwgd2hpY2ggaGVscHMgdGhlbSBpbXByb3ZlIGFuZCBzdXN0YWluIGhpZ2hlciBzb2NpYWwgYW5kIG9mdGVuIGVudmlyb25tZW50YWwgc3RhbmRhcmRzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6IkZhaXIgdHJhZGUgcHJvZHVjdHMgaGVscCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiZSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9ub3QtZmFpci10cmFkZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfZmFpcl90cmFkZSIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJGYWlyIHRyYWRlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTm90IGEgZmFpciB0cmFkZSBwcm9kdWN0IgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImxhYmVscyIsCiAgICAgICAgICAgICJuYW1lIjoiTGFiZWxzIgogICAgICAgICB9CiAgICAgIF0sCiAgICAgICJjb2RlIjoiMDc2OTkxNTE5MDU4OCIsCiAgICAgICJpbWFnZV9mcm9udF9zbWFsbF91cmwiOiJodHRwczovL2ltYWdlcy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9wcm9kdWN0cy8wNzYvOTkxLzUxOS8wNTg4L2Zyb250X2VuLjEzLjIwMC5qcGciLAogICAgICAicHJvZHVjdF9kaXNwbGF5X25hbWUiOiJ3d3cuVEhFT1JESU5BUlkuQ09NIOKAkyBUaGUgT3JkaW5hcnkg4oCTIDMwbWwiLAogICAgICAidXJsIjoiaHR0cHM6Ly93b3JsZC5vcGVuYmVhdXR5ZmFjdHMub3JnL3Byb2R1Y3QvMDc2OTkxNTE5MDU4OC93d3ctdGhlb3JkaW5hcnktY29tLXRoZS1vcmRpbmFyeSIKICAgfSwKICAgewogICAgICAiYXR0cmlidXRlX2dyb3VwcyI6WwogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdldGFyaWFuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdldGFyaWFuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdldGFyaWFuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImEiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvcGFsbS1vaWwtZnJlZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJwYWxtX29pbF9mcmVlIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjoxMDAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiUGFsbSBvaWwgZnJlZSIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnBhbG0tb2lsLWZyZWUiLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJQYWxtIG9pbCBmcmVlIgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzIiwKICAgICAgICAgICAgIm5hbWUiOiJJbmdyZWRpZW50cyIKICAgICAgICAgfSwKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6Ik9yZ2FuaWMgZmFybWluZyBhaW1zIHRvIHByb3RlY3QgdGhlIGVudmlyb25tZW50IGFuZCB0byBjb25zZXJ2ZSBiaW9kaXZlcnNpdHkgYnkgcHJvaGliaXRpbmcgb3IgbGltaXRpbmcgdGhlIHVzZSBvZiBzeW50aGV0aWMgZmVydGlsaXplcnMsIHBlc3RpY2lkZXMgYW5kIGZvb2QgYWRkaXRpdmVzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6Ik9yZ2FuaWMgcHJvZHVjdHMgcHJvbW90ZSBlY29sb2dpY2FsIHN1c3RhaW5hYmlsaXR5IGFuZCBiaW9kaXZlcnNpdHkuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiZSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9ub3Qtb3JnYW5pYy5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfb3JnYW5pYyIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJPcmdhbmljIGZhcm1pbmciLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJOb3QgYW4gb3JnYW5pYyBwcm9kdWN0IgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IldoZW4geW91IGJ1eSBmYWlyIHRyYWRlIHByb2R1Y3RzLCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMgYXJlIHBhaWQgYW4gaGlnaGVyIGFuZCBmYWlyZXIgcHJpY2UsIHdoaWNoIGhlbHBzIHRoZW0gaW1wcm92ZSBhbmQgc3VzdGFpbiBoaWdoZXIgc29jaWFsIGFuZCBvZnRlbiBlbnZpcm9ubWVudGFsIHN0YW5kYXJkcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJGYWlyIHRyYWRlIHByb2R1Y3RzIGhlbHAgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzLiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImUiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3Qvbm90LWZhaXItdHJhZGUuc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX2ZhaXJfdHJhZGUiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiRmFpciB0cmFkZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik5vdCBhIGZhaXIgdHJhZGUgcHJvZHVjdCIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJsYWJlbHMiLAogICAgICAgICAgICAibmFtZSI6IkxhYmVscyIKICAgICAgICAgfQogICAgICBdLAogICAgICAiY29kZSI6Ijg3MTA5MDg3NzgyMzAiLAogICAgICAiaW1hZ2VfZnJvbnRfc21hbGxfdXJsIjoiaHR0cHM6Ly9pbWFnZXMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvcHJvZHVjdHMvODcxLzA5MC84NzcvODIzMC9mcm9udF9lbi40LjIwMC5qcGciLAogICAgICAicHJvZHVjdF9kaXNwbGF5X25hbWUiOiJSZXN0b3Jpbmcgcml0dWFsIGJvZHkgbG90aW9uIOKAkyBVbmlsZXZlciDigJMgNDAwbWwiLAogICAgICAidXJsIjoiaHR0cHM6Ly93b3JsZC5vcGVuYmVhdXR5ZmFjdHMub3JnL3Byb2R1Y3QvODcxMDkwODc3ODIzMC9yZXN0b3Jpbmctcml0dWFsLWJvZHktbG90aW9uLXVuaWxldmVyIgogICB9LAogICB7CiAgICAgICJhdHRyaWJ1dGVfZ3JvdXBzIjpbCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2FuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2FuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2FuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2V0YXJpYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9wYWxtLW9pbC1jb250ZW50LXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoicGFsbV9vaWxfZnJlZSIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiUGFsbSBvaWwgZnJlZSIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnBhbG0tb2lsLWNvbnRlbnQtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiUGFsbSBvaWwgY29udGVudCB1bmtub3duIgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzIiwKICAgICAgICAgICAgIm5hbWUiOiJJbmdyZWRpZW50cyIKICAgICAgICAgfSwKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6Ik9yZ2FuaWMgZmFybWluZyBhaW1zIHRvIHByb3RlY3QgdGhlIGVudmlyb25tZW50IGFuZCB0byBjb25zZXJ2ZSBiaW9kaXZlcnNpdHkgYnkgcHJvaGliaXRpbmcgb3IgbGltaXRpbmcgdGhlIHVzZSBvZiBzeW50aGV0aWMgZmVydGlsaXplcnMsIHBlc3RpY2lkZXMgYW5kIGZvb2QgYWRkaXRpdmVzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6Ik9yZ2FuaWMgcHJvZHVjdHMgcHJvbW90ZSBlY29sb2dpY2FsIHN1c3RhaW5hYmlsaXR5IGFuZCBiaW9kaXZlcnNpdHkuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiZSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9ub3Qtb3JnYW5pYy5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfb3JnYW5pYyIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJPcmdhbmljIGZhcm1pbmciLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJOb3QgYW4gb3JnYW5pYyBwcm9kdWN0IgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IldoZW4geW91IGJ1eSBmYWlyIHRyYWRlIHByb2R1Y3RzLCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMgYXJlIHBhaWQgYW4gaGlnaGVyIGFuZCBmYWlyZXIgcHJpY2UsIHdoaWNoIGhlbHBzIHRoZW0gaW1wcm92ZSBhbmQgc3VzdGFpbiBoaWdoZXIgc29jaWFsIGFuZCBvZnRlbiBlbnZpcm9ubWVudGFsIHN0YW5kYXJkcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJGYWlyIHRyYWRlIHByb2R1Y3RzIGhlbHAgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzLiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImUiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3Qvbm90LWZhaXItdHJhZGUuc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX2ZhaXJfdHJhZGUiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiRmFpciB0cmFkZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik5vdCBhIGZhaXIgdHJhZGUgcHJvZHVjdCIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJsYWJlbHMiLAogICAgICAgICAgICAibmFtZSI6IkxhYmVscyIKICAgICAgICAgfQogICAgICBdLAogICAgICAiY29kZSI6IjM0MDEzNDc5Mzg1OTQiLAogICAgICAiaW1hZ2VfZnJvbnRfc21hbGxfdXJsIjoiaHR0cHM6Ly9pbWFnZXMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvcHJvZHVjdHMvMzQwLzEzNC83OTMvODU5NC9mcm9udF9lbi4yNi4yMDAuanBnIiwKICAgICAgInByb2R1Y3RfZGlzcGxheV9uYW1lIjoiUGFyb2RvbnRheCBEZW50aWZyaWNlIHF1b3RpZGllbiBhdSBmbHVvciDigJMgR2xheG9TbWl0aEtsaW5lIOKAkyAywqBYIDc1wqBtbCIsCiAgICAgICJ1cmwiOiJodHRwczovL3dvcmxkLm9wZW5iZWF1dHlmYWN0cy5vcmcvcHJvZHVjdC8zNDAxMzQ3OTM4NTk0L3Bhcm9kb250YXgtZGVudGlmcmljZS1xdW90aWRpZW4tYXUtZmx1b3ItZ2xheG9zbWl0aGtsaW5lIgogICB9LAogICB7CiAgICAgICJhdHRyaWJ1dGVfZ3JvdXBzIjpbCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2FuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2FuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2FuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2V0YXJpYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiYSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9wYWxtLW9pbC1mcmVlLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InBhbG1fb2lsX2ZyZWUiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjEwMCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJQYWxtIG9pbCBmcmVlIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46cGFsbS1vaWwtZnJlZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlBhbG0gb2lsIGZyZWUiCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXMiLAogICAgICAgICAgICAibmFtZSI6IkluZ3JlZGllbnRzIgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiT3JnYW5pYyBmYXJtaW5nIGFpbXMgdG8gcHJvdGVjdCB0aGUgZW52aXJvbm1lbnQgYW5kIHRvIGNvbnNlcnZlIGJpb2RpdmVyc2l0eSBieSBwcm9oaWJpdGluZyBvciBsaW1pdGluZyB0aGUgdXNlIG9mIHN5bnRoZXRpYyBmZXJ0aWxpemVycywgcGVzdGljaWRlcyBhbmQgZm9vZCBhZGRpdGl2ZXMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiT3JnYW5pYyBwcm9kdWN0cyBwcm9tb3RlIGVjb2xvZ2ljYWwgc3VzdGFpbmFiaWxpdHkgYW5kIGJpb2RpdmVyc2l0eS4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJlIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L25vdC1vcmdhbmljLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19vcmdhbmljIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjowLAogICAgICAgICAgICAgICAgICAibmFtZSI6Ik9yZ2FuaWMgZmFybWluZyIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik5vdCBhbiBvcmdhbmljIHByb2R1Y3QiCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiV2hlbiB5b3UgYnV5IGZhaXIgdHJhZGUgcHJvZHVjdHMsIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcyBhcmUgcGFpZCBhbiBoaWdoZXIgYW5kIGZhaXJlciBwcmljZSwgd2hpY2ggaGVscHMgdGhlbSBpbXByb3ZlIGFuZCBzdXN0YWluIGhpZ2hlciBzb2NpYWwgYW5kIG9mdGVuIGVudmlyb25tZW50YWwgc3RhbmRhcmRzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6IkZhaXIgdHJhZGUgcHJvZHVjdHMgaGVscCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiZSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9ub3QtZmFpci10cmFkZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfZmFpcl90cmFkZSIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJGYWlyIHRyYWRlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTm90IGEgZmFpciB0cmFkZSBwcm9kdWN0IgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImxhYmVscyIsCiAgICAgICAgICAgICJuYW1lIjoiTGFiZWxzIgogICAgICAgICB9CiAgICAgIF0sCiAgICAgICJjb2RlIjoiODcyMDE4MjYwODkyNSIsCiAgICAgICJpbWFnZV9mcm9udF9zbWFsbF91cmwiOiJodHRwczovL2ltYWdlcy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9wcm9kdWN0cy84NzIvMDE4LzI2MC84OTI1L2Zyb250X2VuLjguMjAwLmpwZyIsCiAgICAgICJwcm9kdWN0X2Rpc3BsYXlfbmFtZSI6IkNoYW1ww7ogY8OtdHJpY28gYW50aWNhc3BhIGNhYmVsbG8gZ3Jhc28g4oCTIFVsdHJleCDigJMgMzYwwqBtbCIsCiAgICAgICJ1cmwiOiJodHRwczovL3dvcmxkLm9wZW5iZWF1dHlmYWN0cy5vcmcvcHJvZHVjdC84NzIwMTgyNjA4OTI1L2NoYW1wdS1jaXRyaWNvLWFudGljYXNwYS1jYWJlbGxvLWdyYXNvLXVsdHJleCIKICAgfSwKICAgewogICAgICAiYXR0cmlidXRlX2dyb3VwcyI6WwogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdldGFyaWFuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdldGFyaWFuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdldGFyaWFuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImEiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvcGFsbS1vaWwtZnJlZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJwYWxtX29pbF9mcmVlIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjoxMDAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiUGFsbSBvaWwgZnJlZSIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnBhbG0tb2lsLWZyZWUiLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJQYWxtIG9pbCBmcmVlIgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzIiwKICAgICAgICAgICAgIm5hbWUiOiJJbmdyZWRpZW50cyIKICAgICAgICAgfSwKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6Ik9yZ2FuaWMgZmFybWluZyBhaW1zIHRvIHByb3RlY3QgdGhlIGVudmlyb25tZW50IGFuZCB0byBjb25zZXJ2ZSBiaW9kaXZlcnNpdHkgYnkgcHJvaGliaXRpbmcgb3IgbGltaXRpbmcgdGhlIHVzZSBvZiBzeW50aGV0aWMgZmVydGlsaXplcnMsIHBlc3RpY2lkZXMgYW5kIGZvb2QgYWRkaXRpdmVzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6Ik9yZ2FuaWMgcHJvZHVjdHMgcHJvbW90ZSBlY29sb2dpY2FsIHN1c3RhaW5hYmlsaXR5IGFuZCBiaW9kaXZlcnNpdHkuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9vcmdhbmljLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX29yZ2FuaWMiLAogICAgICAgICAgICAgICAgICAibmFtZSI6Ik9yZ2FuaWMgZmFybWluZyIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTWlzc2luZyBpbmZvcm1hdGlvbjogb3JnYW5pYyBwcm9kdWN0PyIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiJXaGVuIHlvdSBidXkgZmFpciB0cmFkZSBwcm9kdWN0cywgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzIGFyZSBwYWlkIGFuIGhpZ2hlciBhbmQgZmFpcmVyIHByaWNlLCB3aGljaCBoZWxwcyB0aGVtIGltcHJvdmUgYW5kIHN1c3RhaW4gaGlnaGVyIHNvY2lhbCBhbmQgb2Z0ZW4gZW52aXJvbm1lbnRhbCBzdGFuZGFyZHMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiRmFpciB0cmFkZSBwcm9kdWN0cyBoZWxwIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcy4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L2ZhaXItdHJhZGUtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfZmFpcl90cmFkZSIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiRmFpciB0cmFkZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTWlzc2luZyBpbmZvcm1hdGlvbjogZmFpciB0cmFkZSBwcm9kdWN0PyIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJsYWJlbHMiLAogICAgICAgICAgICAibmFtZSI6IkxhYmVscyIKICAgICAgICAgfQogICAgICBdLAogICAgICAiY29kZSI6IjM3NjAwOTk1OTQzNDMiLAogICAgICAiaW1hZ2VfZnJvbnRfc21hbGxfdXJsIjoiaHR0cHM6Ly9pbWFnZXMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvcHJvZHVjdHMvMzc2LzAwOS85NTkvNDM0My9mcm9udF9mci43LjIwMC5qcGciLAogICAgICAicHJvZHVjdF9kaXNwbGF5X25hbWUiOiJDYWR1bSBHZWwgRG91Y2V1ciBDb3JwcyBldCBDaGV2ZXV4IC0gRnJhaXNlIOKAkyA3NTBtbCIsCiAgICAgICJ1cmwiOiJodHRwczovL3dvcmxkLm9wZW5iZWF1dHlmYWN0cy5vcmcvcHJvZHVjdC8zNzYwMDk5NTk0MzQzL2NhZHVtLWdlbC1kb3VjZXVyLWNvcnBzLWV0LWNoZXZldXgtZnJhaXNlIgogICB9LAogICB7CiAgICAgICJhdHRyaWJ1dGVfZ3JvdXBzIjpbCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2FuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2FuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2FuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2V0YXJpYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9wYWxtLW9pbC1jb250ZW50LXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoicGFsbV9vaWxfZnJlZSIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiUGFsbSBvaWwgZnJlZSIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnBhbG0tb2lsLWNvbnRlbnQtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiUGFsbSBvaWwgY29udGVudCB1bmtub3duIgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzIiwKICAgICAgICAgICAgIm5hbWUiOiJJbmdyZWRpZW50cyIKICAgICAgICAgfSwKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6Ik9yZ2FuaWMgZmFybWluZyBhaW1zIHRvIHByb3RlY3QgdGhlIGVudmlyb25tZW50IGFuZCB0byBjb25zZXJ2ZSBiaW9kaXZlcnNpdHkgYnkgcHJvaGliaXRpbmcgb3IgbGltaXRpbmcgdGhlIHVzZSBvZiBzeW50aGV0aWMgZmVydGlsaXplcnMsIHBlc3RpY2lkZXMgYW5kIGZvb2QgYWRkaXRpdmVzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6IlByb21vdGVzIGVjb2xvZ2ljYWwgc3VzdGFpbmFiaWxpdHkgYW5kIGJpb2RpdmVyc2l0eS4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJhIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L29yZ2FuaWMuc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX29yZ2FuaWMiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjEwMCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJPcmdhbmljIGZhcm1pbmciLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJPcmdhbmljIHByb2R1Y3QiCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiV2hlbiB5b3UgYnV5IGZhaXIgdHJhZGUgcHJvZHVjdHMsIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcyBhcmUgcGFpZCBhbiBoaWdoZXIgYW5kIGZhaXJlciBwcmljZSwgd2hpY2ggaGVscHMgdGhlbSBpbXByb3ZlIGFuZCBzdXN0YWluIGhpZ2hlciBzb2NpYWwgYW5kIG9mdGVuIGVudmlyb25tZW50YWwgc3RhbmRhcmRzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6IkZhaXIgdHJhZGUgcHJvZHVjdHMgaGVscCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiZSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9ub3QtZmFpci10cmFkZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfZmFpcl90cmFkZSIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJGYWlyIHRyYWRlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTm90IGEgZmFpciB0cmFkZSBwcm9kdWN0IgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImxhYmVscyIsCiAgICAgICAgICAgICJuYW1lIjoiTGFiZWxzIgogICAgICAgICB9CiAgICAgIF0sCiAgICAgICJjb2RlIjoiMzc2MDA5OTU5MTk4NCIsCiAgICAgICJpbWFnZV9mcm9udF9zbWFsbF91cmwiOiJodHRwczovL2ltYWdlcy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9wcm9kdWN0cy8zNzYvMDA5Lzk1OS8xOTg0L2Zyb250X2ZyLjIxLjIwMC5qcGciLAogICAgICAicHJvZHVjdF9kaXNwbGF5X25hbWUiOiJHZWwgZG91Y2hlIHNhbnMgc2F2b24sIEh1aWxlIGQnYW1hbmRlcyBkb3VjZXMgYmlvIOKAkyBDYWR1bSDigJMgNzUwwqBtbCIsCiAgICAgICJ1cmwiOiJodHRwczovL3dvcmxkLm9wZW5iZWF1dHlmYWN0cy5vcmcvcHJvZHVjdC8zNzYwMDk5NTkxOTg0L2dlbC1kb3VjaGUtc2Fucy1zYXZvbi1odWlsZS1kLWFtYW5kZXMtZG91Y2VzLWJpby1jYWR1bSIKICAgfSwKICAgewogICAgICAiYXR0cmlidXRlX2dyb3VwcyI6WwogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdldGFyaWFuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdldGFyaWFuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdldGFyaWFuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImEiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvcGFsbS1vaWwtZnJlZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJwYWxtX29pbF9mcmVlIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjoxMDAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiUGFsbSBvaWwgZnJlZSIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnBhbG0tb2lsLWZyZWUiLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJQYWxtIG9pbCBmcmVlIgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzIiwKICAgICAgICAgICAgIm5hbWUiOiJJbmdyZWRpZW50cyIKICAgICAgICAgfSwKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6Ik9yZ2FuaWMgZmFybWluZyBhaW1zIHRvIHByb3RlY3QgdGhlIGVudmlyb25tZW50IGFuZCB0byBjb25zZXJ2ZSBiaW9kaXZlcnNpdHkgYnkgcHJvaGliaXRpbmcgb3IgbGltaXRpbmcgdGhlIHVzZSBvZiBzeW50aGV0aWMgZmVydGlsaXplcnMsIHBlc3RpY2lkZXMgYW5kIGZvb2QgYWRkaXRpdmVzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6Ik9yZ2FuaWMgcHJvZHVjdHMgcHJvbW90ZSBlY29sb2dpY2FsIHN1c3RhaW5hYmlsaXR5IGFuZCBiaW9kaXZlcnNpdHkuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiZSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9ub3Qtb3JnYW5pYy5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfb3JnYW5pYyIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJPcmdhbmljIGZhcm1pbmciLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJOb3QgYW4gb3JnYW5pYyBwcm9kdWN0IgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IldoZW4geW91IGJ1eSBmYWlyIHRyYWRlIHByb2R1Y3RzLCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMgYXJlIHBhaWQgYW4gaGlnaGVyIGFuZCBmYWlyZXIgcHJpY2UsIHdoaWNoIGhlbHBzIHRoZW0gaW1wcm92ZSBhbmQgc3VzdGFpbiBoaWdoZXIgc29jaWFsIGFuZCBvZnRlbiBlbnZpcm9ubWVudGFsIHN0YW5kYXJkcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJGYWlyIHRyYWRlIHByb2R1Y3RzIGhlbHAgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzLiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImUiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3Qvbm90LWZhaXItdHJhZGUuc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX2ZhaXJfdHJhZGUiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiRmFpciB0cmFkZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik5vdCBhIGZhaXIgdHJhZGUgcHJvZHVjdCIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJsYWJlbHMiLAogICAgICAgICAgICAibmFtZSI6IkxhYmVscyIKICAgICAgICAgfQogICAgICBdLAogICAgICAiY29kZSI6IjM2MDA1NTA5NDk5NDAiLAogICAgICAiaW1hZ2VfZnJvbnRfc21hbGxfdXJsIjoiaHR0cHM6Ly9pbWFnZXMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvcHJvZHVjdHMvMzYwLzA1NS8wOTQvOTk0MC9mcm9udF9lbi4yNy4yMDAuanBnIiwKICAgICAgInByb2R1Y3RfZGlzcGxheV9uYW1lIjoiRMOpb2RvcmFudCBtaWNyby10YWxjIOKAkyBDYWR1bSDigJMgNTDCoG1sIiwKICAgICAgInVybCI6Imh0dHBzOi8vd29ybGQub3BlbmJlYXV0eWZhY3RzLm9yZy9wcm9kdWN0LzM2MDA1NTA5NDk5NDAvZGVvZG9yYW50LW1pY3JvLXRhbGMtY2FkdW0iCiAgIH0sCiAgIHsKICAgICAgImF0dHJpYnV0ZV9ncm91cHMiOlsKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvdmVnYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2FuIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46dmVnYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2FuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvdmVnZXRhcmlhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdldGFyaWFuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdldGFyaWFuIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46dmVnZXRhcmlhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnZXRhcmlhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3BhbG0tb2lsLWNvbnRlbnQtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJwYWxtX29pbF9mcmVlIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJQYWxtIG9pbCBmcmVlIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46cGFsbS1vaWwtY29udGVudC11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJQYWxtIG9pbCBjb250ZW50IHVua25vd24iCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXMiLAogICAgICAgICAgICAibmFtZSI6IkluZ3JlZGllbnRzIgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiT3JnYW5pYyBmYXJtaW5nIGFpbXMgdG8gcHJvdGVjdCB0aGUgZW52aXJvbm1lbnQgYW5kIHRvIGNvbnNlcnZlIGJpb2RpdmVyc2l0eSBieSBwcm9oaWJpdGluZyBvciBsaW1pdGluZyB0aGUgdXNlIG9mIHN5bnRoZXRpYyBmZXJ0aWxpemVycywgcGVzdGljaWRlcyBhbmQgZm9vZCBhZGRpdGl2ZXMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiT3JnYW5pYyBwcm9kdWN0cyBwcm9tb3RlIGVjb2xvZ2ljYWwgc3VzdGFpbmFiaWxpdHkgYW5kIGJpb2RpdmVyc2l0eS4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJlIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L25vdC1vcmdhbmljLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19vcmdhbmljIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjowLAogICAgICAgICAgICAgICAgICAibmFtZSI6Ik9yZ2FuaWMgZmFybWluZyIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik5vdCBhbiBvcmdhbmljIHByb2R1Y3QiCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiV2hlbiB5b3UgYnV5IGZhaXIgdHJhZGUgcHJvZHVjdHMsIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcyBhcmUgcGFpZCBhbiBoaWdoZXIgYW5kIGZhaXJlciBwcmljZSwgd2hpY2ggaGVscHMgdGhlbSBpbXByb3ZlIGFuZCBzdXN0YWluIGhpZ2hlciBzb2NpYWwgYW5kIG9mdGVuIGVudmlyb25tZW50YWwgc3RhbmRhcmRzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6IkZhaXIgdHJhZGUgcHJvZHVjdHMgaGVscCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiZSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9ub3QtZmFpci10cmFkZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfZmFpcl90cmFkZSIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJGYWlyIHRyYWRlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTm90IGEgZmFpciB0cmFkZSBwcm9kdWN0IgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImxhYmVscyIsCiAgICAgICAgICAgICJuYW1lIjoiTGFiZWxzIgogICAgICAgICB9CiAgICAgIF0sCiAgICAgICJjb2RlIjoiMzc2MDA5OTU5MjQyNCIsCiAgICAgICJpbWFnZV9mcm9udF9zbWFsbF91cmwiOiJodHRwczovL2ltYWdlcy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9wcm9kdWN0cy8zNzYvMDA5Lzk1OS8yNDI0L2Zyb250X2ZyLjE0LjIwMC5qcGciLAogICAgICAicHJvZHVjdF9kaXNwbGF5X25hbWUiOiJDcsOobWUgZG91Y2hlIERvdWNldXIgVmVsb3VycyBGbGV1ciBkJ09yYW5nZSDigJMgQ2FkdW0g4oCTIDQwMMKgbWwiLAogICAgICAidXJsIjoiaHR0cHM6Ly93b3JsZC5vcGVuYmVhdXR5ZmFjdHMub3JnL3Byb2R1Y3QvMzc2MDA5OTU5MjQyNC9jcmVtZS1kb3VjaGUtZG91Y2V1ci12ZWxvdXJzLWZsZXVyLWQtb3JhbmdlLWNhZHVtIgogICB9LAogICB7CiAgICAgICJhdHRyaWJ1dGVfZ3JvdXBzIjpbCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJhIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2FuLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2FuIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjoxMDAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdhbiIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2FuIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImEiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvdmVnZXRhcmlhbi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdldGFyaWFuIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjoxMDAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdldGFyaWFuIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvcGFsbS1vaWwtY29udGVudC11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InBhbG1fb2lsX2ZyZWUiLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlBhbG0gb2lsIGZyZWUiLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjpwYWxtLW9pbC1jb250ZW50LXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlBhbG0gb2lsIGNvbnRlbnQgdW5rbm93biIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJpbmdyZWRpZW50c19hbmFseXNpcyIsCiAgICAgICAgICAgICJuYW1lIjoiSW5ncmVkaWVudHMiCiAgICAgICAgIH0sCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiJPcmdhbmljIGZhcm1pbmcgYWltcyB0byBwcm90ZWN0IHRoZSBlbnZpcm9ubWVudCBhbmQgdG8gY29uc2VydmUgYmlvZGl2ZXJzaXR5IGJ5IHByb2hpYml0aW5nIG9yIGxpbWl0aW5nIHRoZSB1c2Ugb2Ygc3ludGhldGljIGZlcnRpbGl6ZXJzLCBwZXN0aWNpZGVzIGFuZCBmb29kIGFkZGl0aXZlcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJPcmdhbmljIHByb2R1Y3RzIHByb21vdGUgZWNvbG9naWNhbCBzdXN0YWluYWJpbGl0eSBhbmQgYmlvZGl2ZXJzaXR5LiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImUiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3Qvbm90LW9yZ2FuaWMuc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX29yZ2FuaWMiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiT3JnYW5pYyBmYXJtaW5nIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTm90IGFuIG9yZ2FuaWMgcHJvZHVjdCIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiJXaGVuIHlvdSBidXkgZmFpciB0cmFkZSBwcm9kdWN0cywgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzIGFyZSBwYWlkIGFuIGhpZ2hlciBhbmQgZmFpcmVyIHByaWNlLCB3aGljaCBoZWxwcyB0aGVtIGltcHJvdmUgYW5kIHN1c3RhaW4gaGlnaGVyIHNvY2lhbCBhbmQgb2Z0ZW4gZW52aXJvbm1lbnRhbCBzdGFuZGFyZHMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiRmFpciB0cmFkZSBwcm9kdWN0cyBoZWxwIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcy4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJlIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L25vdC1mYWlyLXRyYWRlLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19mYWlyX3RyYWRlIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjowLAogICAgICAgICAgICAgICAgICAibmFtZSI6IkZhaXIgdHJhZGUiLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJOb3QgYSBmYWlyIHRyYWRlIHByb2R1Y3QiCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoibGFiZWxzIiwKICAgICAgICAgICAgIm5hbWUiOiJMYWJlbHMiCiAgICAgICAgIH0KICAgICAgXSwKICAgICAgImNvZGUiOiI0MDU2NDg5NjQzNjE2IiwKICAgICAgImltYWdlX2Zyb250X3NtYWxsX3VybCI6Imh0dHBzOi8vaW1hZ2VzLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL3Byb2R1Y3RzLzQwNS82NDgvOTY0LzM2MTYvZnJvbnRfZnIuMTQuMjAwLmpwZyIsCiAgICAgICJwcm9kdWN0X2Rpc3BsYXlfbmFtZSI6IkTDqW9kb3JhbnQgQVFVQSA0OGggZCdlZmZpY2FjaXTDqSDigJMgQ2llbiBNRU4g4oCTIDUwwqBtbCIsCiAgICAgICJ1cmwiOiJodHRwczovL3dvcmxkLm9wZW5iZWF1dHlmYWN0cy5vcmcvcHJvZHVjdC80MDU2NDg5NjQzNjE2L2Rlb2RvcmFudC1hcXVhLTQ4aC1kLWVmZmljYWNpdGUtY2llbi1tZW4iCiAgIH0sCiAgIHsKICAgICAgImF0dHJpYnV0ZV9ncm91cHMiOlsKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvdmVnYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2FuIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46dmVnYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2FuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvdmVnZXRhcmlhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdldGFyaWFuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdldGFyaWFuIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46dmVnZXRhcmlhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnZXRhcmlhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3BhbG0tb2lsLWNvbnRlbnQtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJwYWxtX29pbF9mcmVlIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJQYWxtIG9pbCBmcmVlIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46cGFsbS1vaWwtY29udGVudC11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJQYWxtIG9pbCBjb250ZW50IHVua25vd24iCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXMiLAogICAgICAgICAgICAibmFtZSI6IkluZ3JlZGllbnRzIgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiT3JnYW5pYyBmYXJtaW5nIGFpbXMgdG8gcHJvdGVjdCB0aGUgZW52aXJvbm1lbnQgYW5kIHRvIGNvbnNlcnZlIGJpb2RpdmVyc2l0eSBieSBwcm9oaWJpdGluZyBvciBsaW1pdGluZyB0aGUgdXNlIG9mIHN5bnRoZXRpYyBmZXJ0aWxpemVycywgcGVzdGljaWRlcyBhbmQgZm9vZCBhZGRpdGl2ZXMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiT3JnYW5pYyBwcm9kdWN0cyBwcm9tb3RlIGVjb2xvZ2ljYWwgc3VzdGFpbmFiaWxpdHkgYW5kIGJpb2RpdmVyc2l0eS4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L29yZ2FuaWMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfb3JnYW5pYyIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiT3JnYW5pYyBmYXJtaW5nIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJNaXNzaW5nIGluZm9ybWF0aW9uOiBvcmdhbmljIHByb2R1Y3Q/IgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IldoZW4geW91IGJ1eSBmYWlyIHRyYWRlIHByb2R1Y3RzLCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMgYXJlIHBhaWQgYW4gaGlnaGVyIGFuZCBmYWlyZXIgcHJpY2UsIHdoaWNoIGhlbHBzIHRoZW0gaW1wcm92ZSBhbmQgc3VzdGFpbiBoaWdoZXIgc29jaWFsIGFuZCBvZnRlbiBlbnZpcm9ubWVudGFsIHN0YW5kYXJkcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJGYWlyIHRyYWRlIHByb2R1Y3RzIGhlbHAgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzLiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvZmFpci10cmFkZS11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19mYWlyX3RyYWRlIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJGYWlyIHRyYWRlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJNaXNzaW5nIGluZm9ybWF0aW9uOiBmYWlyIHRyYWRlIHByb2R1Y3Q/IgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImxhYmVscyIsCiAgICAgICAgICAgICJuYW1lIjoiTGFiZWxzIgogICAgICAgICB9CiAgICAgIF0sCiAgICAgICJjb2RlIjoiMzU3NDY2MTM0OTc5NCIsCiAgICAgICJpbWFnZV9mcm9udF9zbWFsbF91cmwiOiJodHRwczovL2ltYWdlcy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9wcm9kdWN0cy8zNTcvNDY2LzEzNC85Nzk0L2Zyb250X2VuLjE2LjIwMC5qcGciLAogICAgICAicHJvZHVjdF9kaXNwbGF5X25hbWUiOiJGbGV1ciBkJ09yYW5nZXIg4oCTIExlIHBldGl0IE1hcnNlaWxsYWlzIOKAkyAyNTDCoG1sIiwKICAgICAgInVybCI6Imh0dHBzOi8vd29ybGQub3BlbmJlYXV0eWZhY3RzLm9yZy9wcm9kdWN0LzM1NzQ2NjEzNDk3OTQvZmxldXItZC1vcmFuZ2VyLWxlLXBldGl0LW1hcnNlaWxsYWlzIgogICB9LAogICB7CiAgICAgICJhdHRyaWJ1dGVfZ3JvdXBzIjpbCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2FuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2FuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2FuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2V0YXJpYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiYSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9wYWxtLW9pbC1mcmVlLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InBhbG1fb2lsX2ZyZWUiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjEwMCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJQYWxtIG9pbCBmcmVlIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46cGFsbS1vaWwtZnJlZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlBhbG0gb2lsIGZyZWUiCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXMiLAogICAgICAgICAgICAibmFtZSI6IkluZ3JlZGllbnRzIgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiT3JnYW5pYyBmYXJtaW5nIGFpbXMgdG8gcHJvdGVjdCB0aGUgZW52aXJvbm1lbnQgYW5kIHRvIGNvbnNlcnZlIGJpb2RpdmVyc2l0eSBieSBwcm9oaWJpdGluZyBvciBsaW1pdGluZyB0aGUgdXNlIG9mIHN5bnRoZXRpYyBmZXJ0aWxpemVycywgcGVzdGljaWRlcyBhbmQgZm9vZCBhZGRpdGl2ZXMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiT3JnYW5pYyBwcm9kdWN0cyBwcm9tb3RlIGVjb2xvZ2ljYWwgc3VzdGFpbmFiaWxpdHkgYW5kIGJpb2RpdmVyc2l0eS4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L29yZ2FuaWMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfb3JnYW5pYyIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiT3JnYW5pYyBmYXJtaW5nIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJNaXNzaW5nIGluZm9ybWF0aW9uOiBvcmdhbmljIHByb2R1Y3Q/IgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IldoZW4geW91IGJ1eSBmYWlyIHRyYWRlIHByb2R1Y3RzLCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMgYXJlIHBhaWQgYW4gaGlnaGVyIGFuZCBmYWlyZXIgcHJpY2UsIHdoaWNoIGhlbHBzIHRoZW0gaW1wcm92ZSBhbmQgc3VzdGFpbiBoaWdoZXIgc29jaWFsIGFuZCBvZnRlbiBlbnZpcm9ubWVudGFsIHN0YW5kYXJkcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJGYWlyIHRyYWRlIHByb2R1Y3RzIGhlbHAgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzLiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvZmFpci10cmFkZS11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19mYWlyX3RyYWRlIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJGYWlyIHRyYWRlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJNaXNzaW5nIGluZm9ybWF0aW9uOiBmYWlyIHRyYWRlIHByb2R1Y3Q/IgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImxhYmVscyIsCiAgICAgICAgICAgICJuYW1lIjoiTGFiZWxzIgogICAgICAgICB9CiAgICAgIF0sCiAgICAgICJjb2RlIjoiMzYwMDU0MDk4OTMzOCIsCiAgICAgICJpbWFnZV9mcm9udF9zbWFsbF91cmwiOiJodHRwczovL2ltYWdlcy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9wcm9kdWN0cy8zNjAvMDU0LzA5OC85MzM4L2Zyb250X2ZyLjYuMjAwLmpwZyIsCiAgICAgICJwcm9kdWN0X2Rpc3BsYXlfbmFtZSI6IkV4cGVydCBQcm90ZWN0aW9uIDIzMMKwQyBTb2luIFByb2Zlc3Npb25uZWwgUHJvdGVjdGV1ciBkZSBDaGFsZXVyIOKAkyBGcmFuY2sgUHJvdm9zdCDigJMgMzAwwqBtbCIsCiAgICAgICJ1cmwiOiJodHRwczovL3dvcmxkLm9wZW5iZWF1dHlmYWN0cy5vcmcvcHJvZHVjdC8zNjAwNTQwOTg5MzM4L2V4cGVydC1wcm90ZWN0aW9uLTIzMC1jLXNvaW4tcHJvZmVzc2lvbm5lbC1wcm90ZWN0ZXVyLWRlLWNoYWxldXItZnJhbmNrLXByb3Zvc3QiCiAgIH0sCiAgIHsKICAgICAgImF0dHJpYnV0ZV9ncm91cHMiOlsKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvdmVnYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2FuIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46dmVnYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2FuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvdmVnZXRhcmlhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdldGFyaWFuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdldGFyaWFuIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46dmVnZXRhcmlhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnZXRhcmlhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3BhbG0tb2lsLWNvbnRlbnQtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJwYWxtX29pbF9mcmVlIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJQYWxtIG9pbCBmcmVlIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46cGFsbS1vaWwtY29udGVudC11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJQYWxtIG9pbCBjb250ZW50IHVua25vd24iCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXMiLAogICAgICAgICAgICAibmFtZSI6IkluZ3JlZGllbnRzIgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiT3JnYW5pYyBmYXJtaW5nIGFpbXMgdG8gcHJvdGVjdCB0aGUgZW52aXJvbm1lbnQgYW5kIHRvIGNvbnNlcnZlIGJpb2RpdmVyc2l0eSBieSBwcm9oaWJpdGluZyBvciBsaW1pdGluZyB0aGUgdXNlIG9mIHN5bnRoZXRpYyBmZXJ0aWxpemVycywgcGVzdGljaWRlcyBhbmQgZm9vZCBhZGRpdGl2ZXMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiT3JnYW5pYyBwcm9kdWN0cyBwcm9tb3RlIGVjb2xvZ2ljYWwgc3VzdGFpbmFiaWxpdHkgYW5kIGJpb2RpdmVyc2l0eS4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJlIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L25vdC1vcmdhbmljLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19vcmdhbmljIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjowLAogICAgICAgICAgICAgICAgICAibmFtZSI6Ik9yZ2FuaWMgZmFybWluZyIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik5vdCBhbiBvcmdhbmljIHByb2R1Y3QiCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiV2hlbiB5b3UgYnV5IGZhaXIgdHJhZGUgcHJvZHVjdHMsIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcyBhcmUgcGFpZCBhbiBoaWdoZXIgYW5kIGZhaXJlciBwcmljZSwgd2hpY2ggaGVscHMgdGhlbSBpbXByb3ZlIGFuZCBzdXN0YWluIGhpZ2hlciBzb2NpYWwgYW5kIG9mdGVuIGVudmlyb25tZW50YWwgc3RhbmRhcmRzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6IkZhaXIgdHJhZGUgcHJvZHVjdHMgaGVscCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiZSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9ub3QtZmFpci10cmFkZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfZmFpcl90cmFkZSIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJGYWlyIHRyYWRlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTm90IGEgZmFpciB0cmFkZSBwcm9kdWN0IgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImxhYmVscyIsCiAgICAgICAgICAgICJuYW1lIjoiTGFiZWxzIgogICAgICAgICB9CiAgICAgIF0sCiAgICAgICJjb2RlIjoiMzYwMDU0MjUxMzMwMiIsCiAgICAgICJpbWFnZV9mcm9udF9zbWFsbF91cmwiOiJodHRwczovL2ltYWdlcy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9wcm9kdWN0cy8zNjAvMDU0LzI1MS8zMzAyL2Zyb250X2ZyLjYuMjAwLmpwZyIsCiAgICAgICJwcm9kdWN0X2Rpc3BsYXlfbmFtZSI6IkFtYnJlIHNvbGFpcmUgbGFpdCBmbHVpZGUgaHlkcmF0YW50IHRyw6hzIGhhdXRlIHByb3RlY3Rpb24g4oCTIEdhcm5pZXIg4oCTIDE3NcKgbWwiLAogICAgICAidXJsIjoiaHR0cHM6Ly93b3JsZC5vcGVuYmVhdXR5ZmFjdHMub3JnL3Byb2R1Y3QvMzYwMDU0MjUxMzMwMi9hbWJyZS1zb2xhaXJlLWxhaXQtZmx1aWRlLWh5ZHJhdGFudC10cmVzLWhhdXRlLXByb3RlY3Rpb24tZ2FybmllciIKICAgfSwKICAgewogICAgICAiYXR0cmlidXRlX2dyb3VwcyI6WwogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdldGFyaWFuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdldGFyaWFuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdldGFyaWFuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImEiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvcGFsbS1vaWwtZnJlZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJwYWxtX29pbF9mcmVlIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjoxMDAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiUGFsbSBvaWwgZnJlZSIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnBhbG0tb2lsLWZyZWUiLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJQYWxtIG9pbCBmcmVlIgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzIiwKICAgICAgICAgICAgIm5hbWUiOiJJbmdyZWRpZW50cyIKICAgICAgICAgfSwKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6Ik9yZ2FuaWMgZmFybWluZyBhaW1zIHRvIHByb3RlY3QgdGhlIGVudmlyb25tZW50IGFuZCB0byBjb25zZXJ2ZSBiaW9kaXZlcnNpdHkgYnkgcHJvaGliaXRpbmcgb3IgbGltaXRpbmcgdGhlIHVzZSBvZiBzeW50aGV0aWMgZmVydGlsaXplcnMsIHBlc3RpY2lkZXMgYW5kIGZvb2QgYWRkaXRpdmVzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6Ik9yZ2FuaWMgcHJvZHVjdHMgcHJvbW90ZSBlY29sb2dpY2FsIHN1c3RhaW5hYmlsaXR5IGFuZCBiaW9kaXZlcnNpdHkuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9vcmdhbmljLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX29yZ2FuaWMiLAogICAgICAgICAgICAgICAgICAibmFtZSI6Ik9yZ2FuaWMgZmFybWluZyIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTWlzc2luZyBpbmZvcm1hdGlvbjogb3JnYW5pYyBwcm9kdWN0PyIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiJXaGVuIHlvdSBidXkgZmFpciB0cmFkZSBwcm9kdWN0cywgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzIGFyZSBwYWlkIGFuIGhpZ2hlciBhbmQgZmFpcmVyIHByaWNlLCB3aGljaCBoZWxwcyB0aGVtIGltcHJvdmUgYW5kIHN1c3RhaW4gaGlnaGVyIHNvY2lhbCBhbmQgb2Z0ZW4gZW52aXJvbm1lbnRhbCBzdGFuZGFyZHMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiRmFpciB0cmFkZSBwcm9kdWN0cyBoZWxwIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcy4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L2ZhaXItdHJhZGUtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfZmFpcl90cmFkZSIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiRmFpciB0cmFkZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTWlzc2luZyBpbmZvcm1hdGlvbjogZmFpciB0cmFkZSBwcm9kdWN0PyIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJsYWJlbHMiLAogICAgICAgICAgICAibmFtZSI6IkxhYmVscyIKICAgICAgICAgfQogICAgICBdLAogICAgICAiY29kZSI6IjQwMDU5MDAxMDUyMDIiLAogICAgICAiaW1hZ2VfZnJvbnRfc21hbGxfdXJsIjoiaHR0cHM6Ly9pbWFnZXMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvcHJvZHVjdHMvNDAwLzU5MC8wMTAvNTIwMi9mcm9udF9mci4yMC4yMDAuanBnIiwKICAgICAgInByb2R1Y3RfZGlzcGxheV9uYW1lIjoiQ3LDqG1lIFZpc2FnZSBDb3JwcyBNYWlucyDigJMgTml2ZWEg4oCTIDE1MMKgbWwiLAogICAgICAidXJsIjoiaHR0cHM6Ly93b3JsZC5vcGVuYmVhdXR5ZmFjdHMub3JnL3Byb2R1Y3QvNDAwNTkwMDEwNTIwMi9jcmVtZS12aXNhZ2UtY29ycHMtbWFpbnMtbml2ZWEiCiAgIH0sCiAgIHsKICAgICAgImF0dHJpYnV0ZV9ncm91cHMiOlsKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvdmVnYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2FuIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46dmVnYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2FuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImEiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvdmVnZXRhcmlhbi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdldGFyaWFuIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjoxMDAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdldGFyaWFuIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImEiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvcGFsbS1vaWwtZnJlZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJwYWxtX29pbF9mcmVlIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjoxMDAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiUGFsbSBvaWwgZnJlZSIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnBhbG0tb2lsLWZyZWUiLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJQYWxtIG9pbCBmcmVlIgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzIiwKICAgICAgICAgICAgIm5hbWUiOiJJbmdyZWRpZW50cyIKICAgICAgICAgfSwKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6Ik9yZ2FuaWMgZmFybWluZyBhaW1zIHRvIHByb3RlY3QgdGhlIGVudmlyb25tZW50IGFuZCB0byBjb25zZXJ2ZSBiaW9kaXZlcnNpdHkgYnkgcHJvaGliaXRpbmcgb3IgbGltaXRpbmcgdGhlIHVzZSBvZiBzeW50aGV0aWMgZmVydGlsaXplcnMsIHBlc3RpY2lkZXMgYW5kIGZvb2QgYWRkaXRpdmVzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6Ik9yZ2FuaWMgcHJvZHVjdHMgcHJvbW90ZSBlY29sb2dpY2FsIHN1c3RhaW5hYmlsaXR5IGFuZCBiaW9kaXZlcnNpdHkuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiZSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9ub3Qtb3JnYW5pYy5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfb3JnYW5pYyIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJPcmdhbmljIGZhcm1pbmciLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJOb3QgYW4gb3JnYW5pYyBwcm9kdWN0IgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IldoZW4geW91IGJ1eSBmYWlyIHRyYWRlIHByb2R1Y3RzLCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMgYXJlIHBhaWQgYW4gaGlnaGVyIGFuZCBmYWlyZXIgcHJpY2UsIHdoaWNoIGhlbHBzIHRoZW0gaW1wcm92ZSBhbmQgc3VzdGFpbiBoaWdoZXIgc29jaWFsIGFuZCBvZnRlbiBlbnZpcm9ubWVudGFsIHN0YW5kYXJkcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJGYWlyIHRyYWRlIHByb2R1Y3RzIGhlbHAgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzLiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImUiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3Qvbm90LWZhaXItdHJhZGUuc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX2ZhaXJfdHJhZGUiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiRmFpciB0cmFkZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik5vdCBhIGZhaXIgdHJhZGUgcHJvZHVjdCIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJsYWJlbHMiLAogICAgICAgICAgICAibmFtZSI6IkxhYmVscyIKICAgICAgICAgfQogICAgICBdLAogICAgICAiY29kZSI6IjQwMDU4MDgyMjE4NTEiLAogICAgICAiaW1hZ2VfZnJvbnRfc21hbGxfdXJsIjoiaHR0cHM6Ly9pbWFnZXMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvcHJvZHVjdHMvNDAwLzU4MC84MjIvMTg1MS9mcm9udF9lbi4yMi4yMDAuanBnIiwKICAgICAgInByb2R1Y3RfZGlzcGxheV9uYW1lIjoiQmF1bWUgYXByw6hzLXJhc2FnZSBwZWF1IHNlbnNpYmxlIOKAkyBOaXZlYSDigJMgMTAwwqBtbCIsCiAgICAgICJ1cmwiOiJodHRwczovL3dvcmxkLm9wZW5iZWF1dHlmYWN0cy5vcmcvcHJvZHVjdC80MDA1ODA4MjIxODUxL2JhdW1lLWFwcmVzLXJhc2FnZS1wZWF1LXNlbnNpYmxlLW5pdmVhIgogICB9LAogICB7CiAgICAgICJhdHRyaWJ1dGVfZ3JvdXBzIjpbCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2FuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2FuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2FuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2V0YXJpYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiYSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9wYWxtLW9pbC1mcmVlLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InBhbG1fb2lsX2ZyZWUiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjEwMCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJQYWxtIG9pbCBmcmVlIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46cGFsbS1vaWwtZnJlZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlBhbG0gb2lsIGZyZWUiCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXMiLAogICAgICAgICAgICAibmFtZSI6IkluZ3JlZGllbnRzIgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiT3JnYW5pYyBmYXJtaW5nIGFpbXMgdG8gcHJvdGVjdCB0aGUgZW52aXJvbm1lbnQgYW5kIHRvIGNvbnNlcnZlIGJpb2RpdmVyc2l0eSBieSBwcm9oaWJpdGluZyBvciBsaW1pdGluZyB0aGUgdXNlIG9mIHN5bnRoZXRpYyBmZXJ0aWxpemVycywgcGVzdGljaWRlcyBhbmQgZm9vZCBhZGRpdGl2ZXMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiT3JnYW5pYyBwcm9kdWN0cyBwcm9tb3RlIGVjb2xvZ2ljYWwgc3VzdGFpbmFiaWxpdHkgYW5kIGJpb2RpdmVyc2l0eS4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJlIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L25vdC1vcmdhbmljLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19vcmdhbmljIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjowLAogICAgICAgICAgICAgICAgICAibmFtZSI6Ik9yZ2FuaWMgZmFybWluZyIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik5vdCBhbiBvcmdhbmljIHByb2R1Y3QiCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiV2hlbiB5b3UgYnV5IGZhaXIgdHJhZGUgcHJvZHVjdHMsIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcyBhcmUgcGFpZCBhbiBoaWdoZXIgYW5kIGZhaXJlciBwcmljZSwgd2hpY2ggaGVscHMgdGhlbSBpbXByb3ZlIGFuZCBzdXN0YWluIGhpZ2hlciBzb2NpYWwgYW5kIG9mdGVuIGVudmlyb25tZW50YWwgc3RhbmRhcmRzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6IkZhaXIgdHJhZGUgcHJvZHVjdHMgaGVscCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiZSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9ub3QtZmFpci10cmFkZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfZmFpcl90cmFkZSIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJGYWlyIHRyYWRlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTm90IGEgZmFpciB0cmFkZSBwcm9kdWN0IgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImxhYmVscyIsCiAgICAgICAgICAgICJuYW1lIjoiTGFiZWxzIgogICAgICAgICB9CiAgICAgIF0sCiAgICAgICJjb2RlIjoiODcxNzY0NDA5MTc3NyIsCiAgICAgICJpbWFnZV9mcm9udF9zbWFsbF91cmwiOiJodHRwczovL2ltYWdlcy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9wcm9kdWN0cy84NzEvNzY0LzQwOS8xNzc3L2Zyb250X2VuLjc3LjIwMC5qcGciLAogICAgICAicHJvZHVjdF9kaXNwbGF5X25hbWUiOiJTaWduYWwgRGVudGlmcmljZSBFbmZhbnRzIDcrIEFucyBNZW50aGUgUG9rw6ltb24gNzVtbCDigJMgNzXCoG1sIiwKICAgICAgInVybCI6Imh0dHBzOi8vd29ybGQub3BlbmJlYXV0eWZhY3RzLm9yZy9wcm9kdWN0Lzg3MTc2NDQwOTE3Nzcvc2lnbmFsLWRlbnRpZnJpY2UtZW5mYW50cy03LWFucy1tZW50aGUtcG9rZW1vbi03NW1sIgogICB9LAogICB7CiAgICAgICJhdHRyaWJ1dGVfZ3JvdXBzIjpbCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2FuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2FuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2FuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2V0YXJpYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiYSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9wYWxtLW9pbC1mcmVlLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InBhbG1fb2lsX2ZyZWUiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjEwMCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJQYWxtIG9pbCBmcmVlIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46cGFsbS1vaWwtZnJlZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlBhbG0gb2lsIGZyZWUiCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXMiLAogICAgICAgICAgICAibmFtZSI6IkluZ3JlZGllbnRzIgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiT3JnYW5pYyBmYXJtaW5nIGFpbXMgdG8gcHJvdGVjdCB0aGUgZW52aXJvbm1lbnQgYW5kIHRvIGNvbnNlcnZlIGJpb2RpdmVyc2l0eSBieSBwcm9oaWJpdGluZyBvciBsaW1pdGluZyB0aGUgdXNlIG9mIHN5bnRoZXRpYyBmZXJ0aWxpemVycywgcGVzdGljaWRlcyBhbmQgZm9vZCBhZGRpdGl2ZXMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiT3JnYW5pYyBwcm9kdWN0cyBwcm9tb3RlIGVjb2xvZ2ljYWwgc3VzdGFpbmFiaWxpdHkgYW5kIGJpb2RpdmVyc2l0eS4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJlIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L25vdC1vcmdhbmljLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19vcmdhbmljIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjowLAogICAgICAgICAgICAgICAgICAibmFtZSI6Ik9yZ2FuaWMgZmFybWluZyIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik5vdCBhbiBvcmdhbmljIHByb2R1Y3QiCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiV2hlbiB5b3UgYnV5IGZhaXIgdHJhZGUgcHJvZHVjdHMsIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcyBhcmUgcGFpZCBhbiBoaWdoZXIgYW5kIGZhaXJlciBwcmljZSwgd2hpY2ggaGVscHMgdGhlbSBpbXByb3ZlIGFuZCBzdXN0YWluIGhpZ2hlciBzb2NpYWwgYW5kIG9mdGVuIGVudmlyb25tZW50YWwgc3RhbmRhcmRzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6IkZhaXIgdHJhZGUgcHJvZHVjdHMgaGVscCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiZSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9ub3QtZmFpci10cmFkZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfZmFpcl90cmFkZSIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJGYWlyIHRyYWRlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTm90IGEgZmFpciB0cmFkZSBwcm9kdWN0IgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImxhYmVscyIsCiAgICAgICAgICAgICJuYW1lIjoiTGFiZWxzIgogICAgICAgICB9CiAgICAgIF0sCiAgICAgICJjb2RlIjoiMzY2MTQzNDAwMDk3MyIsCiAgICAgICJpbWFnZV9mcm9udF9zbWFsbF91cmwiOiJodHRwczovL2ltYWdlcy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9wcm9kdWN0cy8zNjYvMTQzLzQwMC8wOTczL2Zyb250X2VuLjQyLjIwMC5qcGciLAogICAgICAicHJvZHVjdF9kaXNwbGF5X25hbWUiOiJIeXPDqWFjIOKAkyBFQVUgVGhlcm1hbGUg4oCTIDE1MMKgbWwgKDXCoG96KSIsCiAgICAgICJ1cmwiOiJodHRwczovL3dvcmxkLm9wZW5iZWF1dHlmYWN0cy5vcmcvcHJvZHVjdC8zNjYxNDM0MDAwOTczL2h5c2VhYy1lYXUtdGhlcm1hbGUiCiAgIH0sCiAgIHsKICAgICAgImF0dHJpYnV0ZV9ncm91cHMiOlsKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvdmVnYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2FuIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46dmVnYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2FuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvdmVnZXRhcmlhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdldGFyaWFuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdldGFyaWFuIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46dmVnZXRhcmlhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnZXRhcmlhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJhIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3BhbG0tb2lsLWZyZWUuc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoicGFsbV9vaWxfZnJlZSIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MTAwLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlBhbG0gb2lsIGZyZWUiLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjpwYWxtLW9pbC1mcmVlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiUGFsbSBvaWwgZnJlZSIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJpbmdyZWRpZW50c19hbmFseXNpcyIsCiAgICAgICAgICAgICJuYW1lIjoiSW5ncmVkaWVudHMiCiAgICAgICAgIH0sCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiJPcmdhbmljIGZhcm1pbmcgYWltcyB0byBwcm90ZWN0IHRoZSBlbnZpcm9ubWVudCBhbmQgdG8gY29uc2VydmUgYmlvZGl2ZXJzaXR5IGJ5IHByb2hpYml0aW5nIG9yIGxpbWl0aW5nIHRoZSB1c2Ugb2Ygc3ludGhldGljIGZlcnRpbGl6ZXJzLCBwZXN0aWNpZGVzIGFuZCBmb29kIGFkZGl0aXZlcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJPcmdhbmljIHByb2R1Y3RzIHByb21vdGUgZWNvbG9naWNhbCBzdXN0YWluYWJpbGl0eSBhbmQgYmlvZGl2ZXJzaXR5LiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3Qvb3JnYW5pYy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19vcmdhbmljIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJPcmdhbmljIGZhcm1pbmciLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik1pc3NpbmcgaW5mb3JtYXRpb246IG9yZ2FuaWMgcHJvZHVjdD8iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiV2hlbiB5b3UgYnV5IGZhaXIgdHJhZGUgcHJvZHVjdHMsIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcyBhcmUgcGFpZCBhbiBoaWdoZXIgYW5kIGZhaXJlciBwcmljZSwgd2hpY2ggaGVscHMgdGhlbSBpbXByb3ZlIGFuZCBzdXN0YWluIGhpZ2hlciBzb2NpYWwgYW5kIG9mdGVuIGVudmlyb25tZW50YWwgc3RhbmRhcmRzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6IkZhaXIgdHJhZGUgcHJvZHVjdHMgaGVscCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9mYWlyLXRyYWRlLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX2ZhaXJfdHJhZGUiLAogICAgICAgICAgICAgICAgICAibmFtZSI6IkZhaXIgdHJhZGUiLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik1pc3NpbmcgaW5mb3JtYXRpb246IGZhaXIgdHJhZGUgcHJvZHVjdD8iCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoibGFiZWxzIiwKICAgICAgICAgICAgIm5hbWUiOiJMYWJlbHMiCiAgICAgICAgIH0KICAgICAgXSwKICAgICAgImNvZGUiOiI0MDA1OTAwMDM0OTkxIiwKICAgICAgImltYWdlX2Zyb250X3NtYWxsX3VybCI6Imh0dHBzOi8vaW1hZ2VzLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL3Byb2R1Y3RzLzQwMC81OTAvMDAzLzQ5OTEvZnJvbnRfZnIuMTIuMjAwLmpwZyIsCiAgICAgICJwcm9kdWN0X2Rpc3BsYXlfbmFtZSI6Ik5pdmVhIGFudGktdHJhbnNwaXJhbnQgSW52aXNpYmxlIGZvciBibGFjayAmIFdoaXRlIDQ4aCBPcmlnaW5hbCDigJMgNTBtbCIsCiAgICAgICJ1cmwiOiJodHRwczovL3dvcmxkLm9wZW5iZWF1dHlmYWN0cy5vcmcvcHJvZHVjdC80MDA1OTAwMDM0OTkxL25pdmVhLWFudGktdHJhbnNwaXJhbnQtaW52aXNpYmxlLWZvci1ibGFjay13aGl0ZS00OGgtb3JpZ2luYWwiCiAgIH0sCiAgIHsKICAgICAgImF0dHJpYnV0ZV9ncm91cHMiOlsKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvdmVnYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2FuIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46dmVnYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2FuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvdmVnZXRhcmlhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdldGFyaWFuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdldGFyaWFuIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46dmVnZXRhcmlhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnZXRhcmlhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJhIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3BhbG0tb2lsLWZyZWUuc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoicGFsbV9vaWxfZnJlZSIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MTAwLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlBhbG0gb2lsIGZyZWUiLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjpwYWxtLW9pbC1mcmVlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiUGFsbSBvaWwgZnJlZSIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJpbmdyZWRpZW50c19hbmFseXNpcyIsCiAgICAgICAgICAgICJuYW1lIjoiSW5ncmVkaWVudHMiCiAgICAgICAgIH0sCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiJPcmdhbmljIGZhcm1pbmcgYWltcyB0byBwcm90ZWN0IHRoZSBlbnZpcm9ubWVudCBhbmQgdG8gY29uc2VydmUgYmlvZGl2ZXJzaXR5IGJ5IHByb2hpYml0aW5nIG9yIGxpbWl0aW5nIHRoZSB1c2Ugb2Ygc3ludGhldGljIGZlcnRpbGl6ZXJzLCBwZXN0aWNpZGVzIGFuZCBmb29kIGFkZGl0aXZlcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJQcm9tb3RlcyBlY29sb2dpY2FsIHN1c3RhaW5hYmlsaXR5IGFuZCBiaW9kaXZlcnNpdHkuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiYSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9vcmdhbmljLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19vcmdhbmljIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjoxMDAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiT3JnYW5pYyBmYXJtaW5nIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiT3JnYW5pYyBwcm9kdWN0IgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IldoZW4geW91IGJ1eSBmYWlyIHRyYWRlIHByb2R1Y3RzLCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMgYXJlIHBhaWQgYW4gaGlnaGVyIGFuZCBmYWlyZXIgcHJpY2UsIHdoaWNoIGhlbHBzIHRoZW0gaW1wcm92ZSBhbmQgc3VzdGFpbiBoaWdoZXIgc29jaWFsIGFuZCBvZnRlbiBlbnZpcm9ubWVudGFsIHN0YW5kYXJkcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJGYWlyIHRyYWRlIHByb2R1Y3RzIGhlbHAgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzLiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImUiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3Qvbm90LWZhaXItdHJhZGUuc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX2ZhaXJfdHJhZGUiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiRmFpciB0cmFkZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik5vdCBhIGZhaXIgdHJhZGUgcHJvZHVjdCIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJsYWJlbHMiLAogICAgICAgICAgICAibmFtZSI6IkxhYmVscyIKICAgICAgICAgfQogICAgICBdLAogICAgICAiY29kZSI6IjM1NjQ3MDA1MjQxMzgiLAogICAgICAiaW1hZ2VfZnJvbnRfc21hbGxfdXJsIjoiaHR0cHM6Ly9pbWFnZXMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvcHJvZHVjdHMvMzU2LzQ3MC8wNTIvNDEzOC9mcm9udF9lbi4xMi4yMDAuanBnIiwKICAgICAgInByb2R1Y3RfZGlzcGxheV9uYW1lIjoiQ3LDqG1lIHZpc2FnZSDDoCBs4oCZYWxvZSB2ZXJhIGV0IGF1IGJldXJyZSBkZSBrYXJpdGUg4oCTIEJpbyBuYcOvYSDigJMgNTDCoG1sIiwKICAgICAgInVybCI6Imh0dHBzOi8vd29ybGQub3BlbmJlYXV0eWZhY3RzLm9yZy9wcm9kdWN0LzM1NjQ3MDA1MjQxMzgvY3JlbWUtdmlzYWdlLWEtbC1hbG9lLXZlcmEtZXQtYXUtYmV1cnJlLWRlLWthcml0ZS1iaW8tbmFpYSIKICAgfSwKICAgewogICAgICAiYXR0cmlidXRlX2dyb3VwcyI6WwogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiYSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdldGFyaWFuLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjEwMCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdldGFyaWFuIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46dmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2V0YXJpYW4iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiYSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9wYWxtLW9pbC1mcmVlLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InBhbG1fb2lsX2ZyZWUiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjEwMCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJQYWxtIG9pbCBmcmVlIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46cGFsbS1vaWwtZnJlZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlBhbG0gb2lsIGZyZWUiCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXMiLAogICAgICAgICAgICAibmFtZSI6IkluZ3JlZGllbnRzIgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiT3JnYW5pYyBmYXJtaW5nIGFpbXMgdG8gcHJvdGVjdCB0aGUgZW52aXJvbm1lbnQgYW5kIHRvIGNvbnNlcnZlIGJpb2RpdmVyc2l0eSBieSBwcm9oaWJpdGluZyBvciBsaW1pdGluZyB0aGUgdXNlIG9mIHN5bnRoZXRpYyBmZXJ0aWxpemVycywgcGVzdGljaWRlcyBhbmQgZm9vZCBhZGRpdGl2ZXMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiT3JnYW5pYyBwcm9kdWN0cyBwcm9tb3RlIGVjb2xvZ2ljYWwgc3VzdGFpbmFiaWxpdHkgYW5kIGJpb2RpdmVyc2l0eS4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJlIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L25vdC1vcmdhbmljLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19vcmdhbmljIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjowLAogICAgICAgICAgICAgICAgICAibmFtZSI6Ik9yZ2FuaWMgZmFybWluZyIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik5vdCBhbiBvcmdhbmljIHByb2R1Y3QiCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiV2hlbiB5b3UgYnV5IGZhaXIgdHJhZGUgcHJvZHVjdHMsIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcyBhcmUgcGFpZCBhbiBoaWdoZXIgYW5kIGZhaXJlciBwcmljZSwgd2hpY2ggaGVscHMgdGhlbSBpbXByb3ZlIGFuZCBzdXN0YWluIGhpZ2hlciBzb2NpYWwgYW5kIG9mdGVuIGVudmlyb25tZW50YWwgc3RhbmRhcmRzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6IkZhaXIgdHJhZGUgcHJvZHVjdHMgaGVscCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiZSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9ub3QtZmFpci10cmFkZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfZmFpcl90cmFkZSIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJGYWlyIHRyYWRlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTm90IGEgZmFpciB0cmFkZSBwcm9kdWN0IgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImxhYmVscyIsCiAgICAgICAgICAgICJuYW1lIjoiTGFiZWxzIgogICAgICAgICB9CiAgICAgIF0sCiAgICAgICJjb2RlIjoiMzI1MTI0ODA0NzYyNCIsCiAgICAgICJpbWFnZV9mcm9udF9zbWFsbF91cmwiOiJodHRwczovL2ltYWdlcy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9wcm9kdWN0cy8zMjUvMTI0LzgwNC83NjI0L2Zyb250X2ZyLjUuMjAwLmpwZyIsCiAgICAgICJwcm9kdWN0X2Rpc3BsYXlfbmFtZSI6IlB1ciBTYXZvbiBMaXF1aWRlIMOgIGwnaHVpbGUgZCdvbGl2ZSDigJMgTGUgUGV0aXQgTWFyc2VpbGxhaXMg4oCTIDMwMMKgbWwiLAogICAgICAidXJsIjoiaHR0cHM6Ly93b3JsZC5vcGVuYmVhdXR5ZmFjdHMub3JnL3Byb2R1Y3QvMzI1MTI0ODA0NzYyNC9wdXItc2F2b24tbGlxdWlkZS1hLWwtaHVpbGUtZC1vbGl2ZS1sZS1wZXRpdC1tYXJzZWlsbGFpcyIKICAgfSwKICAgewogICAgICAiYXR0cmlidXRlX2dyb3VwcyI6WwogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdldGFyaWFuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdldGFyaWFuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdldGFyaWFuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImEiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvcGFsbS1vaWwtZnJlZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJwYWxtX29pbF9mcmVlIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjoxMDAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiUGFsbSBvaWwgZnJlZSIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnBhbG0tb2lsLWZyZWUiLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJQYWxtIG9pbCBmcmVlIgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzIiwKICAgICAgICAgICAgIm5hbWUiOiJJbmdyZWRpZW50cyIKICAgICAgICAgfSwKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6Ik9yZ2FuaWMgZmFybWluZyBhaW1zIHRvIHByb3RlY3QgdGhlIGVudmlyb25tZW50IGFuZCB0byBjb25zZXJ2ZSBiaW9kaXZlcnNpdHkgYnkgcHJvaGliaXRpbmcgb3IgbGltaXRpbmcgdGhlIHVzZSBvZiBzeW50aGV0aWMgZmVydGlsaXplcnMsIHBlc3RpY2lkZXMgYW5kIGZvb2QgYWRkaXRpdmVzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6Ik9yZ2FuaWMgcHJvZHVjdHMgcHJvbW90ZSBlY29sb2dpY2FsIHN1c3RhaW5hYmlsaXR5IGFuZCBiaW9kaXZlcnNpdHkuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiZSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9ub3Qtb3JnYW5pYy5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfb3JnYW5pYyIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJPcmdhbmljIGZhcm1pbmciLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJOb3QgYW4gb3JnYW5pYyBwcm9kdWN0IgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IldoZW4geW91IGJ1eSBmYWlyIHRyYWRlIHByb2R1Y3RzLCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMgYXJlIHBhaWQgYW4gaGlnaGVyIGFuZCBmYWlyZXIgcHJpY2UsIHdoaWNoIGhlbHBzIHRoZW0gaW1wcm92ZSBhbmQgc3VzdGFpbiBoaWdoZXIgc29jaWFsIGFuZCBvZnRlbiBlbnZpcm9ubWVudGFsIHN0YW5kYXJkcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJGYWlyIHRyYWRlIHByb2R1Y3RzIGhlbHAgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzLiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImUiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3Qvbm90LWZhaXItdHJhZGUuc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX2ZhaXJfdHJhZGUiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiRmFpciB0cmFkZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik5vdCBhIGZhaXIgdHJhZGUgcHJvZHVjdCIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJsYWJlbHMiLAogICAgICAgICAgICAibmFtZSI6IkxhYmVscyIKICAgICAgICAgfQogICAgICBdLAogICAgICAiY29kZSI6IjM2MDA1MjI4Mzg4NzYiLAogICAgICAiaW1hZ2VfZnJvbnRfc21hbGxfdXJsIjoiaHR0cHM6Ly9pbWFnZXMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvcHJvZHVjdHMvMzYwLzA1Mi8yODMvODg3Ni9mcm9udF9mci41LjIwMC5qcGciLAogICAgICAicHJvZHVjdF9kaXNwbGF5X25hbWUiOiJBY2NvcmQgUGFyZmFpdCBmb25kIGRlIHRlaW50IHVuaWZpYW50IHN1ci1tZXN1cmUgTGluIOKAkyBMJ09yw6lhbCDigJMgMzDCoG1sIiwKICAgICAgInVybCI6Imh0dHBzOi8vd29ybGQub3BlbmJlYXV0eWZhY3RzLm9yZy9wcm9kdWN0LzM2MDA1MjI4Mzg4NzYvYWNjb3JkLXBhcmZhaXQtZm9uZC1kZS10ZWludC11bmlmaWFudC1zdXItbWVzdXJlLWxpbi1sLW9yZWFsIgogICB9LAogICB7CiAgICAgICJhdHRyaWJ1dGVfZ3JvdXBzIjpbCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2FuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2FuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2FuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2V0YXJpYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiYSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9wYWxtLW9pbC1mcmVlLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InBhbG1fb2lsX2ZyZWUiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjEwMCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJQYWxtIG9pbCBmcmVlIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46cGFsbS1vaWwtZnJlZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlBhbG0gb2lsIGZyZWUiCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXMiLAogICAgICAgICAgICAibmFtZSI6IkluZ3JlZGllbnRzIgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiT3JnYW5pYyBmYXJtaW5nIGFpbXMgdG8gcHJvdGVjdCB0aGUgZW52aXJvbm1lbnQgYW5kIHRvIGNvbnNlcnZlIGJpb2RpdmVyc2l0eSBieSBwcm9oaWJpdGluZyBvciBsaW1pdGluZyB0aGUgdXNlIG9mIHN5bnRoZXRpYyBmZXJ0aWxpemVycywgcGVzdGljaWRlcyBhbmQgZm9vZCBhZGRpdGl2ZXMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiT3JnYW5pYyBwcm9kdWN0cyBwcm9tb3RlIGVjb2xvZ2ljYWwgc3VzdGFpbmFiaWxpdHkgYW5kIGJpb2RpdmVyc2l0eS4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L29yZ2FuaWMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfb3JnYW5pYyIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiT3JnYW5pYyBmYXJtaW5nIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJNaXNzaW5nIGluZm9ybWF0aW9uOiBvcmdhbmljIHByb2R1Y3Q/IgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IldoZW4geW91IGJ1eSBmYWlyIHRyYWRlIHByb2R1Y3RzLCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMgYXJlIHBhaWQgYW4gaGlnaGVyIGFuZCBmYWlyZXIgcHJpY2UsIHdoaWNoIGhlbHBzIHRoZW0gaW1wcm92ZSBhbmQgc3VzdGFpbiBoaWdoZXIgc29jaWFsIGFuZCBvZnRlbiBlbnZpcm9ubWVudGFsIHN0YW5kYXJkcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJGYWlyIHRyYWRlIHByb2R1Y3RzIGhlbHAgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzLiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvZmFpci10cmFkZS11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19mYWlyX3RyYWRlIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJGYWlyIHRyYWRlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJNaXNzaW5nIGluZm9ybWF0aW9uOiBmYWlyIHRyYWRlIHByb2R1Y3Q/IgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImxhYmVscyIsCiAgICAgICAgICAgICJuYW1lIjoiTGFiZWxzIgogICAgICAgICB9CiAgICAgIF0sCiAgICAgICJjb2RlIjoiNTAxNzYzNDAxMjU1NyIsCiAgICAgICJpbWFnZV9mcm9udF9zbWFsbF91cmwiOiJodHRwczovL2ltYWdlcy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9wcm9kdWN0cy81MDEvNzYzLzQwMS8yNTU3L2Zyb250X2ZyLjUuMjAwLmpwZyIsCiAgICAgICJwcm9kdWN0X2Rpc3BsYXlfbmFtZSI6IkZyaXp6IEVhc2UgRmxhd2xlc3NseSBTdHJhaWdodCBTaGFtcG9vaW5nIGxpc3NlIGlkw6lhbCDigJMgSm9obiBGcmllZGEg4oCTIDI1MMKgbWwiLAogICAgICAidXJsIjoiaHR0cHM6Ly93b3JsZC5vcGVuYmVhdXR5ZmFjdHMub3JnL3Byb2R1Y3QvNTAxNzYzNDAxMjU1Ny9mcml6ei1lYXNlLWZsYXdsZXNzbHktc3RyYWlnaHQtc2hhbXBvb2luZy1saXNzZS1pZGVhbC1qb2huLWZyaWVkYSIKICAgfSwKICAgewogICAgICAiYXR0cmlidXRlX2dyb3VwcyI6WwogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdldGFyaWFuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdldGFyaWFuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdldGFyaWFuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImEiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvcGFsbS1vaWwtZnJlZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJwYWxtX29pbF9mcmVlIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjoxMDAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiUGFsbSBvaWwgZnJlZSIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnBhbG0tb2lsLWZyZWUiLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJQYWxtIG9pbCBmcmVlIgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzIiwKICAgICAgICAgICAgIm5hbWUiOiJJbmdyZWRpZW50cyIKICAgICAgICAgfSwKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6Ik9yZ2FuaWMgZmFybWluZyBhaW1zIHRvIHByb3RlY3QgdGhlIGVudmlyb25tZW50IGFuZCB0byBjb25zZXJ2ZSBiaW9kaXZlcnNpdHkgYnkgcHJvaGliaXRpbmcgb3IgbGltaXRpbmcgdGhlIHVzZSBvZiBzeW50aGV0aWMgZmVydGlsaXplcnMsIHBlc3RpY2lkZXMgYW5kIGZvb2QgYWRkaXRpdmVzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6Ik9yZ2FuaWMgcHJvZHVjdHMgcHJvbW90ZSBlY29sb2dpY2FsIHN1c3RhaW5hYmlsaXR5IGFuZCBiaW9kaXZlcnNpdHkuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9vcmdhbmljLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX29yZ2FuaWMiLAogICAgICAgICAgICAgICAgICAibmFtZSI6Ik9yZ2FuaWMgZmFybWluZyIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTWlzc2luZyBpbmZvcm1hdGlvbjogb3JnYW5pYyBwcm9kdWN0PyIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiJXaGVuIHlvdSBidXkgZmFpciB0cmFkZSBwcm9kdWN0cywgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzIGFyZSBwYWlkIGFuIGhpZ2hlciBhbmQgZmFpcmVyIHByaWNlLCB3aGljaCBoZWxwcyB0aGVtIGltcHJvdmUgYW5kIHN1c3RhaW4gaGlnaGVyIHNvY2lhbCBhbmQgb2Z0ZW4gZW52aXJvbm1lbnRhbCBzdGFuZGFyZHMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiRmFpciB0cmFkZSBwcm9kdWN0cyBoZWxwIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcy4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L2ZhaXItdHJhZGUtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfZmFpcl90cmFkZSIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiRmFpciB0cmFkZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTWlzc2luZyBpbmZvcm1hdGlvbjogZmFpciB0cmFkZSBwcm9kdWN0PyIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJsYWJlbHMiLAogICAgICAgICAgICAibmFtZSI6IkxhYmVscyIKICAgICAgICAgfQogICAgICBdLAogICAgICAiY29kZSI6IjQwMDAzODgxNzcwMDAiLAogICAgICAiaW1hZ2VfZnJvbnRfc21hbGxfdXJsIjoiaHR0cHM6Ly9pbWFnZXMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvcHJvZHVjdHMvNDAwLzAzOC84MTcvNzAwMC9mcm9udF9mci42LjIwMC5qcGciLAogICAgICAicHJvZHVjdF9kaXNwbGF5X25hbWUiOiJDcsOobWUgbGF2YW50ZSBkZSBiZWF1dMOpIOKAkyBEb3ZlIOKAkyAyNTDCoG1sIiwKICAgICAgInVybCI6Imh0dHBzOi8vd29ybGQub3BlbmJlYXV0eWZhY3RzLm9yZy9wcm9kdWN0LzQwMDAzODgxNzcwMDAvY3JlbWUtbGF2YW50ZS1kZS1iZWF1dGUtZG92ZSIKICAgfSwKICAgewogICAgICAiYXR0cmlidXRlX2dyb3VwcyI6WwogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdldGFyaWFuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdldGFyaWFuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdldGFyaWFuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImEiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvcGFsbS1vaWwtZnJlZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJwYWxtX29pbF9mcmVlIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjoxMDAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiUGFsbSBvaWwgZnJlZSIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnBhbG0tb2lsLWZyZWUiLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJQYWxtIG9pbCBmcmVlIgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzIiwKICAgICAgICAgICAgIm5hbWUiOiJJbmdyZWRpZW50cyIKICAgICAgICAgfSwKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6Ik9yZ2FuaWMgZmFybWluZyBhaW1zIHRvIHByb3RlY3QgdGhlIGVudmlyb25tZW50IGFuZCB0byBjb25zZXJ2ZSBiaW9kaXZlcnNpdHkgYnkgcHJvaGliaXRpbmcgb3IgbGltaXRpbmcgdGhlIHVzZSBvZiBzeW50aGV0aWMgZmVydGlsaXplcnMsIHBlc3RpY2lkZXMgYW5kIGZvb2QgYWRkaXRpdmVzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6Ik9yZ2FuaWMgcHJvZHVjdHMgcHJvbW90ZSBlY29sb2dpY2FsIHN1c3RhaW5hYmlsaXR5IGFuZCBiaW9kaXZlcnNpdHkuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9vcmdhbmljLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX29yZ2FuaWMiLAogICAgICAgICAgICAgICAgICAibmFtZSI6Ik9yZ2FuaWMgZmFybWluZyIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTWlzc2luZyBpbmZvcm1hdGlvbjogb3JnYW5pYyBwcm9kdWN0PyIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiJXaGVuIHlvdSBidXkgZmFpciB0cmFkZSBwcm9kdWN0cywgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzIGFyZSBwYWlkIGFuIGhpZ2hlciBhbmQgZmFpcmVyIHByaWNlLCB3aGljaCBoZWxwcyB0aGVtIGltcHJvdmUgYW5kIHN1c3RhaW4gaGlnaGVyIHNvY2lhbCBhbmQgb2Z0ZW4gZW52aXJvbm1lbnRhbCBzdGFuZGFyZHMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiRmFpciB0cmFkZSBwcm9kdWN0cyBoZWxwIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcy4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L2ZhaXItdHJhZGUtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfZmFpcl90cmFkZSIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiRmFpciB0cmFkZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTWlzc2luZyBpbmZvcm1hdGlvbjogZmFpciB0cmFkZSBwcm9kdWN0PyIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJsYWJlbHMiLAogICAgICAgICAgICAibmFtZSI6IkxhYmVscyIKICAgICAgICAgfQogICAgICBdLAogICAgICAiY29kZSI6IjM2MDA1NDEwNzI5OTIiLAogICAgICAiaW1hZ2VfZnJvbnRfc21hbGxfdXJsIjoiaHR0cHM6Ly9pbWFnZXMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvcHJvZHVjdHMvMzYwLzA1NC8xMDcvMjk5Mi9mcm9udF9lbi4yMC4yMDAuanBnIiwKICAgICAgInByb2R1Y3RfZGlzcGxheV9uYW1lIjoiU2Vuc2l0aXZlIEFkdmFuY2VkIDUwKyDigJMgTCdPcsOpYWwg4oCTIDQwMMKgbWwiLAogICAgICAidXJsIjoiaHR0cHM6Ly93b3JsZC5vcGVuYmVhdXR5ZmFjdHMub3JnL3Byb2R1Y3QvMzYwMDU0MTA3Mjk5Mi9zZW5zaXRpdmUtYWR2YW5jZWQtNTAtbC1vcmVhbCIKICAgfSwKICAgewogICAgICAiYXR0cmlidXRlX2dyb3VwcyI6WwogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdldGFyaWFuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdldGFyaWFuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdldGFyaWFuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImEiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvcGFsbS1vaWwtZnJlZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJwYWxtX29pbF9mcmVlIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjoxMDAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiUGFsbSBvaWwgZnJlZSIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnBhbG0tb2lsLWZyZWUiLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJQYWxtIG9pbCBmcmVlIgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzIiwKICAgICAgICAgICAgIm5hbWUiOiJJbmdyZWRpZW50cyIKICAgICAgICAgfSwKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6Ik9yZ2FuaWMgZmFybWluZyBhaW1zIHRvIHByb3RlY3QgdGhlIGVudmlyb25tZW50IGFuZCB0byBjb25zZXJ2ZSBiaW9kaXZlcnNpdHkgYnkgcHJvaGliaXRpbmcgb3IgbGltaXRpbmcgdGhlIHVzZSBvZiBzeW50aGV0aWMgZmVydGlsaXplcnMsIHBlc3RpY2lkZXMgYW5kIGZvb2QgYWRkaXRpdmVzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6Ik9yZ2FuaWMgcHJvZHVjdHMgcHJvbW90ZSBlY29sb2dpY2FsIHN1c3RhaW5hYmlsaXR5IGFuZCBiaW9kaXZlcnNpdHkuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiZSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9ub3Qtb3JnYW5pYy5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfb3JnYW5pYyIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJPcmdhbmljIGZhcm1pbmciLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJOb3QgYW4gb3JnYW5pYyBwcm9kdWN0IgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IldoZW4geW91IGJ1eSBmYWlyIHRyYWRlIHByb2R1Y3RzLCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMgYXJlIHBhaWQgYW4gaGlnaGVyIGFuZCBmYWlyZXIgcHJpY2UsIHdoaWNoIGhlbHBzIHRoZW0gaW1wcm92ZSBhbmQgc3VzdGFpbiBoaWdoZXIgc29jaWFsIGFuZCBvZnRlbiBlbnZpcm9ubWVudGFsIHN0YW5kYXJkcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJGYWlyIHRyYWRlIHByb2R1Y3RzIGhlbHAgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzLiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImUiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3Qvbm90LWZhaXItdHJhZGUuc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX2ZhaXJfdHJhZGUiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiRmFpciB0cmFkZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik5vdCBhIGZhaXIgdHJhZGUgcHJvZHVjdCIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJsYWJlbHMiLAogICAgICAgICAgICAibmFtZSI6IkxhYmVscyIKICAgICAgICAgfQogICAgICBdLAogICAgICAiY29kZSI6Ijg3MzQzNDM0IiwKICAgICAgImltYWdlX2Zyb250X3NtYWxsX3VybCI6Imh0dHBzOi8vaW1hZ2VzLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL3Byb2R1Y3RzLzAwMC8wMDgvNzM0LzM0MzQvZnJvbnRfZW4uODguMjAwLmpwZyIsCiAgICAgICJwcm9kdWN0X2Rpc3BsYXlfbmFtZSI6IlNpZ25hbCBEZW50aWZyaWNlIEJhYnkgMC0zIEFucyBGcmFtYm9pc2Ug4oCTIHVuaWxldmVyIOKAkyA1MMKgbWwiLAogICAgICAidXJsIjoiaHR0cHM6Ly93b3JsZC5vcGVuYmVhdXR5ZmFjdHMub3JnL3Byb2R1Y3QvODczNDM0MzQvc2lnbmFsLWRlbnRpZnJpY2UtYmFieS0wLTMtYW5zLWZyYW1ib2lzZS11bmlsZXZlciIKICAgfSwKICAgewogICAgICAiYXR0cmlidXRlX2dyb3VwcyI6WwogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdldGFyaWFuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdldGFyaWFuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdldGFyaWFuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvcGFsbS1vaWwtY29udGVudC11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InBhbG1fb2lsX2ZyZWUiLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlBhbG0gb2lsIGZyZWUiLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjpwYWxtLW9pbC1jb250ZW50LXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlBhbG0gb2lsIGNvbnRlbnQgdW5rbm93biIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJpbmdyZWRpZW50c19hbmFseXNpcyIsCiAgICAgICAgICAgICJuYW1lIjoiSW5ncmVkaWVudHMiCiAgICAgICAgIH0sCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiJPcmdhbmljIGZhcm1pbmcgYWltcyB0byBwcm90ZWN0IHRoZSBlbnZpcm9ubWVudCBhbmQgdG8gY29uc2VydmUgYmlvZGl2ZXJzaXR5IGJ5IHByb2hpYml0aW5nIG9yIGxpbWl0aW5nIHRoZSB1c2Ugb2Ygc3ludGhldGljIGZlcnRpbGl6ZXJzLCBwZXN0aWNpZGVzIGFuZCBmb29kIGFkZGl0aXZlcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJPcmdhbmljIHByb2R1Y3RzIHByb21vdGUgZWNvbG9naWNhbCBzdXN0YWluYWJpbGl0eSBhbmQgYmlvZGl2ZXJzaXR5LiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImUiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3Qvbm90LW9yZ2FuaWMuc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX29yZ2FuaWMiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiT3JnYW5pYyBmYXJtaW5nIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTm90IGFuIG9yZ2FuaWMgcHJvZHVjdCIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiJXaGVuIHlvdSBidXkgZmFpciB0cmFkZSBwcm9kdWN0cywgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzIGFyZSBwYWlkIGFuIGhpZ2hlciBhbmQgZmFpcmVyIHByaWNlLCB3aGljaCBoZWxwcyB0aGVtIGltcHJvdmUgYW5kIHN1c3RhaW4gaGlnaGVyIHNvY2lhbCBhbmQgb2Z0ZW4gZW52aXJvbm1lbnRhbCBzdGFuZGFyZHMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiRmFpciB0cmFkZSBwcm9kdWN0cyBoZWxwIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcy4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJlIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L25vdC1mYWlyLXRyYWRlLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19mYWlyX3RyYWRlIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjowLAogICAgICAgICAgICAgICAgICAibmFtZSI6IkZhaXIgdHJhZGUiLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJOb3QgYSBmYWlyIHRyYWRlIHByb2R1Y3QiCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoibGFiZWxzIiwKICAgICAgICAgICAgIm5hbWUiOiJMYWJlbHMiCiAgICAgICAgIH0KICAgICAgXSwKICAgICAgImNvZGUiOiI4NzExNzAwNzk2NzEyIiwKICAgICAgImltYWdlX2Zyb250X3NtYWxsX3VybCI6Imh0dHBzOi8vaW1hZ2VzLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL3Byb2R1Y3RzLzg3MS8xNzAvMDc5LzY3MTIvZnJvbnRfZnIuMTYuMjAwLmpwZyIsCiAgICAgICJwcm9kdWN0X2Rpc3BsYXlfbmFtZSI6IkFYRSBHZWwgRG91Y2hlIEFwb2xsbyA0MDBtbCDigJMgNDAwwqBtbCIsCiAgICAgICJ1cmwiOiJodHRwczovL3dvcmxkLm9wZW5iZWF1dHlmYWN0cy5vcmcvcHJvZHVjdC84NzExNzAwNzk2NzEyL2F4ZS1nZWwtZG91Y2hlLWFwb2xsby00MDBtbCIKICAgfSwKICAgewogICAgICAiYXR0cmlidXRlX2dyb3VwcyI6WwogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdldGFyaWFuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdldGFyaWFuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdldGFyaWFuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImEiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvcGFsbS1vaWwtZnJlZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJwYWxtX29pbF9mcmVlIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjoxMDAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiUGFsbSBvaWwgZnJlZSIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnBhbG0tb2lsLWZyZWUiLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJQYWxtIG9pbCBmcmVlIgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzIiwKICAgICAgICAgICAgIm5hbWUiOiJJbmdyZWRpZW50cyIKICAgICAgICAgfSwKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6Ik9yZ2FuaWMgZmFybWluZyBhaW1zIHRvIHByb3RlY3QgdGhlIGVudmlyb25tZW50IGFuZCB0byBjb25zZXJ2ZSBiaW9kaXZlcnNpdHkgYnkgcHJvaGliaXRpbmcgb3IgbGltaXRpbmcgdGhlIHVzZSBvZiBzeW50aGV0aWMgZmVydGlsaXplcnMsIHBlc3RpY2lkZXMgYW5kIGZvb2QgYWRkaXRpdmVzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6Ik9yZ2FuaWMgcHJvZHVjdHMgcHJvbW90ZSBlY29sb2dpY2FsIHN1c3RhaW5hYmlsaXR5IGFuZCBiaW9kaXZlcnNpdHkuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiZSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9ub3Qtb3JnYW5pYy5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfb3JnYW5pYyIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJPcmdhbmljIGZhcm1pbmciLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJOb3QgYW4gb3JnYW5pYyBwcm9kdWN0IgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IldoZW4geW91IGJ1eSBmYWlyIHRyYWRlIHByb2R1Y3RzLCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMgYXJlIHBhaWQgYW4gaGlnaGVyIGFuZCBmYWlyZXIgcHJpY2UsIHdoaWNoIGhlbHBzIHRoZW0gaW1wcm92ZSBhbmQgc3VzdGFpbiBoaWdoZXIgc29jaWFsIGFuZCBvZnRlbiBlbnZpcm9ubWVudGFsIHN0YW5kYXJkcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJGYWlyIHRyYWRlIHByb2R1Y3RzIGhlbHAgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzLiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImUiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3Qvbm90LWZhaXItdHJhZGUuc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX2ZhaXJfdHJhZGUiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiRmFpciB0cmFkZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik5vdCBhIGZhaXIgdHJhZGUgcHJvZHVjdCIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJsYWJlbHMiLAogICAgICAgICAgICAibmFtZSI6IkxhYmVscyIKICAgICAgICAgfQogICAgICBdLAogICAgICAiY29kZSI6IjAwMTAxODEwNDAzMTMiLAogICAgICAiaW1hZ2VfZnJvbnRfc21hbGxfdXJsIjoiaHR0cHM6Ly9pbWFnZXMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvcHJvZHVjdHMvMDAxLzAxOC8xMDQvMDMxMy9mcm9udF9mci41LjIwMC5qcGciLAogICAgICAicHJvZHVjdF9kaXNwbGF5X25hbWUiOiJwbGFtZXJzIGxvdGlvbiDigJMgUGFsbWVyJ3Mg4oCTIDI1MMKgbWwiLAogICAgICAidXJsIjoiaHR0cHM6Ly93b3JsZC5vcGVuYmVhdXR5ZmFjdHMub3JnL3Byb2R1Y3QvMDAxMDE4MTA0MDMxMy9wbGFtZXJzLWxvdGlvbi1wYWxtZXItcyIKICAgfSwKICAgewogICAgICAiYXR0cmlidXRlX2dyb3VwcyI6WwogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiYSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdhbi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdhbiIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MTAwLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2FuIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46dmVnYW4iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdhbiIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJhIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2V0YXJpYW4uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MTAwLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdldGFyaWFuIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnZXRhcmlhbiIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJhIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3BhbG0tb2lsLWZyZWUuc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoicGFsbV9vaWxfZnJlZSIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MTAwLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlBhbG0gb2lsIGZyZWUiLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjpwYWxtLW9pbC1mcmVlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiUGFsbSBvaWwgZnJlZSIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJpbmdyZWRpZW50c19hbmFseXNpcyIsCiAgICAgICAgICAgICJuYW1lIjoiSW5ncmVkaWVudHMiCiAgICAgICAgIH0sCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiJPcmdhbmljIGZhcm1pbmcgYWltcyB0byBwcm90ZWN0IHRoZSBlbnZpcm9ubWVudCBhbmQgdG8gY29uc2VydmUgYmlvZGl2ZXJzaXR5IGJ5IHByb2hpYml0aW5nIG9yIGxpbWl0aW5nIHRoZSB1c2Ugb2Ygc3ludGhldGljIGZlcnRpbGl6ZXJzLCBwZXN0aWNpZGVzIGFuZCBmb29kIGFkZGl0aXZlcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJPcmdhbmljIHByb2R1Y3RzIHByb21vdGUgZWNvbG9naWNhbCBzdXN0YWluYWJpbGl0eSBhbmQgYmlvZGl2ZXJzaXR5LiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImUiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3Qvbm90LW9yZ2FuaWMuc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX29yZ2FuaWMiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiT3JnYW5pYyBmYXJtaW5nIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTm90IGFuIG9yZ2FuaWMgcHJvZHVjdCIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiJXaGVuIHlvdSBidXkgZmFpciB0cmFkZSBwcm9kdWN0cywgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzIGFyZSBwYWlkIGFuIGhpZ2hlciBhbmQgZmFpcmVyIHByaWNlLCB3aGljaCBoZWxwcyB0aGVtIGltcHJvdmUgYW5kIHN1c3RhaW4gaGlnaGVyIHNvY2lhbCBhbmQgb2Z0ZW4gZW52aXJvbm1lbnRhbCBzdGFuZGFyZHMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiRmFpciB0cmFkZSBwcm9kdWN0cyBoZWxwIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcy4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJlIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L25vdC1mYWlyLXRyYWRlLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19mYWlyX3RyYWRlIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjowLAogICAgICAgICAgICAgICAgICAibmFtZSI6IkZhaXIgdHJhZGUiLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJOb3QgYSBmYWlyIHRyYWRlIHByb2R1Y3QiCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoibGFiZWxzIiwKICAgICAgICAgICAgIm5hbWUiOiJMYWJlbHMiCiAgICAgICAgIH0KICAgICAgXSwKICAgICAgImNvZGUiOiI3NTA5NTUyODQ0MjA3IiwKICAgICAgImltYWdlX2Zyb250X3NtYWxsX3VybCI6Imh0dHBzOi8vaW1hZ2VzLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL3Byb2R1Y3RzLzc1MC85NTUvMjg0LzQyMDcvZnJvbnRfZXMuNC4yMDAuanBnIiwKICAgICAgInByb2R1Y3RfZGlzcGxheV9uYW1lIjoiQWNvbmRpY2lvbmFkb3IgSGFpciBGb29kIENvY28g4oCTIEZydWN0aXMg4oCTIDMwMMKgbWwiLAogICAgICAidXJsIjoiaHR0cHM6Ly93b3JsZC5vcGVuYmVhdXR5ZmFjdHMub3JnL3Byb2R1Y3QvNzUwOTU1Mjg0NDIwNy9hY29uZGljaW9uYWRvci1oYWlyLWZvb2QtY29jby1mcnVjdGlzIgogICB9LAogICB7CiAgICAgICJhdHRyaWJ1dGVfZ3JvdXBzIjpbCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2FuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2FuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2FuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2V0YXJpYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiYSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9wYWxtLW9pbC1mcmVlLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InBhbG1fb2lsX2ZyZWUiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjEwMCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJQYWxtIG9pbCBmcmVlIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46cGFsbS1vaWwtZnJlZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlBhbG0gb2lsIGZyZWUiCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXMiLAogICAgICAgICAgICAibmFtZSI6IkluZ3JlZGllbnRzIgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiT3JnYW5pYyBmYXJtaW5nIGFpbXMgdG8gcHJvdGVjdCB0aGUgZW52aXJvbm1lbnQgYW5kIHRvIGNvbnNlcnZlIGJpb2RpdmVyc2l0eSBieSBwcm9oaWJpdGluZyBvciBsaW1pdGluZyB0aGUgdXNlIG9mIHN5bnRoZXRpYyBmZXJ0aWxpemVycywgcGVzdGljaWRlcyBhbmQgZm9vZCBhZGRpdGl2ZXMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiT3JnYW5pYyBwcm9kdWN0cyBwcm9tb3RlIGVjb2xvZ2ljYWwgc3VzdGFpbmFiaWxpdHkgYW5kIGJpb2RpdmVyc2l0eS4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJlIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L25vdC1vcmdhbmljLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19vcmdhbmljIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjowLAogICAgICAgICAgICAgICAgICAibmFtZSI6Ik9yZ2FuaWMgZmFybWluZyIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik5vdCBhbiBvcmdhbmljIHByb2R1Y3QiCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiV2hlbiB5b3UgYnV5IGZhaXIgdHJhZGUgcHJvZHVjdHMsIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcyBhcmUgcGFpZCBhbiBoaWdoZXIgYW5kIGZhaXJlciBwcmljZSwgd2hpY2ggaGVscHMgdGhlbSBpbXByb3ZlIGFuZCBzdXN0YWluIGhpZ2hlciBzb2NpYWwgYW5kIG9mdGVuIGVudmlyb25tZW50YWwgc3RhbmRhcmRzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6IkZhaXIgdHJhZGUgcHJvZHVjdHMgaGVscCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiZSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9ub3QtZmFpci10cmFkZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfZmFpcl90cmFkZSIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJGYWlyIHRyYWRlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTm90IGEgZmFpciB0cmFkZSBwcm9kdWN0IgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImxhYmVscyIsCiAgICAgICAgICAgICJuYW1lIjoiTGFiZWxzIgogICAgICAgICB9CiAgICAgIF0sCiAgICAgICJjb2RlIjoiMzc2MDA5OTU5MjM5NCIsCiAgICAgICJpbWFnZV9mcm9udF9zbWFsbF91cmwiOiJodHRwczovL2ltYWdlcy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9wcm9kdWN0cy8zNzYvMDA5Lzk1OS8yMzk0L2Zyb250X2VuLjE4LjIwMC5qcGciLAogICAgICAicHJvZHVjdF9kaXNwbGF5X25hbWUiOiJzYXZvbiBsZSBuYXR1cmVsIOKAkyA1MDDCoG1sIiwKICAgICAgInVybCI6Imh0dHBzOi8vd29ybGQub3BlbmJlYXV0eWZhY3RzLm9yZy9wcm9kdWN0LzM3NjAwOTk1OTIzOTQvc2F2b24tbGUtbmF0dXJlbCIKICAgfSwKICAgewogICAgICAiYXR0cmlidXRlX2dyb3VwcyI6WwogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdldGFyaWFuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdldGFyaWFuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdldGFyaWFuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImEiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvcGFsbS1vaWwtZnJlZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJwYWxtX29pbF9mcmVlIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjoxMDAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiUGFsbSBvaWwgZnJlZSIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnBhbG0tb2lsLWZyZWUiLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJQYWxtIG9pbCBmcmVlIgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzIiwKICAgICAgICAgICAgIm5hbWUiOiJJbmdyZWRpZW50cyIKICAgICAgICAgfSwKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6Ik9yZ2FuaWMgZmFybWluZyBhaW1zIHRvIHByb3RlY3QgdGhlIGVudmlyb25tZW50IGFuZCB0byBjb25zZXJ2ZSBiaW9kaXZlcnNpdHkgYnkgcHJvaGliaXRpbmcgb3IgbGltaXRpbmcgdGhlIHVzZSBvZiBzeW50aGV0aWMgZmVydGlsaXplcnMsIHBlc3RpY2lkZXMgYW5kIGZvb2QgYWRkaXRpdmVzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6Ik9yZ2FuaWMgcHJvZHVjdHMgcHJvbW90ZSBlY29sb2dpY2FsIHN1c3RhaW5hYmlsaXR5IGFuZCBiaW9kaXZlcnNpdHkuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9vcmdhbmljLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX29yZ2FuaWMiLAogICAgICAgICAgICAgICAgICAibmFtZSI6Ik9yZ2FuaWMgZmFybWluZyIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTWlzc2luZyBpbmZvcm1hdGlvbjogb3JnYW5pYyBwcm9kdWN0PyIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiJXaGVuIHlvdSBidXkgZmFpciB0cmFkZSBwcm9kdWN0cywgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzIGFyZSBwYWlkIGFuIGhpZ2hlciBhbmQgZmFpcmVyIHByaWNlLCB3aGljaCBoZWxwcyB0aGVtIGltcHJvdmUgYW5kIHN1c3RhaW4gaGlnaGVyIHNvY2lhbCBhbmQgb2Z0ZW4gZW52aXJvbm1lbnRhbCBzdGFuZGFyZHMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiRmFpciB0cmFkZSBwcm9kdWN0cyBoZWxwIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcy4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L2ZhaXItdHJhZGUtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfZmFpcl90cmFkZSIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiRmFpciB0cmFkZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTWlzc2luZyBpbmZvcm1hdGlvbjogZmFpciB0cmFkZSBwcm9kdWN0PyIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJsYWJlbHMiLAogICAgICAgICAgICAibmFtZSI6IkxhYmVscyIKICAgICAgICAgfQogICAgICBdLAogICAgICAiY29kZSI6IjU0MTAzMDY4NzIzMDMiLAogICAgICAiaW1hZ2VfZnJvbnRfc21hbGxfdXJsIjoiaHR0cHM6Ly9pbWFnZXMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvcHJvZHVjdHMvNTQxLzAzMC82ODcvMjMwMy9mcm9udF9mci4xMi4yMDAuanBnIiwKICAgICAgInByb2R1Y3RfZGlzcGxheV9uYW1lIjoiQ3LDqG1lIGxhdmFudGUgcGFyZnVtIGZsZXVyaSDigJMgSXNhYmVsIOKAkyA1MDDCoG1sIiwKICAgICAgInVybCI6Imh0dHBzOi8vd29ybGQub3BlbmJlYXV0eWZhY3RzLm9yZy9wcm9kdWN0LzU0MTAzMDY4NzIzMDMvY3JlbWUtbGF2YW50ZS1wYXJmdW0tZmxldXJpLWlzYWJlbCIKICAgfSwKICAgewogICAgICAiYXR0cmlidXRlX2dyb3VwcyI6WwogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdldGFyaWFuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdldGFyaWFuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdldGFyaWFuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImEiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvcGFsbS1vaWwtZnJlZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJwYWxtX29pbF9mcmVlIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjoxMDAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiUGFsbSBvaWwgZnJlZSIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnBhbG0tb2lsLWZyZWUiLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJQYWxtIG9pbCBmcmVlIgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzIiwKICAgICAgICAgICAgIm5hbWUiOiJJbmdyZWRpZW50cyIKICAgICAgICAgfSwKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6Ik9yZ2FuaWMgZmFybWluZyBhaW1zIHRvIHByb3RlY3QgdGhlIGVudmlyb25tZW50IGFuZCB0byBjb25zZXJ2ZSBiaW9kaXZlcnNpdHkgYnkgcHJvaGliaXRpbmcgb3IgbGltaXRpbmcgdGhlIHVzZSBvZiBzeW50aGV0aWMgZmVydGlsaXplcnMsIHBlc3RpY2lkZXMgYW5kIGZvb2QgYWRkaXRpdmVzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6Ik9yZ2FuaWMgcHJvZHVjdHMgcHJvbW90ZSBlY29sb2dpY2FsIHN1c3RhaW5hYmlsaXR5IGFuZCBiaW9kaXZlcnNpdHkuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiZSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9ub3Qtb3JnYW5pYy5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfb3JnYW5pYyIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJPcmdhbmljIGZhcm1pbmciLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJOb3QgYW4gb3JnYW5pYyBwcm9kdWN0IgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IldoZW4geW91IGJ1eSBmYWlyIHRyYWRlIHByb2R1Y3RzLCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMgYXJlIHBhaWQgYW4gaGlnaGVyIGFuZCBmYWlyZXIgcHJpY2UsIHdoaWNoIGhlbHBzIHRoZW0gaW1wcm92ZSBhbmQgc3VzdGFpbiBoaWdoZXIgc29jaWFsIGFuZCBvZnRlbiBlbnZpcm9ubWVudGFsIHN0YW5kYXJkcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJGYWlyIHRyYWRlIHByb2R1Y3RzIGhlbHAgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzLiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImUiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3Qvbm90LWZhaXItdHJhZGUuc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX2ZhaXJfdHJhZGUiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiRmFpciB0cmFkZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik5vdCBhIGZhaXIgdHJhZGUgcHJvZHVjdCIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJsYWJlbHMiLAogICAgICAgICAgICAibmFtZSI6IkxhYmVscyIKICAgICAgICAgfQogICAgICBdLAogICAgICAiY29kZSI6IjM0MDEzNzM5NzMwMjYiLAogICAgICAicHJvZHVjdF9kaXNwbGF5X25hbWUiOiJTb2luIGxhdmFudCBkb3V4IOKAkyBJUFJBRCDigJMgMTAwbWwiLAogICAgICAidXJsIjoiaHR0cHM6Ly93b3JsZC5vcGVuYmVhdXR5ZmFjdHMub3JnL3Byb2R1Y3QvMzQwMTM3Mzk3MzAyNi9zb2luLWxhdmFudC1kb3V4LWlwcmFkIgogICB9LAogICB7CiAgICAgICJhdHRyaWJ1dGVfZ3JvdXBzIjpbCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2FuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2FuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2FuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2V0YXJpYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9wYWxtLW9pbC1jb250ZW50LXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoicGFsbV9vaWxfZnJlZSIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiUGFsbSBvaWwgZnJlZSIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnBhbG0tb2lsLWNvbnRlbnQtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiUGFsbSBvaWwgY29udGVudCB1bmtub3duIgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzIiwKICAgICAgICAgICAgIm5hbWUiOiJJbmdyZWRpZW50cyIKICAgICAgICAgfSwKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6Ik9yZ2FuaWMgZmFybWluZyBhaW1zIHRvIHByb3RlY3QgdGhlIGVudmlyb25tZW50IGFuZCB0byBjb25zZXJ2ZSBiaW9kaXZlcnNpdHkgYnkgcHJvaGliaXRpbmcgb3IgbGltaXRpbmcgdGhlIHVzZSBvZiBzeW50aGV0aWMgZmVydGlsaXplcnMsIHBlc3RpY2lkZXMgYW5kIGZvb2QgYWRkaXRpdmVzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6Ik9yZ2FuaWMgcHJvZHVjdHMgcHJvbW90ZSBlY29sb2dpY2FsIHN1c3RhaW5hYmlsaXR5IGFuZCBiaW9kaXZlcnNpdHkuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiZSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9ub3Qtb3JnYW5pYy5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfb3JnYW5pYyIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJPcmdhbmljIGZhcm1pbmciLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJOb3QgYW4gb3JnYW5pYyBwcm9kdWN0IgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IldoZW4geW91IGJ1eSBmYWlyIHRyYWRlIHByb2R1Y3RzLCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMgYXJlIHBhaWQgYW4gaGlnaGVyIGFuZCBmYWlyZXIgcHJpY2UsIHdoaWNoIGhlbHBzIHRoZW0gaW1wcm92ZSBhbmQgc3VzdGFpbiBoaWdoZXIgc29jaWFsIGFuZCBvZnRlbiBlbnZpcm9ubWVudGFsIHN0YW5kYXJkcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJGYWlyIHRyYWRlIHByb2R1Y3RzIGhlbHAgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzLiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImUiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3Qvbm90LWZhaXItdHJhZGUuc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX2ZhaXJfdHJhZGUiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiRmFpciB0cmFkZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik5vdCBhIGZhaXIgdHJhZGUgcHJvZHVjdCIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJsYWJlbHMiLAogICAgICAgICAgICAibmFtZSI6IkxhYmVscyIKICAgICAgICAgfQogICAgICBdLAogICAgICAiY29kZSI6IjQwMDU4MDg3ODA5NjkiLAogICAgICAiaW1hZ2VfZnJvbnRfc21hbGxfdXJsIjoiaHR0cHM6Ly9pbWFnZXMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvcHJvZHVjdHMvNDAwLzU4MC84NzgvMDk2OS9mcm9udF9mci4xNS4yMDAuanBnIiwKICAgICAgInByb2R1Y3RfZGlzcGxheV9uYW1lIjoiUsOpdmVpbCBFeHByZXNzIEZyYcOuY2hldXIgMjRIIEFncnVtZXMg4oCTIE5pdmVhIOKAkyAyNTDCoG1sIiwKICAgICAgInVybCI6Imh0dHBzOi8vd29ybGQub3BlbmJlYXV0eWZhY3RzLm9yZy9wcm9kdWN0LzQwMDU4MDg3ODA5NjkvcmV2ZWlsLWV4cHJlc3MtZnJhaWNoZXVyLTI0aC1hZ3J1bWVzLW5pdmVhIgogICB9LAogICB7CiAgICAgICJhdHRyaWJ1dGVfZ3JvdXBzIjpbCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2FuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2FuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2FuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2V0YXJpYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiYSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9wYWxtLW9pbC1mcmVlLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InBhbG1fb2lsX2ZyZWUiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjEwMCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJQYWxtIG9pbCBmcmVlIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46cGFsbS1vaWwtZnJlZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlBhbG0gb2lsIGZyZWUiCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXMiLAogICAgICAgICAgICAibmFtZSI6IkluZ3JlZGllbnRzIgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiT3JnYW5pYyBmYXJtaW5nIGFpbXMgdG8gcHJvdGVjdCB0aGUgZW52aXJvbm1lbnQgYW5kIHRvIGNvbnNlcnZlIGJpb2RpdmVyc2l0eSBieSBwcm9oaWJpdGluZyBvciBsaW1pdGluZyB0aGUgdXNlIG9mIHN5bnRoZXRpYyBmZXJ0aWxpemVycywgcGVzdGljaWRlcyBhbmQgZm9vZCBhZGRpdGl2ZXMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiT3JnYW5pYyBwcm9kdWN0cyBwcm9tb3RlIGVjb2xvZ2ljYWwgc3VzdGFpbmFiaWxpdHkgYW5kIGJpb2RpdmVyc2l0eS4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJlIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L25vdC1vcmdhbmljLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19vcmdhbmljIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjowLAogICAgICAgICAgICAgICAgICAibmFtZSI6Ik9yZ2FuaWMgZmFybWluZyIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik5vdCBhbiBvcmdhbmljIHByb2R1Y3QiCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiV2hlbiB5b3UgYnV5IGZhaXIgdHJhZGUgcHJvZHVjdHMsIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcyBhcmUgcGFpZCBhbiBoaWdoZXIgYW5kIGZhaXJlciBwcmljZSwgd2hpY2ggaGVscHMgdGhlbSBpbXByb3ZlIGFuZCBzdXN0YWluIGhpZ2hlciBzb2NpYWwgYW5kIG9mdGVuIGVudmlyb25tZW50YWwgc3RhbmRhcmRzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6IkZhaXIgdHJhZGUgcHJvZHVjdHMgaGVscCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiZSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9ub3QtZmFpci10cmFkZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfZmFpcl90cmFkZSIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJGYWlyIHRyYWRlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTm90IGEgZmFpciB0cmFkZSBwcm9kdWN0IgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImxhYmVscyIsCiAgICAgICAgICAgICJuYW1lIjoiTGFiZWxzIgogICAgICAgICB9CiAgICAgIF0sCiAgICAgICJjb2RlIjoiMzYwMDU0MDA4MTA2MyIsCiAgICAgICJpbWFnZV9mcm9udF9zbWFsbF91cmwiOiJodHRwczovL2ltYWdlcy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9wcm9kdWN0cy8zNjAvMDU0LzAwOC8xMDYzL2Zyb250X2ZyLjQuMjAwLmpwZyIsCiAgICAgICJwcm9kdWN0X2Rpc3BsYXlfbmFtZSI6IjM2MDA1NDAnMDgxMDYzJmd0OyBHQVJOSWVSIGdhcm5pZXIuY29tIEZFUk1FTlQgR0FSTklHUiBXZ2Fybmllci5jb20gUkVQSFRIQUxZTElERU5FIDgxMCA2NjYgMzMzKSDigJMgbC1vcmVhbCDigJMgMjAwwqBtbCIsCiAgICAgICJ1cmwiOiJodHRwczovL3dvcmxkLm9wZW5iZWF1dHlmYWN0cy5vcmcvcHJvZHVjdC8zNjAwNTQwMDgxMDYzLzM2MDA1NDAtMDgxMDYzLWdhcm5pZXItZ2Fybmllci1jb20tZmVybWVudC1nYXJuaWdyLXdnYXJuaWVyLWNvbS1yZXBodGhhbHlsaWRlbmUtODEwLTY2Ni0zMzMtbC1vcmVhbCIKICAgfSwKICAgewogICAgICAiYXR0cmlidXRlX2dyb3VwcyI6WwogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdldGFyaWFuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdldGFyaWFuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdldGFyaWFuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImEiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvcGFsbS1vaWwtZnJlZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJwYWxtX29pbF9mcmVlIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjoxMDAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiUGFsbSBvaWwgZnJlZSIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnBhbG0tb2lsLWZyZWUiLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJQYWxtIG9pbCBmcmVlIgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzIiwKICAgICAgICAgICAgIm5hbWUiOiJJbmdyZWRpZW50cyIKICAgICAgICAgfSwKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6Ik9yZ2FuaWMgZmFybWluZyBhaW1zIHRvIHByb3RlY3QgdGhlIGVudmlyb25tZW50IGFuZCB0byBjb25zZXJ2ZSBiaW9kaXZlcnNpdHkgYnkgcHJvaGliaXRpbmcgb3IgbGltaXRpbmcgdGhlIHVzZSBvZiBzeW50aGV0aWMgZmVydGlsaXplcnMsIHBlc3RpY2lkZXMgYW5kIGZvb2QgYWRkaXRpdmVzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6Ik9yZ2FuaWMgcHJvZHVjdHMgcHJvbW90ZSBlY29sb2dpY2FsIHN1c3RhaW5hYmlsaXR5IGFuZCBiaW9kaXZlcnNpdHkuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiZSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9ub3Qtb3JnYW5pYy5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfb3JnYW5pYyIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJPcmdhbmljIGZhcm1pbmciLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJOb3QgYW4gb3JnYW5pYyBwcm9kdWN0IgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IldoZW4geW91IGJ1eSBmYWlyIHRyYWRlIHByb2R1Y3RzLCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMgYXJlIHBhaWQgYW4gaGlnaGVyIGFuZCBmYWlyZXIgcHJpY2UsIHdoaWNoIGhlbHBzIHRoZW0gaW1wcm92ZSBhbmQgc3VzdGFpbiBoaWdoZXIgc29jaWFsIGFuZCBvZnRlbiBlbnZpcm9ubWVudGFsIHN0YW5kYXJkcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJGYWlyIHRyYWRlIHByb2R1Y3RzIGhlbHAgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzLiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImUiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3Qvbm90LWZhaXItdHJhZGUuc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX2ZhaXJfdHJhZGUiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiRmFpciB0cmFkZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik5vdCBhIGZhaXIgdHJhZGUgcHJvZHVjdCIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJsYWJlbHMiLAogICAgICAgICAgICAibmFtZSI6IkxhYmVscyIKICAgICAgICAgfQogICAgICBdLAogICAgICAiY29kZSI6IjM2MDA1NDA2NzY2MjciLAogICAgICAiaW1hZ2VfZnJvbnRfc21hbGxfdXJsIjoiaHR0cHM6Ly9pbWFnZXMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvcHJvZHVjdHMvMzYwLzA1NC8wNjcvNjYyNy9mcm9udF9mci43LjIwMC5qcGciLAogICAgICAicHJvZHVjdF9kaXNwbGF5X25hbWUiOiJHQVJOSWVSIFNLSU5BQ1RJVkUgUHVyZUFjdGl2ZSAzIGVuIDEgQVJHSUxFIOKAkyAxNTDCoG1sIiwKICAgICAgInVybCI6Imh0dHBzOi8vd29ybGQub3BlbmJlYXV0eWZhY3RzLm9yZy9wcm9kdWN0LzM2MDA1NDA2NzY2MjcvZ2Fybmllci1za2luYWN0aXZlLXB1cmVhY3RpdmUtMy1lbi0xLWFyZ2lsZSIKICAgfSwKICAgewogICAgICAiYXR0cmlidXRlX2dyb3VwcyI6WwogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdldGFyaWFuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdldGFyaWFuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdldGFyaWFuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImMiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvbWF5LWNvbnRhaW4tcGFsbS1vaWwuc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoicGFsbV9vaWxfZnJlZSIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6NTAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiUGFsbSBvaWwgZnJlZSIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOm1heS1jb250YWluLXBhbG0tb2lsIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTWF5IGNvbnRhaW4gcGFsbSBvaWwiCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXMiLAogICAgICAgICAgICAibmFtZSI6IkluZ3JlZGllbnRzIgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiT3JnYW5pYyBmYXJtaW5nIGFpbXMgdG8gcHJvdGVjdCB0aGUgZW52aXJvbm1lbnQgYW5kIHRvIGNvbnNlcnZlIGJpb2RpdmVyc2l0eSBieSBwcm9oaWJpdGluZyBvciBsaW1pdGluZyB0aGUgdXNlIG9mIHN5bnRoZXRpYyBmZXJ0aWxpemVycywgcGVzdGljaWRlcyBhbmQgZm9vZCBhZGRpdGl2ZXMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiT3JnYW5pYyBwcm9kdWN0cyBwcm9tb3RlIGVjb2xvZ2ljYWwgc3VzdGFpbmFiaWxpdHkgYW5kIGJpb2RpdmVyc2l0eS4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L29yZ2FuaWMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfb3JnYW5pYyIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiT3JnYW5pYyBmYXJtaW5nIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJNaXNzaW5nIGluZm9ybWF0aW9uOiBvcmdhbmljIHByb2R1Y3Q/IgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IldoZW4geW91IGJ1eSBmYWlyIHRyYWRlIHByb2R1Y3RzLCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMgYXJlIHBhaWQgYW4gaGlnaGVyIGFuZCBmYWlyZXIgcHJpY2UsIHdoaWNoIGhlbHBzIHRoZW0gaW1wcm92ZSBhbmQgc3VzdGFpbiBoaWdoZXIgc29jaWFsIGFuZCBvZnRlbiBlbnZpcm9ubWVudGFsIHN0YW5kYXJkcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJGYWlyIHRyYWRlIHByb2R1Y3RzIGhlbHAgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzLiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvZmFpci10cmFkZS11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19mYWlyX3RyYWRlIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJGYWlyIHRyYWRlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJNaXNzaW5nIGluZm9ybWF0aW9uOiBmYWlyIHRyYWRlIHByb2R1Y3Q/IgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImxhYmVscyIsCiAgICAgICAgICAgICJuYW1lIjoiTGFiZWxzIgogICAgICAgICB9CiAgICAgIF0sCiAgICAgICJjb2RlIjoiMzU2MDA3MDYyNzY4NCIsCiAgICAgICJpbWFnZV9mcm9udF9zbWFsbF91cmwiOiJodHRwczovL2ltYWdlcy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9wcm9kdWN0cy8zNTYvMDA3LzA2Mi83Njg0L2Zyb250X2ZyLjEyLjIwMC5qcGciLAogICAgICAicHJvZHVjdF9kaXNwbGF5X25hbWUiOiJDb2xvciBCb29zdCBTaGFtcG9vaW5nIMOpY2xhdCBhYnNvbHUg4oCTIENhcnJlZm91ciDigJMgMzAwwqBtbCIsCiAgICAgICJ1cmwiOiJodHRwczovL3dvcmxkLm9wZW5iZWF1dHlmYWN0cy5vcmcvcHJvZHVjdC8zNTYwMDcwNjI3Njg0L2NvbG9yLWJvb3N0LXNoYW1wb29pbmctZWNsYXQtYWJzb2x1LWNhcnJlZm91ciIKICAgfSwKICAgewogICAgICAiYXR0cmlidXRlX2dyb3VwcyI6WwogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiYSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdhbi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdhbiIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MTAwLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2FuIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46dmVnYW4iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdhbiIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJhIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2V0YXJpYW4uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MTAwLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdldGFyaWFuIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnZXRhcmlhbiIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3BhbG0tb2lsLWNvbnRlbnQtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJwYWxtX29pbF9mcmVlIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJQYWxtIG9pbCBmcmVlIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46cGFsbS1vaWwtY29udGVudC11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJQYWxtIG9pbCBjb250ZW50IHVua25vd24iCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXMiLAogICAgICAgICAgICAibmFtZSI6IkluZ3JlZGllbnRzIgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiT3JnYW5pYyBmYXJtaW5nIGFpbXMgdG8gcHJvdGVjdCB0aGUgZW52aXJvbm1lbnQgYW5kIHRvIGNvbnNlcnZlIGJpb2RpdmVyc2l0eSBieSBwcm9oaWJpdGluZyBvciBsaW1pdGluZyB0aGUgdXNlIG9mIHN5bnRoZXRpYyBmZXJ0aWxpemVycywgcGVzdGljaWRlcyBhbmQgZm9vZCBhZGRpdGl2ZXMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiT3JnYW5pYyBwcm9kdWN0cyBwcm9tb3RlIGVjb2xvZ2ljYWwgc3VzdGFpbmFiaWxpdHkgYW5kIGJpb2RpdmVyc2l0eS4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJlIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L25vdC1vcmdhbmljLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19vcmdhbmljIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjowLAogICAgICAgICAgICAgICAgICAibmFtZSI6Ik9yZ2FuaWMgZmFybWluZyIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik5vdCBhbiBvcmdhbmljIHByb2R1Y3QiCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiV2hlbiB5b3UgYnV5IGZhaXIgdHJhZGUgcHJvZHVjdHMsIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcyBhcmUgcGFpZCBhbiBoaWdoZXIgYW5kIGZhaXJlciBwcmljZSwgd2hpY2ggaGVscHMgdGhlbSBpbXByb3ZlIGFuZCBzdXN0YWluIGhpZ2hlciBzb2NpYWwgYW5kIG9mdGVuIGVudmlyb25tZW50YWwgc3RhbmRhcmRzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6IkZhaXIgdHJhZGUgcHJvZHVjdHMgaGVscCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiZSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9ub3QtZmFpci10cmFkZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfZmFpcl90cmFkZSIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJGYWlyIHRyYWRlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTm90IGEgZmFpciB0cmFkZSBwcm9kdWN0IgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImxhYmVscyIsCiAgICAgICAgICAgICJuYW1lIjoiTGFiZWxzIgogICAgICAgICB9CiAgICAgIF0sCiAgICAgICJjb2RlIjoiMzU0OTYyMDAwNzYyNiIsCiAgICAgICJpbWFnZV9mcm9udF9zbWFsbF91cmwiOiJodHRwczovL2ltYWdlcy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9wcm9kdWN0cy8zNTQvOTYyLzAwMC83NjI2L2Zyb250X2ZyLjE0LjIwMC5qcGciLAogICAgICAicHJvZHVjdF9kaXNwbGF5X25hbWUiOiJDcsOobWUgZG91Y2hlIGV4dHJhIGRvdWNlIExhaXQgZGUgY290b24g4oCTIExlIFBldGl0IG9saXZpZXIg4oCTIDc1MMKgbWwiLAogICAgICAidXJsIjoiaHR0cHM6Ly93b3JsZC5vcGVuYmVhdXR5ZmFjdHMub3JnL3Byb2R1Y3QvMzU0OTYyMDAwNzYyNi9jcmVtZS1kb3VjaGUtZXh0cmEtZG91Y2UtbGFpdC1kZS1jb3Rvbi1sZS1wZXRpdC1vbGl2aWVyIgogICB9LAogICB7CiAgICAgICJhdHRyaWJ1dGVfZ3JvdXBzIjpbCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2FuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2FuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2FuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2V0YXJpYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9wYWxtLW9pbC1jb250ZW50LXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoicGFsbV9vaWxfZnJlZSIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiUGFsbSBvaWwgZnJlZSIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnBhbG0tb2lsLWNvbnRlbnQtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiUGFsbSBvaWwgY29udGVudCB1bmtub3duIgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzIiwKICAgICAgICAgICAgIm5hbWUiOiJJbmdyZWRpZW50cyIKICAgICAgICAgfSwKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6Ik9yZ2FuaWMgZmFybWluZyBhaW1zIHRvIHByb3RlY3QgdGhlIGVudmlyb25tZW50IGFuZCB0byBjb25zZXJ2ZSBiaW9kaXZlcnNpdHkgYnkgcHJvaGliaXRpbmcgb3IgbGltaXRpbmcgdGhlIHVzZSBvZiBzeW50aGV0aWMgZmVydGlsaXplcnMsIHBlc3RpY2lkZXMgYW5kIGZvb2QgYWRkaXRpdmVzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6Ik9yZ2FuaWMgcHJvZHVjdHMgcHJvbW90ZSBlY29sb2dpY2FsIHN1c3RhaW5hYmlsaXR5IGFuZCBiaW9kaXZlcnNpdHkuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiZSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9ub3Qtb3JnYW5pYy5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfb3JnYW5pYyIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJPcmdhbmljIGZhcm1pbmciLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJOb3QgYW4gb3JnYW5pYyBwcm9kdWN0IgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IldoZW4geW91IGJ1eSBmYWlyIHRyYWRlIHByb2R1Y3RzLCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMgYXJlIHBhaWQgYW4gaGlnaGVyIGFuZCBmYWlyZXIgcHJpY2UsIHdoaWNoIGhlbHBzIHRoZW0gaW1wcm92ZSBhbmQgc3VzdGFpbiBoaWdoZXIgc29jaWFsIGFuZCBvZnRlbiBlbnZpcm9ubWVudGFsIHN0YW5kYXJkcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJGYWlyIHRyYWRlIHByb2R1Y3RzIGhlbHAgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzLiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImUiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3Qvbm90LWZhaXItdHJhZGUuc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX2ZhaXJfdHJhZGUiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiRmFpciB0cmFkZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik5vdCBhIGZhaXIgdHJhZGUgcHJvZHVjdCIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJsYWJlbHMiLAogICAgICAgICAgICAibmFtZSI6IkxhYmVscyIKICAgICAgICAgfQogICAgICBdLAogICAgICAiY29kZSI6Ijg3MTE2MDA1MDQxNDEiLAogICAgICAiaW1hZ2VfZnJvbnRfc21hbGxfdXJsIjoiaHR0cHM6Ly9pbWFnZXMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvcHJvZHVjdHMvODcxLzE2MC8wNTAvNDE0MS9mcm9udF9mci41MS4yMDAuanBnIiwKICAgICAgInByb2R1Y3RfZGlzcGxheV9uYW1lIjoiUmV4b25hIFN0aWNrIEFudGktVHJhbnNwaXJhbnQgTWF4aW11bSBQcm90ZWN0aW9uIENvbmZpZGVuY2UgNDVtbCDigJMgdW5pbGV2ZXIg4oCTIDQ1wqBtbCIsCiAgICAgICJ1cmwiOiJodHRwczovL3dvcmxkLm9wZW5iZWF1dHlmYWN0cy5vcmcvcHJvZHVjdC84NzExNjAwNTA0MTQxL3JleG9uYS1zdGljay1hbnRpLXRyYW5zcGlyYW50LW1heGltdW0tcHJvdGVjdGlvbi1jb25maWRlbmNlLTQ1bWwtdW5pbGV2ZXIiCiAgIH0sCiAgIHsKICAgICAgImF0dHJpYnV0ZV9ncm91cHMiOlsKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvdmVnYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2FuIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46dmVnYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2FuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvdmVnZXRhcmlhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdldGFyaWFuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdldGFyaWFuIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46dmVnZXRhcmlhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnZXRhcmlhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJhIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3BhbG0tb2lsLWZyZWUuc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoicGFsbV9vaWxfZnJlZSIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MTAwLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlBhbG0gb2lsIGZyZWUiLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjpwYWxtLW9pbC1mcmVlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiUGFsbSBvaWwgZnJlZSIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJpbmdyZWRpZW50c19hbmFseXNpcyIsCiAgICAgICAgICAgICJuYW1lIjoiSW5ncmVkaWVudHMiCiAgICAgICAgIH0sCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiJPcmdhbmljIGZhcm1pbmcgYWltcyB0byBwcm90ZWN0IHRoZSBlbnZpcm9ubWVudCBhbmQgdG8gY29uc2VydmUgYmlvZGl2ZXJzaXR5IGJ5IHByb2hpYml0aW5nIG9yIGxpbWl0aW5nIHRoZSB1c2Ugb2Ygc3ludGhldGljIGZlcnRpbGl6ZXJzLCBwZXN0aWNpZGVzIGFuZCBmb29kIGFkZGl0aXZlcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJPcmdhbmljIHByb2R1Y3RzIHByb21vdGUgZWNvbG9naWNhbCBzdXN0YWluYWJpbGl0eSBhbmQgYmlvZGl2ZXJzaXR5LiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3Qvb3JnYW5pYy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19vcmdhbmljIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJPcmdhbmljIGZhcm1pbmciLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik1pc3NpbmcgaW5mb3JtYXRpb246IG9yZ2FuaWMgcHJvZHVjdD8iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiV2hlbiB5b3UgYnV5IGZhaXIgdHJhZGUgcHJvZHVjdHMsIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcyBhcmUgcGFpZCBhbiBoaWdoZXIgYW5kIGZhaXJlciBwcmljZSwgd2hpY2ggaGVscHMgdGhlbSBpbXByb3ZlIGFuZCBzdXN0YWluIGhpZ2hlciBzb2NpYWwgYW5kIG9mdGVuIGVudmlyb25tZW50YWwgc3RhbmRhcmRzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6IkZhaXIgdHJhZGUgcHJvZHVjdHMgaGVscCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9mYWlyLXRyYWRlLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX2ZhaXJfdHJhZGUiLAogICAgICAgICAgICAgICAgICAibmFtZSI6IkZhaXIgdHJhZGUiLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik1pc3NpbmcgaW5mb3JtYXRpb246IGZhaXIgdHJhZGUgcHJvZHVjdD8iCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoibGFiZWxzIiwKICAgICAgICAgICAgIm5hbWUiOiJMYWJlbHMiCiAgICAgICAgIH0KICAgICAgXSwKICAgICAgImNvZGUiOiIzMDk0OTAwMDYyNTE3IiwKICAgICAgImltYWdlX2Zyb250X3NtYWxsX3VybCI6Imh0dHBzOi8vaW1hZ2VzLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL3Byb2R1Y3RzLzMwOS80OTAvMDA2LzI1MTcvZnJvbnRfZnIuMTkuMjAwLmpwZyIsCiAgICAgICJwcm9kdWN0X2Rpc3BsYXlfbmFtZSI6ImRlbnQgbGFpdCDigJMgQXF1YWZyZXNoIOKAkyA1MMKgbWwiLAogICAgICAidXJsIjoiaHR0cHM6Ly93b3JsZC5vcGVuYmVhdXR5ZmFjdHMub3JnL3Byb2R1Y3QvMzA5NDkwMDA2MjUxNy9kZW50LWxhaXQtYXF1YWZyZXNoIgogICB9LAogICB7CiAgICAgICJhdHRyaWJ1dGVfZ3JvdXBzIjpbCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2FuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2FuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2FuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2V0YXJpYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiYSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9wYWxtLW9pbC1mcmVlLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InBhbG1fb2lsX2ZyZWUiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjEwMCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJQYWxtIG9pbCBmcmVlIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46cGFsbS1vaWwtZnJlZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlBhbG0gb2lsIGZyZWUiCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXMiLAogICAgICAgICAgICAibmFtZSI6IkluZ3JlZGllbnRzIgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiT3JnYW5pYyBmYXJtaW5nIGFpbXMgdG8gcHJvdGVjdCB0aGUgZW52aXJvbm1lbnQgYW5kIHRvIGNvbnNlcnZlIGJpb2RpdmVyc2l0eSBieSBwcm9oaWJpdGluZyBvciBsaW1pdGluZyB0aGUgdXNlIG9mIHN5bnRoZXRpYyBmZXJ0aWxpemVycywgcGVzdGljaWRlcyBhbmQgZm9vZCBhZGRpdGl2ZXMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiT3JnYW5pYyBwcm9kdWN0cyBwcm9tb3RlIGVjb2xvZ2ljYWwgc3VzdGFpbmFiaWxpdHkgYW5kIGJpb2RpdmVyc2l0eS4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJlIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L25vdC1vcmdhbmljLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19vcmdhbmljIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjowLAogICAgICAgICAgICAgICAgICAibmFtZSI6Ik9yZ2FuaWMgZmFybWluZyIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik5vdCBhbiBvcmdhbmljIHByb2R1Y3QiCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiV2hlbiB5b3UgYnV5IGZhaXIgdHJhZGUgcHJvZHVjdHMsIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcyBhcmUgcGFpZCBhbiBoaWdoZXIgYW5kIGZhaXJlciBwcmljZSwgd2hpY2ggaGVscHMgdGhlbSBpbXByb3ZlIGFuZCBzdXN0YWluIGhpZ2hlciBzb2NpYWwgYW5kIG9mdGVuIGVudmlyb25tZW50YWwgc3RhbmRhcmRzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6IkZhaXIgdHJhZGUgcHJvZHVjdHMgaGVscCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiZSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9ub3QtZmFpci10cmFkZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfZmFpcl90cmFkZSIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJGYWlyIHRyYWRlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTm90IGEgZmFpciB0cmFkZSBwcm9kdWN0IgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImxhYmVscyIsCiAgICAgICAgICAgICJuYW1lIjoiTGFiZWxzIgogICAgICAgICB9CiAgICAgIF0sCiAgICAgICJjb2RlIjoiMzMzMTg0MDU1MDAwMiIsCiAgICAgICJpbWFnZV9mcm9udF9zbWFsbF91cmwiOiJodHRwczovL2ltYWdlcy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9wcm9kdWN0cy8zMzMvMTg0LzA1NS8wMDAyL2Zyb250X2ZyLjYuMjAwLmpwZyIsCiAgICAgICJwcm9kdWN0X2Rpc3BsYXlfbmFtZSI6IkdlbCBEw6ljb2xvcicgRXhwcmVzcyB2aXNhZ2Ug4oCTIEJsb25kw6lwaWwg4oCTIDIqMjXCoG1sIiwKICAgICAgInVybCI6Imh0dHBzOi8vd29ybGQub3BlbmJlYXV0eWZhY3RzLm9yZy9wcm9kdWN0LzMzMzE4NDA1NTAwMDIvZ2VsLWRlY29sb3ItZXhwcmVzcy12aXNhZ2UtYmxvbmRlcGlsIgogICB9LAogICB7CiAgICAgICJhdHRyaWJ1dGVfZ3JvdXBzIjpbCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2FuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2FuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2FuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2V0YXJpYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiYSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9wYWxtLW9pbC1mcmVlLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InBhbG1fb2lsX2ZyZWUiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjEwMCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJQYWxtIG9pbCBmcmVlIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46cGFsbS1vaWwtZnJlZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlBhbG0gb2lsIGZyZWUiCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXMiLAogICAgICAgICAgICAibmFtZSI6IkluZ3JlZGllbnRzIgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiT3JnYW5pYyBmYXJtaW5nIGFpbXMgdG8gcHJvdGVjdCB0aGUgZW52aXJvbm1lbnQgYW5kIHRvIGNvbnNlcnZlIGJpb2RpdmVyc2l0eSBieSBwcm9oaWJpdGluZyBvciBsaW1pdGluZyB0aGUgdXNlIG9mIHN5bnRoZXRpYyBmZXJ0aWxpemVycywgcGVzdGljaWRlcyBhbmQgZm9vZCBhZGRpdGl2ZXMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiT3JnYW5pYyBwcm9kdWN0cyBwcm9tb3RlIGVjb2xvZ2ljYWwgc3VzdGFpbmFiaWxpdHkgYW5kIGJpb2RpdmVyc2l0eS4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJlIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L25vdC1vcmdhbmljLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19vcmdhbmljIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjowLAogICAgICAgICAgICAgICAgICAibmFtZSI6Ik9yZ2FuaWMgZmFybWluZyIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik5vdCBhbiBvcmdhbmljIHByb2R1Y3QiCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiV2hlbiB5b3UgYnV5IGZhaXIgdHJhZGUgcHJvZHVjdHMsIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcyBhcmUgcGFpZCBhbiBoaWdoZXIgYW5kIGZhaXJlciBwcmljZSwgd2hpY2ggaGVscHMgdGhlbSBpbXByb3ZlIGFuZCBzdXN0YWluIGhpZ2hlciBzb2NpYWwgYW5kIG9mdGVuIGVudmlyb25tZW50YWwgc3RhbmRhcmRzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6IkZhaXIgdHJhZGUgcHJvZHVjdHMgaGVscCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiZSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9ub3QtZmFpci10cmFkZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfZmFpcl90cmFkZSIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJGYWlyIHRyYWRlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTm90IGEgZmFpciB0cmFkZSBwcm9kdWN0IgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImxhYmVscyIsCiAgICAgICAgICAgICJuYW1lIjoiTGFiZWxzIgogICAgICAgICB9CiAgICAgIF0sCiAgICAgICJjb2RlIjoiMzMzMTg0OTAwMDA0MSIsCiAgICAgICJpbWFnZV9mcm9udF9zbWFsbF91cmwiOiJodHRwczovL2ltYWdlcy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9wcm9kdWN0cy8zMzMvMTg0LzkwMC8wMDQxL2Zyb250X2ZyLjUuMjAwLmpwZyIsCiAgICAgICJwcm9kdWN0X2Rpc3BsYXlfbmFtZSI6IkRlY29sb3InIHNhbnMgYW1tb25pYXF1ZSDigJMgQmxvbmTDqXBpbCDigJMgMsKgeCAyNW1MIiwKICAgICAgInVybCI6Imh0dHBzOi8vd29ybGQub3BlbmJlYXV0eWZhY3RzLm9yZy9wcm9kdWN0LzMzMzE4NDkwMDAwNDEvZGVjb2xvci1zYW5zLWFtbW9uaWFxdWUtYmxvbmRlcGlsIgogICB9LAogICB7CiAgICAgICJhdHRyaWJ1dGVfZ3JvdXBzIjpbCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2FuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2FuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2FuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2V0YXJpYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9wYWxtLW9pbC1jb250ZW50LXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoicGFsbV9vaWxfZnJlZSIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiUGFsbSBvaWwgZnJlZSIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnBhbG0tb2lsLWNvbnRlbnQtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiUGFsbSBvaWwgY29udGVudCB1bmtub3duIgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzIiwKICAgICAgICAgICAgIm5hbWUiOiJJbmdyZWRpZW50cyIKICAgICAgICAgfSwKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6Ik9yZ2FuaWMgZmFybWluZyBhaW1zIHRvIHByb3RlY3QgdGhlIGVudmlyb25tZW50IGFuZCB0byBjb25zZXJ2ZSBiaW9kaXZlcnNpdHkgYnkgcHJvaGliaXRpbmcgb3IgbGltaXRpbmcgdGhlIHVzZSBvZiBzeW50aGV0aWMgZmVydGlsaXplcnMsIHBlc3RpY2lkZXMgYW5kIGZvb2QgYWRkaXRpdmVzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6Ik9yZ2FuaWMgcHJvZHVjdHMgcHJvbW90ZSBlY29sb2dpY2FsIHN1c3RhaW5hYmlsaXR5IGFuZCBiaW9kaXZlcnNpdHkuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9vcmdhbmljLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX29yZ2FuaWMiLAogICAgICAgICAgICAgICAgICAibmFtZSI6Ik9yZ2FuaWMgZmFybWluZyIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTWlzc2luZyBpbmZvcm1hdGlvbjogb3JnYW5pYyBwcm9kdWN0PyIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiJXaGVuIHlvdSBidXkgZmFpciB0cmFkZSBwcm9kdWN0cywgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzIGFyZSBwYWlkIGFuIGhpZ2hlciBhbmQgZmFpcmVyIHByaWNlLCB3aGljaCBoZWxwcyB0aGVtIGltcHJvdmUgYW5kIHN1c3RhaW4gaGlnaGVyIHNvY2lhbCBhbmQgb2Z0ZW4gZW52aXJvbm1lbnRhbCBzdGFuZGFyZHMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiRmFpciB0cmFkZSBwcm9kdWN0cyBoZWxwIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcy4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L2ZhaXItdHJhZGUtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfZmFpcl90cmFkZSIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiRmFpciB0cmFkZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTWlzc2luZyBpbmZvcm1hdGlvbjogZmFpciB0cmFkZSBwcm9kdWN0PyIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJsYWJlbHMiLAogICAgICAgICAgICAibmFtZSI6IkxhYmVscyIKICAgICAgICAgfQogICAgICBdLAogICAgICAiY29kZSI6IjMyNTYyMjI3NDA2MDciLAogICAgICAiaW1hZ2VfZnJvbnRfc21hbGxfdXJsIjoiaHR0cHM6Ly9pbWFnZXMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvcHJvZHVjdHMvMzI1LzYyMi8yNzQvMDYwNy9mcm9udF9mci4xNS4yMDAuanBnIiwKICAgICAgInByb2R1Y3RfZGlzcGxheV9uYW1lIjoiRGVudGlmcmljZSBTb2luIENvbXBsZXQg4oCTIFUg4oCTIDc1wqBtbCIsCiAgICAgICJ1cmwiOiJodHRwczovL3dvcmxkLm9wZW5iZWF1dHlmYWN0cy5vcmcvcHJvZHVjdC8zMjU2MjIyNzQwNjA3L2RlbnRpZnJpY2Utc29pbi1jb21wbGV0LXUiCiAgIH0sCiAgIHsKICAgICAgImF0dHJpYnV0ZV9ncm91cHMiOlsKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvdmVnYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2FuIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46dmVnYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2FuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvdmVnZXRhcmlhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdldGFyaWFuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdldGFyaWFuIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46dmVnZXRhcmlhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnZXRhcmlhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3BhbG0tb2lsLWNvbnRlbnQtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJwYWxtX29pbF9mcmVlIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJQYWxtIG9pbCBmcmVlIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46cGFsbS1vaWwtY29udGVudC11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJQYWxtIG9pbCBjb250ZW50IHVua25vd24iCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXMiLAogICAgICAgICAgICAibmFtZSI6IkluZ3JlZGllbnRzIgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiT3JnYW5pYyBmYXJtaW5nIGFpbXMgdG8gcHJvdGVjdCB0aGUgZW52aXJvbm1lbnQgYW5kIHRvIGNvbnNlcnZlIGJpb2RpdmVyc2l0eSBieSBwcm9oaWJpdGluZyBvciBsaW1pdGluZyB0aGUgdXNlIG9mIHN5bnRoZXRpYyBmZXJ0aWxpemVycywgcGVzdGljaWRlcyBhbmQgZm9vZCBhZGRpdGl2ZXMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiT3JnYW5pYyBwcm9kdWN0cyBwcm9tb3RlIGVjb2xvZ2ljYWwgc3VzdGFpbmFiaWxpdHkgYW5kIGJpb2RpdmVyc2l0eS4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L29yZ2FuaWMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfb3JnYW5pYyIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiT3JnYW5pYyBmYXJtaW5nIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJNaXNzaW5nIGluZm9ybWF0aW9uOiBvcmdhbmljIHByb2R1Y3Q/IgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IldoZW4geW91IGJ1eSBmYWlyIHRyYWRlIHByb2R1Y3RzLCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMgYXJlIHBhaWQgYW4gaGlnaGVyIGFuZCBmYWlyZXIgcHJpY2UsIHdoaWNoIGhlbHBzIHRoZW0gaW1wcm92ZSBhbmQgc3VzdGFpbiBoaWdoZXIgc29jaWFsIGFuZCBvZnRlbiBlbnZpcm9ubWVudGFsIHN0YW5kYXJkcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJGYWlyIHRyYWRlIHByb2R1Y3RzIGhlbHAgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzLiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvZmFpci10cmFkZS11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19mYWlyX3RyYWRlIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJGYWlyIHRyYWRlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJNaXNzaW5nIGluZm9ybWF0aW9uOiBmYWlyIHRyYWRlIHByb2R1Y3Q/IgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImxhYmVscyIsCiAgICAgICAgICAgICJuYW1lIjoiTGFiZWxzIgogICAgICAgICB9CiAgICAgIF0sCiAgICAgICJjb2RlIjoiMzI1NjIyMjc0MDU3NyIsCiAgICAgICJpbWFnZV9mcm9udF9zbWFsbF91cmwiOiJodHRwczovL2ltYWdlcy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9wcm9kdWN0cy8zMjUvNjIyLzI3NC8wNTc3L2Zyb250X2ZyLjE1LjIwMC5qcGciLAogICAgICAicHJvZHVjdF9kaXNwbGF5X25hbWUiOiJEZW50aWZyaWNlIEZyYcOuY2hldXIg4oCTIFUg4oCTIDc1wqBtbCIsCiAgICAgICJ1cmwiOiJodHRwczovL3dvcmxkLm9wZW5iZWF1dHlmYWN0cy5vcmcvcHJvZHVjdC8zMjU2MjIyNzQwNTc3L2RlbnRpZnJpY2UtZnJhaWNoZXVyLXUiCiAgIH0sCiAgIHsKICAgICAgImF0dHJpYnV0ZV9ncm91cHMiOlsKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvdmVnYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2FuIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46dmVnYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2FuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvdmVnZXRhcmlhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdldGFyaWFuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdldGFyaWFuIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46dmVnZXRhcmlhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnZXRhcmlhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3BhbG0tb2lsLWNvbnRlbnQtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJwYWxtX29pbF9mcmVlIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJQYWxtIG9pbCBmcmVlIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46cGFsbS1vaWwtY29udGVudC11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJQYWxtIG9pbCBjb250ZW50IHVua25vd24iCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXMiLAogICAgICAgICAgICAibmFtZSI6IkluZ3JlZGllbnRzIgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiT3JnYW5pYyBmYXJtaW5nIGFpbXMgdG8gcHJvdGVjdCB0aGUgZW52aXJvbm1lbnQgYW5kIHRvIGNvbnNlcnZlIGJpb2RpdmVyc2l0eSBieSBwcm9oaWJpdGluZyBvciBsaW1pdGluZyB0aGUgdXNlIG9mIHN5bnRoZXRpYyBmZXJ0aWxpemVycywgcGVzdGljaWRlcyBhbmQgZm9vZCBhZGRpdGl2ZXMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiT3JnYW5pYyBwcm9kdWN0cyBwcm9tb3RlIGVjb2xvZ2ljYWwgc3VzdGFpbmFiaWxpdHkgYW5kIGJpb2RpdmVyc2l0eS4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJlIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L25vdC1vcmdhbmljLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19vcmdhbmljIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjowLAogICAgICAgICAgICAgICAgICAibmFtZSI6Ik9yZ2FuaWMgZmFybWluZyIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik5vdCBhbiBvcmdhbmljIHByb2R1Y3QiCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiV2hlbiB5b3UgYnV5IGZhaXIgdHJhZGUgcHJvZHVjdHMsIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcyBhcmUgcGFpZCBhbiBoaWdoZXIgYW5kIGZhaXJlciBwcmljZSwgd2hpY2ggaGVscHMgdGhlbSBpbXByb3ZlIGFuZCBzdXN0YWluIGhpZ2hlciBzb2NpYWwgYW5kIG9mdGVuIGVudmlyb25tZW50YWwgc3RhbmRhcmRzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6IkZhaXIgdHJhZGUgcHJvZHVjdHMgaGVscCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiZSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9ub3QtZmFpci10cmFkZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfZmFpcl90cmFkZSIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJGYWlyIHRyYWRlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTm90IGEgZmFpciB0cmFkZSBwcm9kdWN0IgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImxhYmVscyIsCiAgICAgICAgICAgICJuYW1lIjoiTGFiZWxzIgogICAgICAgICB9CiAgICAgIF0sCiAgICAgICJjb2RlIjoiMzI1NjIyMjc0MTQyMCIsCiAgICAgICJpbWFnZV9mcm9udF9zbWFsbF91cmwiOiJodHRwczovL2ltYWdlcy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9wcm9kdWN0cy8zMjUvNjIyLzI3NC8xNDIwL2Zyb250X2ZyLjE1LjIwMC5qcGciLAogICAgICAicHJvZHVjdF9kaXNwbGF5X25hbWUiOiJMaXF1aWRlIEZyYcOuY2hldXIgMiBlbiAxIOKAkyBVIOKAkyA3NcKgbWwiLAogICAgICAidXJsIjoiaHR0cHM6Ly93b3JsZC5vcGVuYmVhdXR5ZmFjdHMub3JnL3Byb2R1Y3QvMzI1NjIyMjc0MTQyMC9saXF1aWRlLWZyYWljaGV1ci0yLWVuLTEtdSIKICAgfSwKICAgewogICAgICAiYXR0cmlidXRlX2dyb3VwcyI6WwogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdldGFyaWFuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdldGFyaWFuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdldGFyaWFuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvcGFsbS1vaWwtY29udGVudC11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InBhbG1fb2lsX2ZyZWUiLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlBhbG0gb2lsIGZyZWUiLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjpwYWxtLW9pbC1jb250ZW50LXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlBhbG0gb2lsIGNvbnRlbnQgdW5rbm93biIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJpbmdyZWRpZW50c19hbmFseXNpcyIsCiAgICAgICAgICAgICJuYW1lIjoiSW5ncmVkaWVudHMiCiAgICAgICAgIH0sCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiJPcmdhbmljIGZhcm1pbmcgYWltcyB0byBwcm90ZWN0IHRoZSBlbnZpcm9ubWVudCBhbmQgdG8gY29uc2VydmUgYmlvZGl2ZXJzaXR5IGJ5IHByb2hpYml0aW5nIG9yIGxpbWl0aW5nIHRoZSB1c2Ugb2Ygc3ludGhldGljIGZlcnRpbGl6ZXJzLCBwZXN0aWNpZGVzIGFuZCBmb29kIGFkZGl0aXZlcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJPcmdhbmljIHByb2R1Y3RzIHByb21vdGUgZWNvbG9naWNhbCBzdXN0YWluYWJpbGl0eSBhbmQgYmlvZGl2ZXJzaXR5LiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3Qvb3JnYW5pYy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19vcmdhbmljIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJPcmdhbmljIGZhcm1pbmciLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik1pc3NpbmcgaW5mb3JtYXRpb246IG9yZ2FuaWMgcHJvZHVjdD8iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiV2hlbiB5b3UgYnV5IGZhaXIgdHJhZGUgcHJvZHVjdHMsIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcyBhcmUgcGFpZCBhbiBoaWdoZXIgYW5kIGZhaXJlciBwcmljZSwgd2hpY2ggaGVscHMgdGhlbSBpbXByb3ZlIGFuZCBzdXN0YWluIGhpZ2hlciBzb2NpYWwgYW5kIG9mdGVuIGVudmlyb25tZW50YWwgc3RhbmRhcmRzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6IkZhaXIgdHJhZGUgcHJvZHVjdHMgaGVscCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9mYWlyLXRyYWRlLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX2ZhaXJfdHJhZGUiLAogICAgICAgICAgICAgICAgICAibmFtZSI6IkZhaXIgdHJhZGUiLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik1pc3NpbmcgaW5mb3JtYXRpb246IGZhaXIgdHJhZGUgcHJvZHVjdD8iCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoibGFiZWxzIiwKICAgICAgICAgICAgIm5hbWUiOiJMYWJlbHMiCiAgICAgICAgIH0KICAgICAgXSwKICAgICAgImNvZGUiOiIzMjU2MjIyNzQxMTc4IiwKICAgICAgImltYWdlX2Zyb250X3NtYWxsX3VybCI6Imh0dHBzOi8vaW1hZ2VzLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL3Byb2R1Y3RzLzMyNS82MjIvMjc0LzExNzgvZnJvbnRfZnIuMTkuMjAwLmpwZyIsCiAgICAgICJwcm9kdWN0X2Rpc3BsYXlfbmFtZSI6IkRlbnRpZnJpY2UgQmxhbmNoZXVyIOKAkyBVIOKAkyA3NcKgbWwiLAogICAgICAidXJsIjoiaHR0cHM6Ly93b3JsZC5vcGVuYmVhdXR5ZmFjdHMub3JnL3Byb2R1Y3QvMzI1NjIyMjc0MTE3OC9kZW50aWZyaWNlLWJsYW5jaGV1ci11IgogICB9LAogICB7CiAgICAgICJhdHRyaWJ1dGVfZ3JvdXBzIjpbCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2FuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2FuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2FuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2V0YXJpYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiYSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9wYWxtLW9pbC1mcmVlLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InBhbG1fb2lsX2ZyZWUiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjEwMCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJQYWxtIG9pbCBmcmVlIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46cGFsbS1vaWwtZnJlZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlBhbG0gb2lsIGZyZWUiCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXMiLAogICAgICAgICAgICAibmFtZSI6IkluZ3JlZGllbnRzIgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiT3JnYW5pYyBmYXJtaW5nIGFpbXMgdG8gcHJvdGVjdCB0aGUgZW52aXJvbm1lbnQgYW5kIHRvIGNvbnNlcnZlIGJpb2RpdmVyc2l0eSBieSBwcm9oaWJpdGluZyBvciBsaW1pdGluZyB0aGUgdXNlIG9mIHN5bnRoZXRpYyBmZXJ0aWxpemVycywgcGVzdGljaWRlcyBhbmQgZm9vZCBhZGRpdGl2ZXMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiT3JnYW5pYyBwcm9kdWN0cyBwcm9tb3RlIGVjb2xvZ2ljYWwgc3VzdGFpbmFiaWxpdHkgYW5kIGJpb2RpdmVyc2l0eS4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJlIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L25vdC1vcmdhbmljLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19vcmdhbmljIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjowLAogICAgICAgICAgICAgICAgICAibmFtZSI6Ik9yZ2FuaWMgZmFybWluZyIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik5vdCBhbiBvcmdhbmljIHByb2R1Y3QiCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiV2hlbiB5b3UgYnV5IGZhaXIgdHJhZGUgcHJvZHVjdHMsIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcyBhcmUgcGFpZCBhbiBoaWdoZXIgYW5kIGZhaXJlciBwcmljZSwgd2hpY2ggaGVscHMgdGhlbSBpbXByb3ZlIGFuZCBzdXN0YWluIGhpZ2hlciBzb2NpYWwgYW5kIG9mdGVuIGVudmlyb25tZW50YWwgc3RhbmRhcmRzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6IkZhaXIgdHJhZGUgcHJvZHVjdHMgaGVscCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiZSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9ub3QtZmFpci10cmFkZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfZmFpcl90cmFkZSIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJGYWlyIHRyYWRlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTm90IGEgZmFpciB0cmFkZSBwcm9kdWN0IgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImxhYmVscyIsCiAgICAgICAgICAgICJuYW1lIjoiTGFiZWxzIgogICAgICAgICB9CiAgICAgIF0sCiAgICAgICJjb2RlIjoiMzIxNTY2NjgwMDA2MyIsCiAgICAgICJpbWFnZV9mcm9udF9zbWFsbF91cmwiOiJodHRwczovL2ltYWdlcy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9wcm9kdWN0cy8zMjEvNTY2LzY4MC8wMDYzL2Zyb250X2ZyLjUuMjAwLmpwZyIsCiAgICAgICJwcm9kdWN0X2Rpc3BsYXlfbmFtZSI6IlVsdHJhIERvdXggRW5mYW50cyBTaGFtcG9vaW5nIDIgZW4gMSDDoCBsJ2Ficmljb3QgZXQgZmxldXIgZGUgY290b24g4oCTIGdhcm5pZXIg4oCTIDI1MMKgbWwiLAogICAgICAidXJsIjoiaHR0cHM6Ly93b3JsZC5vcGVuYmVhdXR5ZmFjdHMub3JnL3Byb2R1Y3QvMzIxNTY2NjgwMDA2My91bHRyYS1kb3V4LWVuZmFudHMtc2hhbXBvb2luZy0yLWVuLTEtYS1sLWFicmljb3QtZXQtZmxldXItZGUtY290b24tZ2FybmllciIKICAgfSwKICAgewogICAgICAiYXR0cmlidXRlX2dyb3VwcyI6WwogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdldGFyaWFuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdldGFyaWFuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdldGFyaWFuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvcGFsbS1vaWwtY29udGVudC11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InBhbG1fb2lsX2ZyZWUiLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlBhbG0gb2lsIGZyZWUiLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjpwYWxtLW9pbC1jb250ZW50LXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlBhbG0gb2lsIGNvbnRlbnQgdW5rbm93biIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJpbmdyZWRpZW50c19hbmFseXNpcyIsCiAgICAgICAgICAgICJuYW1lIjoiSW5ncmVkaWVudHMiCiAgICAgICAgIH0sCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiJPcmdhbmljIGZhcm1pbmcgYWltcyB0byBwcm90ZWN0IHRoZSBlbnZpcm9ubWVudCBhbmQgdG8gY29uc2VydmUgYmlvZGl2ZXJzaXR5IGJ5IHByb2hpYml0aW5nIG9yIGxpbWl0aW5nIHRoZSB1c2Ugb2Ygc3ludGhldGljIGZlcnRpbGl6ZXJzLCBwZXN0aWNpZGVzIGFuZCBmb29kIGFkZGl0aXZlcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJPcmdhbmljIHByb2R1Y3RzIHByb21vdGUgZWNvbG9naWNhbCBzdXN0YWluYWJpbGl0eSBhbmQgYmlvZGl2ZXJzaXR5LiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3Qvb3JnYW5pYy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19vcmdhbmljIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJPcmdhbmljIGZhcm1pbmciLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik1pc3NpbmcgaW5mb3JtYXRpb246IG9yZ2FuaWMgcHJvZHVjdD8iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiV2hlbiB5b3UgYnV5IGZhaXIgdHJhZGUgcHJvZHVjdHMsIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcyBhcmUgcGFpZCBhbiBoaWdoZXIgYW5kIGZhaXJlciBwcmljZSwgd2hpY2ggaGVscHMgdGhlbSBpbXByb3ZlIGFuZCBzdXN0YWluIGhpZ2hlciBzb2NpYWwgYW5kIG9mdGVuIGVudmlyb25tZW50YWwgc3RhbmRhcmRzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6IkZhaXIgdHJhZGUgcHJvZHVjdHMgaGVscCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9mYWlyLXRyYWRlLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX2ZhaXJfdHJhZGUiLAogICAgICAgICAgICAgICAgICAibmFtZSI6IkZhaXIgdHJhZGUiLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6Ik1pc3NpbmcgaW5mb3JtYXRpb246IGZhaXIgdHJhZGUgcHJvZHVjdD8iCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoibGFiZWxzIiwKICAgICAgICAgICAgIm5hbWUiOiJMYWJlbHMiCiAgICAgICAgIH0KICAgICAgXSwKICAgICAgImNvZGUiOiIzMzM3ODc1NTQzMjQ4IiwKICAgICAgImltYWdlX2Zyb250X3NtYWxsX3VybCI6Imh0dHBzOi8vaW1hZ2VzLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL3Byb2R1Y3RzLzMzMy83ODcvNTU0LzMyNDgvZnJvbnRfZW4uNS4yMDAuanBnIiwKICAgICAgInByb2R1Y3RfZGlzcGxheV9uYW1lIjoiTWluZXJhbCA4OSDigJMgdmljaHkg4oCTIDUwbWwiLAogICAgICAidXJsIjoiaHR0cHM6Ly93b3JsZC5vcGVuYmVhdXR5ZmFjdHMub3JnL3Byb2R1Y3QvMzMzNzg3NTU0MzI0OC9taW5lcmFsLTg5LXZpY2h5IgogICB9LAogICB7CiAgICAgICJhdHRyaWJ1dGVfZ3JvdXBzIjpbCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2FuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2FuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2FuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3ZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnZXRhcmlhbiIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnZlZ2V0YXJpYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2V0YXJpYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoiYSIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9wYWxtLW9pbC1mcmVlLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InBhbG1fb2lsX2ZyZWUiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjEwMCwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJQYWxtIG9pbCBmcmVlIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46cGFsbS1vaWwtZnJlZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJrbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlBhbG0gb2lsIGZyZWUiCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXMiLAogICAgICAgICAgICAibmFtZSI6IkluZ3JlZGllbnRzIgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiT3JnYW5pYyBmYXJtaW5nIGFpbXMgdG8gcHJvdGVjdCB0aGUgZW52aXJvbm1lbnQgYW5kIHRvIGNvbnNlcnZlIGJpb2RpdmVyc2l0eSBieSBwcm9oaWJpdGluZyBvciBsaW1pdGluZyB0aGUgdXNlIG9mIHN5bnRoZXRpYyBmZXJ0aWxpemVycywgcGVzdGljaWRlcyBhbmQgZm9vZCBhZGRpdGl2ZXMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiT3JnYW5pYyBwcm9kdWN0cyBwcm9tb3RlIGVjb2xvZ2ljYWwgc3VzdGFpbmFiaWxpdHkgYW5kIGJpb2RpdmVyc2l0eS4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L29yZ2FuaWMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfb3JnYW5pYyIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiT3JnYW5pYyBmYXJtaW5nIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJNaXNzaW5nIGluZm9ybWF0aW9uOiBvcmdhbmljIHByb2R1Y3Q/IgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IldoZW4geW91IGJ1eSBmYWlyIHRyYWRlIHByb2R1Y3RzLCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMgYXJlIHBhaWQgYW4gaGlnaGVyIGFuZCBmYWlyZXIgcHJpY2UsIHdoaWNoIGhlbHBzIHRoZW0gaW1wcm92ZSBhbmQgc3VzdGFpbiBoaWdoZXIgc29jaWFsIGFuZCBvZnRlbiBlbnZpcm9ubWVudGFsIHN0YW5kYXJkcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJGYWlyIHRyYWRlIHByb2R1Y3RzIGhlbHAgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzLiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvZmFpci10cmFkZS11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19mYWlyX3RyYWRlIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJGYWlyIHRyYWRlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJNaXNzaW5nIGluZm9ybWF0aW9uOiBmYWlyIHRyYWRlIHByb2R1Y3Q/IgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImxhYmVscyIsCiAgICAgICAgICAgICJuYW1lIjoiTGFiZWxzIgogICAgICAgICB9CiAgICAgIF0sCiAgICAgICJjb2RlIjoiMzU2NDcwMDI3OTAxNCIsCiAgICAgICJpbWFnZV9mcm9udF9zbWFsbF91cmwiOiJodHRwczovL2ltYWdlcy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9wcm9kdWN0cy8zNTYvNDcwLzAyNy85MDE0L2Zyb250X2ZyLjI0LjIwMC5qcGciLAogICAgICAicHJvZHVjdF9kaXNwbGF5X25hbWUiOiJGcmHDrmNoZXVyIGV4dHLDqm1lIOKAkyBNYXJxdWUgUmVww6hyZSDigJMgNzXCoG1sIiwKICAgICAgInVybCI6Imh0dHBzOi8vd29ybGQub3BlbmJlYXV0eWZhY3RzLm9yZy9wcm9kdWN0LzM1NjQ3MDAyNzkwMTQvZnJhaWNoZXVyLWV4dHJlbWUtbWFycXVlLXJlcGVyZSIKICAgfSwKICAgewogICAgICAiYXR0cmlidXRlX2dyb3VwcyI6WwogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdhbiIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiVmVnYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnYW4gc3RhdHVzIHVua25vd24iCiAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC92ZWdldGFyaWFuLXN0YXR1cy11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6InZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2V0YXJpYW4iLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjp2ZWdldGFyaWFuLXN0YXR1cy11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJWZWdldGFyaWFuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImEiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvcGFsbS1vaWwtZnJlZS5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJwYWxtX29pbF9mcmVlIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjoxMDAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiUGFsbSBvaWwgZnJlZSIsCiAgICAgICAgICAgICAgICAgICJwYW5lbF9pZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzX2VuOnBhbG0tb2lsLWZyZWUiLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJQYWxtIG9pbCBmcmVlIgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImluZ3JlZGllbnRzX2FuYWx5c2lzIiwKICAgICAgICAgICAgIm5hbWUiOiJJbmdyZWRpZW50cyIKICAgICAgICAgfSwKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6Ik9yZ2FuaWMgZmFybWluZyBhaW1zIHRvIHByb3RlY3QgdGhlIGVudmlyb25tZW50IGFuZCB0byBjb25zZXJ2ZSBiaW9kaXZlcnNpdHkgYnkgcHJvaGliaXRpbmcgb3IgbGltaXRpbmcgdGhlIHVzZSBvZiBzeW50aGV0aWMgZmVydGlsaXplcnMsIHBlc3RpY2lkZXMgYW5kIGZvb2QgYWRkaXRpdmVzLiIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbl9zaG9ydCI6Ik9yZ2FuaWMgcHJvZHVjdHMgcHJvbW90ZSBlY29sb2dpY2FsIHN1c3RhaW5hYmlsaXR5IGFuZCBiaW9kaXZlcnNpdHkuIiwKICAgICAgICAgICAgICAgICAgImdyYWRlIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJpY29uX3VybCI6Imh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2F0dHJpYnV0ZXMvZGlzdC9vcmdhbmljLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX29yZ2FuaWMiLAogICAgICAgICAgICAgICAgICAibmFtZSI6Ik9yZ2FuaWMgZmFybWluZyIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTWlzc2luZyBpbmZvcm1hdGlvbjogb3JnYW5pYyBwcm9kdWN0PyIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiJXaGVuIHlvdSBidXkgZmFpciB0cmFkZSBwcm9kdWN0cywgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzIGFyZSBwYWlkIGFuIGhpZ2hlciBhbmQgZmFpcmVyIHByaWNlLCB3aGljaCBoZWxwcyB0aGVtIGltcHJvdmUgYW5kIHN1c3RhaW4gaGlnaGVyIHNvY2lhbCBhbmQgb2Z0ZW4gZW52aXJvbm1lbnRhbCBzdGFuZGFyZHMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiRmFpciB0cmFkZSBwcm9kdWN0cyBoZWxwIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcy4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L2ZhaXItdHJhZGUtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfZmFpcl90cmFkZSIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiRmFpciB0cmFkZSIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTWlzc2luZyBpbmZvcm1hdGlvbjogZmFpciB0cmFkZSBwcm9kdWN0PyIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJsYWJlbHMiLAogICAgICAgICAgICAibmFtZSI6IkxhYmVscyIKICAgICAgICAgfQogICAgICBdLAogICAgICAiY29kZSI6IjMwNTAwNzAwMDkwNjYiLAogICAgICAiaW1hZ2VfZnJvbnRfc21hbGxfdXJsIjoiaHR0cHM6Ly9pbWFnZXMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvcHJvZHVjdHMvMzA1LzAwNy8wMDAvOTA2Ni9mcm9udF9mci4yNS4yMDAuanBnIiwKICAgICAgInByb2R1Y3RfZGlzcGxheV9uYW1lIjoiRmx1b3IgZXQgcGxhbnRlcyAoc2F1Z2UsIG3DqWxpc3NlLCB0aHltKSDigJMgaGVua2VsIOKAkyA3NcKgbWwiLAogICAgICAidXJsIjoiaHR0cHM6Ly93b3JsZC5vcGVuYmVhdXR5ZmFjdHMub3JnL3Byb2R1Y3QvMzA1MDA3MDAwOTA2Ni9mbHVvci1ldC1wbGFudGVzLXNhdWdlLW1lbGlzc2UtdGh5bS1oZW5rZWwiCiAgIH0sCiAgIHsKICAgICAgImF0dHJpYnV0ZV9ncm91cHMiOlsKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvdmVnYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2FuIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46dmVnYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2FuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvdmVnZXRhcmlhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdldGFyaWFuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdldGFyaWFuIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46dmVnZXRhcmlhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnZXRhcmlhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJhIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3BhbG0tb2lsLWZyZWUuc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoicGFsbV9vaWxfZnJlZSIsCiAgICAgICAgICAgICAgICAgICJtYXRjaCI6MTAwLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlBhbG0gb2lsIGZyZWUiLAogICAgICAgICAgICAgICAgICAicGFuZWxfaWQiOiJpbmdyZWRpZW50c19hbmFseXNpc19lbjpwYWxtLW9pbC1mcmVlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiUGFsbSBvaWwgZnJlZSIKICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICAiaWQiOiJpbmdyZWRpZW50c19hbmFseXNpcyIsCiAgICAgICAgICAgICJuYW1lIjoiSW5ncmVkaWVudHMiCiAgICAgICAgIH0sCiAgICAgICAgIHsKICAgICAgICAgICAgImF0dHJpYnV0ZXMiOlsKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiJPcmdhbmljIGZhcm1pbmcgYWltcyB0byBwcm90ZWN0IHRoZSBlbnZpcm9ubWVudCBhbmQgdG8gY29uc2VydmUgYmlvZGl2ZXJzaXR5IGJ5IHByb2hpYml0aW5nIG9yIGxpbWl0aW5nIHRoZSB1c2Ugb2Ygc3ludGhldGljIGZlcnRpbGl6ZXJzLCBwZXN0aWNpZGVzIGFuZCBmb29kIGFkZGl0aXZlcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJPcmdhbmljIHByb2R1Y3RzIHByb21vdGUgZWNvbG9naWNhbCBzdXN0YWluYWJpbGl0eSBhbmQgYmlvZGl2ZXJzaXR5LiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6ImUiLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3Qvbm90LW9yZ2FuaWMuc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoibGFiZWxzX29yZ2FuaWMiLAogICAgICAgICAgICAgICAgICAibWF0Y2giOjAsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiT3JnYW5pYyBmYXJtaW5nIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6Imtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiTm90IGFuIG9yZ2FuaWMgcHJvZHVjdCIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiJXaGVuIHlvdSBidXkgZmFpciB0cmFkZSBwcm9kdWN0cywgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzIGFyZSBwYWlkIGFuIGhpZ2hlciBhbmQgZmFpcmVyIHByaWNlLCB3aGljaCBoZWxwcyB0aGVtIGltcHJvdmUgYW5kIHN1c3RhaW4gaGlnaGVyIHNvY2lhbCBhbmQgb2Z0ZW4gZW52aXJvbm1lbnRhbCBzdGFuZGFyZHMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiRmFpciB0cmFkZSBwcm9kdWN0cyBoZWxwIHByb2R1Y2VycyBpbiBkZXZlbG9waW5nIGNvdW50cmllcy4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJlIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L25vdC1mYWlyLXRyYWRlLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19mYWlyX3RyYWRlIiwKICAgICAgICAgICAgICAgICAgIm1hdGNoIjowLAogICAgICAgICAgICAgICAgICAibmFtZSI6IkZhaXIgdHJhZGUiLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoia25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJOb3QgYSBmYWlyIHRyYWRlIHByb2R1Y3QiCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoibGFiZWxzIiwKICAgICAgICAgICAgIm5hbWUiOiJMYWJlbHMiCiAgICAgICAgIH0KICAgICAgXSwKICAgICAgImNvZGUiOiIzNTYwMDcwOTIyMjA4IiwKICAgICAgImltYWdlX2Zyb250X3NtYWxsX3VybCI6Imh0dHBzOi8vaW1hZ2VzLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL3Byb2R1Y3RzLzM1Ni8wMDcvMDkyLzIyMDgvZnJvbnRfZnIuMjEuMjAwLmpwZyIsCiAgICAgICJwcm9kdWN0X2Rpc3BsYXlfbmFtZSI6IkdlbCBzaGFtcG9vaW5nIGRvdWNoZSBBZ3J1bWVzIOKAkyBDYXJyZWZvdXIg4oCTIDMwMMKgbWwiLAogICAgICAidXJsIjoiaHR0cHM6Ly93b3JsZC5vcGVuYmVhdXR5ZmFjdHMub3JnL3Byb2R1Y3QvMzU2MDA3MDkyMjIwOC9nZWwtc2hhbXBvb2luZy1kb3VjaGUtYWdydW1lcy1jYXJyZWZvdXIiCiAgIH0sCiAgIHsKICAgICAgImF0dHJpYnV0ZV9ncm91cHMiOlsKICAgICAgICAgewogICAgICAgICAgICAiYXR0cmlidXRlcyI6WwogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvdmVnYW4tc3RhdHVzLXVua25vd24uc3ZnIiwKICAgICAgICAgICAgICAgICAgImlkIjoidmVnYW4iLAogICAgICAgICAgICAgICAgICAibmFtZSI6IlZlZ2FuIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46dmVnYW4tc3RhdHVzLXVua25vd24iLAogICAgICAgICAgICAgICAgICAic3RhdHVzIjoidW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJ0aXRsZSI6IlZlZ2FuIHN0YXR1cyB1bmtub3duIgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvdmVnZXRhcmlhbi1zdGF0dXMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJ2ZWdldGFyaWFuIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJWZWdldGFyaWFuIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46dmVnZXRhcmlhbi1zdGF0dXMtdW5rbm93biIsCiAgICAgICAgICAgICAgICAgICJzdGF0dXMiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgInRpdGxlIjoiVmVnZXRhcmlhbiBzdGF0dXMgdW5rbm93biIKICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L3BhbG0tb2lsLWNvbnRlbnQtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJwYWxtX29pbF9mcmVlIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJQYWxtIG9pbCBmcmVlIiwKICAgICAgICAgICAgICAgICAgInBhbmVsX2lkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXNfZW46cGFsbS1vaWwtY29udGVudC11bmtub3duIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJQYWxtIG9pbCBjb250ZW50IHVua25vd24iCiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgImlkIjoiaW5ncmVkaWVudHNfYW5hbHlzaXMiLAogICAgICAgICAgICAibmFtZSI6IkluZ3JlZGllbnRzIgogICAgICAgICB9LAogICAgICAgICB7CiAgICAgICAgICAgICJhdHRyaWJ1dGVzIjpbCiAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjoiT3JnYW5pYyBmYXJtaW5nIGFpbXMgdG8gcHJvdGVjdCB0aGUgZW52aXJvbm1lbnQgYW5kIHRvIGNvbnNlcnZlIGJpb2RpdmVyc2l0eSBieSBwcm9oaWJpdGluZyBvciBsaW1pdGluZyB0aGUgdXNlIG9mIHN5bnRoZXRpYyBmZXJ0aWxpemVycywgcGVzdGljaWRlcyBhbmQgZm9vZCBhZGRpdGl2ZXMuIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uX3Nob3J0IjoiT3JnYW5pYyBwcm9kdWN0cyBwcm9tb3RlIGVjb2xvZ2ljYWwgc3VzdGFpbmFiaWxpdHkgYW5kIGJpb2RpdmVyc2l0eS4iLAogICAgICAgICAgICAgICAgICAiZ3JhZGUiOiJ1bmtub3duIiwKICAgICAgICAgICAgICAgICAgImljb25fdXJsIjoiaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9pbWFnZXMvYXR0cmlidXRlcy9kaXN0L29yZ2FuaWMtdW5rbm93bi5zdmciLAogICAgICAgICAgICAgICAgICAiaWQiOiJsYWJlbHNfb3JnYW5pYyIsCiAgICAgICAgICAgICAgICAgICJuYW1lIjoiT3JnYW5pYyBmYXJtaW5nIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJNaXNzaW5nIGluZm9ybWF0aW9uOiBvcmdhbmljIHByb2R1Y3Q/IgogICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IldoZW4geW91IGJ1eSBmYWlyIHRyYWRlIHByb2R1Y3RzLCBwcm9kdWNlcnMgaW4gZGV2ZWxvcGluZyBjb3VudHJpZXMgYXJlIHBhaWQgYW4gaGlnaGVyIGFuZCBmYWlyZXIgcHJpY2UsIHdoaWNoIGhlbHBzIHRoZW0gaW1wcm92ZSBhbmQgc3VzdGFpbiBoaWdoZXIgc29jaWFsIGFuZCBvZnRlbiBlbnZpcm9ubWVudGFsIHN0YW5kYXJkcy4iLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb25fc2hvcnQiOiJGYWlyIHRyYWRlIHByb2R1Y3RzIGhlbHAgcHJvZHVjZXJzIGluIGRldmVsb3BpbmcgY291bnRyaWVzLiIsCiAgICAgICAgICAgICAgICAgICJncmFkZSI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAiaWNvbl91cmwiOiJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9hdHRyaWJ1dGVzL2Rpc3QvZmFpci10cmFkZS11bmtub3duLnN2ZyIsCiAgICAgICAgICAgICAgICAgICJpZCI6ImxhYmVsc19mYWlyX3RyYWRlIiwKICAgICAgICAgICAgICAgICAgIm5hbWUiOiJGYWlyIHRyYWRlIiwKICAgICAgICAgICAgICAgICAgInN0YXR1cyI6InVua25vd24iLAogICAgICAgICAgICAgICAgICAidGl0bGUiOiJNaXNzaW5nIGluZm9ybWF0aW9uOiBmYWlyIHRyYWRlIHByb2R1Y3Q/IgogICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJpZCI6ImxhYmVscyIsCiAgICAgICAgICAgICJuYW1lIjoiTGFiZWxzIgogICAgICAgICB9CiAgICAgIF0sCiAgICAgICJjb2RlIjoiMzYwMDUyMTEzNzg0MCIsCiAgICAgICJpbWFnZV9mcm9udF9zbWFsbF91cmwiOiJodHRwczovL2ltYWdlcy5vcGVuYmVhdXR5ZmFjdHMub3JnL2ltYWdlcy9wcm9kdWN0cy8zNjAvMDUyLzExMy83ODQwL2Zyb250X2ZyLjUuMjAwLmpwZyIsCiAgICAgICJwcm9kdWN0X2Rpc3BsYXlfbmFtZSI6IlN0dWRpbyBMaW5lIFJlbWl4IFDDonRlIEZpYnJlIFJlbW9kZWxhYmxlIDI0SCDigJMgbC1vcmVhbCDigJMgMTUwwqBtbCIsCiAgICAgICJ1cmwiOiJodHRwczovL3dvcmxkLm9wZW5iZWF1dHlmYWN0cy5vcmcvcHJvZHVjdC8zNjAwNTIxMTM3ODQwL3N0dWRpby1saW5lLXJlbWl4LXBhdGUtZmlicmUtcmVtb2RlbGFibGUtMjRoLWwtb3JlYWwiCiAgIH0KXQo7CnZhciBwcm9kdWN0X3R5cGUgPSAiYmVhdXR5IjsKPC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSJodHRwczovL3N0YXRpYy5vcGVuYmVhdXR5ZmFjdHMub3JnL2pzL3Byb2R1Y3QtcHJlZmVyZW5jZXMuanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cHM6Ly9zdGF0aWMub3BlbmJlYXV0eWZhY3RzLm9yZy9qcy9wcm9kdWN0LXNlYXJjaC5qcyI+PC9zY3JpcHQ+Cgo8c2NyaXB0PgokKGRvY3VtZW50KS5mb3VuZGF0aW9uKHsKCWVxdWFsaXplciA6IHsKCQllcXVhbGl6ZV9vbl9zdGFjazogdHJ1ZQoJfSwKCWFjY29yZGlvbjogewoJCWNhbGxiYWNrIDogZnVuY3Rpb24gKGFjY29yZGlvbikgewoJCQkkKGRvY3VtZW50KS5mb3VuZGF0aW9uKCdlcXVhbGl6ZXInLCAncmVmbG93Jyk7CgkJfQoJfQp9KTsKCjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9ImFwcGxpY2F0aW9uL2xkK2pzb24iPgp7CgkiQGNvbnRleHQiIDogImh0dHBzOi8vc2NoZW1hLm9yZyIsCgkiQHR5cGUiIDogIldlYlNpdGUiLAoJIm5hbWUiIDogIk9wZW4gQmVhdXR5IEZhY3RzIiwKCSJ1cmwiIDogImh0dHBzOi8vd29ybGQub3BlbmJlYXV0eWZhY3RzLm9yZyIsCgkicG90ZW50aWFsQWN0aW9uIjogewoJCSJAdHlwZSI6ICJTZWFyY2hBY3Rpb24iLAoJCSJ0YXJnZXQiOiAiaHR0cHM6Ly93b3JsZC5vcGVuYmVhdXR5ZmFjdHMub3JnL2NnaS9zZWFyY2gucGw/c2VhcmNoX3Rlcm1zPT97c2VhcmNoX3Rlcm1fc3RyaW5nfSIsCgkJInF1ZXJ5LWlucHV0IjogInJlcXVpcmVkIG5hbWU9c2VhcmNoX3Rlcm1fc3RyaW5nIgoJfQp9Cjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9ImFwcGxpY2F0aW9uL2xkK2pzb24iPgp7CgkiQGNvbnRleHQiOiAiaHR0cHM6Ly9zY2hlbWEub3JnLyIsCgkiQHR5cGUiOiAiT3JnYW5pemF0aW9uIiwKCSJ1cmwiOiAiaHR0cHM6Ly93b3JsZC5vcGVuYmVhdXR5ZmFjdHMub3JnIiwKCSJsb2dvIjogImh0dHBzOi8vc3RhdGljLm9wZW5iZWF1dHlmYWN0cy5vcmcvaW1hZ2VzL2xvZ29zL29iZi1sb2dvLXZlcnRpY2FsLWxpZ2h0LnN2ZyIsCgkibmFtZSI6ICJPcGVuIEJlYXV0eSBGYWN0cyIsCgkic2FtZUFzIiA6IFsiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL29wZW5mb29kZmFjdHM/dXRtX3NvdXJjZT1vYmYmdXRmX21lZGl1bT13ZWIiLCAiaHR0cHM6Ly94LmNvbS9PcGVuRm9vZEZhY3RzIl0KfQo8L3NjcmlwdD4KCgoKCgo8L2JvZHk+CjwvaHRtbD4KCjwhLS0gZGF0YV9kZWJ1ZzogZGF0YV9kZWJ1ZyBzdGFydApwbGF0Zm9ybTogcHVibGljCmNhbl91c2VfY2FjaGU6IDEKY2FjaGVfaGl0Ci0tPgoKPCEtLSBlbmQgdGVtcGxhdGVzL3dlYi9jb21tb24vc2l0ZV9sYXlvdXQudHQuaHRtbCAtLT4K
  recorded_at: Mon, 29 Sep 2025 14:07:17 GMT
recorded_with: VCR 6.3.1
