---
http_interactions:
- request:
    method: get
    uri: https://world.openbeautyfacts.org/ingredient/water/1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Access-Control-Allow-Headers:
      - DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,If-None-Match,Authorization
      Access-Control-Allow-Methods:
      - HEAD, GET, PATCH, POST, PUT, OPTIONS
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Expose-Headers:
      - Content-Length,Content-Range
      Connection:
      - close
      Content-Type:
      - text/html; charset=iso-8859-1
      Date:
      - Mon, 29 Sep 2025 14:07:21 GMT
      Location:
      - "/facets/ingredients/water"
      Server:
      - nginx/1.18.0
      Transfer-Encoding:
      - chunked
    body:
      encoding: UTF-8
      string: |
        <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
        <html><head>
        <title>301 Moved Permanently</title>
        </head><body>
        <h1>Moved Permanently</h1>
        <p>The document has moved <a href="/facets/ingredients/water">here</a>.</p>
        <hr>
        <address>Apache/2.4.61 (Debian) Server at world.openbeautyfacts.org Port 80</address>
        </body></html>
  recorded_at: Mon, 29 Sep 2025 14:07:21 GMT
- request:
    method: get
    uri: https://world.openbeautyfacts.org/facets/ingredients/water
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - close
      Content-Type:
      - text/html; charset=UTF-8
      Date:
      - Mon, 29 Sep 2025 14:07:22 GMT
      Expires:
      - Sun, 28 Sep 2025 14:07:22 GMT
      Server:
      - nginx/1.18.0
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Request-Id:
      - 6HTB9E7R5QUznPjz
      X-Xss-Protection:
      - 1; mode=block
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!-- start templates/web/common/site_layout.tt.html -->

<!doctype html>
<html class="no-js" lang="en" data-serverdomain="openbeautyfacts.org" dir="ltr">
<head>
    <meta charset="utf-8">
    <title>WATER</title>
    
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta property="fb:app_id" content="219331381518041">
    <meta property="og:type" content="food">
    <meta property="og:title" content="WATER">
    <meta property="og:url" content="https://world.openbeautyfacts.org/facets/ingredients/en:water/1">
    
    <meta property="og:image" content="https://static.openfoodfacts.org/images/logos/obf-logo-vertical-white-social-media-preview.png">
    <meta property="og:description" content="A collaborative, free and open database of ingredients, and information on cosmetic products from around the world">
    <link rel="apple-touch-icon" sizes="180x180" href="/images/favicon/obf/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/images/favicon/obf/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/images/favicon/obf/favicon-16x16.png">
<link rel="manifest" href="/images/favicon/obf/site.webmanifest">
<link rel="mask-icon" href="/images/favicon/obf/safari-pinned-tab.svg" color="#5bbad5">
<link rel="shortcut icon" href="/images/favicon/obf/favicon.ico">
<meta name="msapplication-TileColor" content="#2b5797">
<meta name="msapplication-config" content="/images/favicon/obf/browserconfig.xml">
<meta name="theme-color" content="#ffffff">

	<meta name="apple-itunes-app" content="app-id=588797948">
    <link rel="canonical" href="https://world.openbeautyfacts.org/facets/ingredients/en:water/1">
    <link rel="stylesheet" href="https://static.openbeautyfacts.org/css/dist/app-ltr.css?v=1757658102" data-base-layout="true">
    <link rel="stylesheet" href="https://static.openbeautyfacts.org/css/dist/jqueryui/themes/base/jquery-ui.css" data-base-layout="true">
    <link rel="stylesheet" href="https://static.openbeautyfacts.org/css/dist/select2.min.css">
    <link rel="search" href="https://world.openbeautyfacts.org/cgi/opensearch.pl" type="application/opensearchdescription+xml" title="Open Beauty Facts">
    <script type="module" src="https://static.openbeautyfacts.org/js/dist/off-webcomponents.bundled.js"></script>
	
    <style media="all">
        .show-when-no-access-to-producers-platform {display:none}
.show-when-logged-in {display:none}

		
		.badge-container{
			margin: 0 auto;
		}

		.badge-container img{
			margin: 5px;
		}
		@media only screen and (max-width: 537px ) and (min-width: 280px) {
			.badge-container{
				width: 280px;
			}
		}
		@media only screen and (max-width: 279px ){
			.badge-container{
				width: 130px;
			}
		}
    </style>
</head>
<body class="products_page">

	<!-- Matomo -->
<script>
  var _paq = window._paq = window._paq || [];
  /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
  _paq.push(["setDocumentTitle", document.domain + "/" + document.title]);
  _paq.push(["setCookieDomain", "*.openbeautyfacts.org"]);
  _paq.push(["setDomains", ["*.openbeautyfacts.org"]]);
  _paq.push(["setDoNotTrack", true]);
  _paq.push(["disableCookies"]);
  _paq.push(['trackPageView']);
  _paq.push(['enableLinkTracking']);
  (function() {
    var u="//analytics.openfoodfacts.org/";
    _paq.push(['setTrackerUrl', u+'matomo.php']);
    _paq.push(['setSiteId', '10']);
    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
    g.async=true; g.src=u+'matomo.js'; s.parentNode.insertBefore(g,s);
  })();
</script>
<noscript><p><img src="//analytics.openfoodfacts.org/matomo.php?idsite=10&amp;rec=1" style="border:0;" alt="" /></p></noscript>


	<off-webcomponents-configuration
  language-code="en"
  country-code="world"
  robotoff-configuration='{
    "apiUrl": "https://robotoff.openfoodfacts.org/api/v1",
    "imgUrl": "https://images.openbeautyfacts.org/images/products"
  }'
  
  openfoodfacts-api-url="https://world.openbeautyfacts.org"
  assets-images-path="https://static.openbeautyfacts.org/css/dist/images"
  ></off-webcomponents-configuration>
	
	
	<div class="skip"><a href="#content" tabindex="0">Skip to Content</a></div>
	

	<div id="barcode-scanner-modal" class="modal is_hidden">
  <div class="modal-backdrop"></div>
  <div class="modal-content">
    <div class="modal-header">
      <span><h2>Scan a product<h2></span>
      <button class="modal-close-button">&times;</button>
    </div>
    <div>
      <barcode-scanner id="barcode-scanner"></barcode-scanner>
    </div>
    <div>
    </div>
    <div >
      <label for="barcode-modal-input">Or enter barcode manually</label>
      <div class="barcode-modal-group">
        <input type="text" id="barcode-modal-input" class="barcode-modal-input" inputmode="numeric" pattern="\d*" />
        <button class="barcode-modal-button button" id="barcode-modal-button" disabled>Scan</button>
      </div>
    </div>
  </div>
</div>

<script src="https://static.openbeautyfacts.org/js/dist/barcode-scanner.js"></script>


	<div id="page">
		
		<div class="upper-nav contain-to-grid"  id="upNav">
			<nav class="top-bar " data-topbar role="navigation">
				
				<section class="top-bar-section">
					
					<!-- Left Nav Section -->
					<ul class="left">

						<li class="has-dropdown">
							<a id="menu_link">
								<span class="material-icons">
									menu
								</span>
							</a>
							<ul class="dropdown">				
								
									<li><a href="/discover">Discover</a></li>
									<li><a href="/contribute">Contribute</a></li>
									<li class="divider"></li>
									<li><label>Add products</label></li>
                <!-- For reference: get_the_app_link_off" = /open-food-facts-mobile-app" -->
									<li><a href="/open-beauty-facts-mobile-app?utm_source=off&utf_medium=web&utm_campaign=pro_platform_install_the_app_to_add_products_en">Install the app to add products</a></li>
									<li><a href="/cgi/product.pl?type=search_or_add&action=display">Add a product</a></li>
								

								<li class="divider"></li>
								<li><label>Search and analyze products</label></li>

								<li>
									<a href="/cgi/search.pl">Advanced search</a>
								</li>
								<li>
									<a href="/cgi/search.pl?graph=1">Graphs and maps</a>
								</li>
								
							</ul>
						</li>
						
						<li>
							<ul class="country_language_selection">
								<li class="has-form has-dropdown" id="select_country_li">
									<select id="select_country" style="width:100%" data-placeholder="Country">
										<option></option>
									</select>
								</li>
								<li class="has-dropdown">
									<a href="https://world.openbeautyfacts.org/">English</a>

									<ul class="dropdown">
										
									</ul>
								</li>
							</ul>
						</li>
					</ul>


					<!-- Right Nav Section -->
					
					<ul class="right">
						
							<li class="h-space-tiny has-form">
								<a href="/cgi/session.pl" class="round button secondary">
									<span class="material-icons material-symbols-button">account_circle</span>
									Sign in
								</a>
							</li>
						
					</ul>
				</section>
			</nav>
		</div>
		

		<div id="main_container" style="position:relative" class="block_latte">
		
		
		<div class="topbarsticky">
			<div class="contain-to-grid " id="offNav" >
				<nav class="top-bar" data-topbar role="navigation" >

					<ul class="title-area">
						<li class="name">
							<div style="position:relative;max-width:292px;">
								<a href="/">
								<img id="logo" src="https://static.openbeautyfacts.org/images/logos/obf-logo-horizontal-light.svg" alt="Open Beauty Facts" style="margin:8px;height:48px;width:auto;">
								
							</a>
							</div>
						</li>
					</ul>

					
					
					<section class="top-bar-section">
					
						<ul class="left small-4">
							<li class="search-li">
							
								<form action="/cgi/search.pl">
								<div class="row"><div class="small-12">
								<div class="row collapse postfix-round">
									<div class="columns">
									<input type="text" placeholder="Search for a product" name="search_terms" value="" style="background-color:white">
									<input name="search_simple" value="1" type="hidden">
									<input name="action" value="process" type="hidden">
									</div>
									<div class="columns postfix-button-wrapper">
									<button type="submit" title="Search" class="button postfix" style="line-height:normal"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></button>
									</div>
									<div class="columns postfix-button-wrapper is_hidden">
  <button
    type="button"
    title="Scan a product"
    class="button barcode-scanner-button"
    id="barcode-scanner-button"
  >
    <svg style="width:24px;height:24px" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M2,6H4V18H2V6M5,6H6V18H5V6M7,6H10V18H7V6M11,6H12V18H11V6M14,6H16V18H14V6M17,6H20V18H17V6M21,6H22V18H21V6Z"/></svg>
  </button>

  <script src="https://static.openbeautyfacts.org/js/dist/barcode-scanner-button.js"></script>
</div>

								</div>
								</div></div>
								</form>
							</li>
						</ul>
					<ul class="search_and_links">
						<li><a href="/discover" class="top-bar-links">Discover</a></li>
						<li><a href="/contribute" class="top-bar-links">Contribute</a></li>
						<li class="show-for-xlarge-up"><a href="https://world.pro.openfoodfacts.org/" class="top-bar-links">Producers</a></li>
						<li class="flex-grid getapp"><a href="/open-beauty-facts-mobile-app?utm_source=off&utf_medium=web&utm_campaign=search_and_links_promo_en" class="buttonbar button" style="top:0;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M16 1H8C6.34 1 5 2.34 5 4v16c0 1.66 1.34 3 3 3h8c1.66 0 3-1.34 3-3V4c0-1.66-1.34-3-3-3zm-2 20h-4v-1h4v1zm3.25-3H6.75V4h10.5v14z"/><path d="M0 0h24v24H0z" fill="none"/></svg> <span class="bt-text">Get the app</span></a></li>
				<!-- For reference: get_the_app_link_off" = /open-food-facts-mobile-app" -->
          </ul>
					</section>
					
				</nav>
			</div>
		</div>

	
	
		<nav class="tab-bar hide">
			<div class="left-small">
				<a href="#idOfLeftMenu" role="button" aria-controls="idOfLeftMenu" aria-expanded="false" class="left-off-canvas-toggle button postfix anonymous">
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M3 5v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2H5c-1.11 0-2 .9-2 2zm12 4c0 1.66-1.34 3-3 3s-3-1.34-3-3 1.34-3 3-3 3 1.34 3 3zm-9 8c0-2 4-3.1 6-3.1s6 1.1 6 3.1v1H6v-1z"/><path d="M0 0h24v24H0z" fill="none"/></svg>
				</a>
			</div>
			<div class="middle tab-bar-section">
				<form action="/cgi/search.pl">
					<div class="row collapse">
						<div class="small-8 columns">
							<input type="text" placeholder="Search for a product" name="search_terms">
							<input name="search_simple" value="1" type="hidden">
							<input name="action" value="process" type="hidden">
						</div>
						<div class="small-2 columns">
							<button type="submit" class="button postfix"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg></button>
						</div>
						<div class="small-2 columns">
							<a href="/cgi/search.pl" title="Advanced search"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="icon" aria-hidden="true" focusable="false"><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/><path d="M0 0h24v24H0z" fill="none"/></svg></a>
						</div>
					</div>
				</form>
			</div>
		</nav>
		

		<div id="content" class="off-canvas-wrap block_latte" data-offcanvas>
			<div class="inner-wrap">
			
				<a class="exit-off-canvas"></a>

				
				
				<!-- full width banner on mobile -->
				
				

				

				<div class="main block_light">
					<div id="main_column">

						
						
							
							
								<!-- start templates/web/common/includes/donate_banner.tt.html -->



<!-- Donation banner @ footer -->


<!-- end templates/web/common/includes/donate_banner.tt.html -->

								


<section id="donation-banner-top" class="row" style="position:relative">
  
  <a href="https://connect.openfoodfacts.org/event/open-food-facts-days-2025-30/register">
    <img src="/images/misc/donation-banners/off-days-2025-en.1280x191.png"
       alt="Open Food Facts Days 2025"
       width="1280"
       height="191" class="show-for-medium-up"/>
    <img src="/images/misc/donation-banners/off-days-2025-en.mobile.png"
       alt="Open Food Facts Days 2025"
       width="1280"
       height="477" class="show-for-small-only"/>    
  </a>
  


  <div class="donation-banner__close">
    <button id="hide-donate-banner" class="material-icons modest" onclick="DonationButton();" onkeypress="DonationButton();">close</button>
  </div>
</section>

<script>
  let d = new Date();
  let bannerID = document.getElementById('donation-banner-top');
  let getDomain = window.location.origin.split('.');

  function setBannerCookie(bcname, bcval, bcexdays) {
    d.setTime(d.getTime() + (bcexdays*60*60*24*1000));
    let expires = 'expires=' + d.toUTCString();
    // Apply cookie for every domain contains open...facts
    let domain = 'domain=.' + getDomain.slice(1).join('.');
    document.cookie = bcname + '=' + bcval + ';' + expires + ';' + domain + ';SameSite=None;Secure;path=/';
  }

  function getBannerCookie(bcname) {
    const name = bcname + '=';
    const decodedCookies = decodeURIComponent(document.cookie);
    const cookies = decodedCookies.split(';');
    for (const cookie of cookies) {
      let c = cookie;
      while (c.charAt(0) == ' ') { c = c.substring(1); }
      if (c.indexOf(name) == 0) { return c.substring(name.length, c.length); }
    }

    return '';
  }

  function DonationButton() {
    setBannerCookie('off_days_2025', 1, 180);
    bannerID.style.display = 'none';
  }

  if (getBannerCookie('off_days_2025') !== '') {
    bannerID.style.display = 'none';
  } else {
    bannerID.style.display = 'flex';
  }
</script>


							
						
						
            			
						
							
								<!-- some lists of products for facets (e.g. brands) have microformats data -->
								<div itemscope itemtype="https://schema.org/Thing">
									<div class="row">
										<div class="small-12 column v-space-short">
											<h1 itemprop="name">WATER</h1>
										</div>
									</div>
								  <!-- start templates/web/pages/tag/tag.tt.html -->
<div class="tag">
    <div class="row">
        <div class="large-6 column">

            <div class="tag_navigation">
                
                    <a href="/facets/ingredients">Ingredient</a>:
                    <a href="/facets/ingredients/water">WATER</a>
                    
                
            </div>

            

                

                

                
                <div class="weblinks">
                    <div class="weblinks" style="float:right;width:300px;margin-left:20px;margin-bottom:20px;padding:10px;border:1px solid #cbe7ff;background-color:#f0f8ff;"><h3>Weblinks</h3><ul><li><a href="https://www.wikidata.org/wiki/Q283" itemprop="sameAs">Wikidata</a></li></ul></div>
                </div>
                

                

                
                <div class="description">
                    <div class="row">

	<div id="tag_description" class="large-12 columns">
		<p>92472</p>
<p>7732-18-5</p>
<p>231-791-2</p>
<p><span data-tooltip aria-haspopup="true" class="has-tip top" style="font-weight:normal" data-disable-hover="false" tabindex="2" title="Helps protect against plaque.">Antiplaque</span>, <span data-tooltip aria-haspopup="true" class="has-tip top" style="font-weight:normal" data-disable-hover="false" tabindex="2" title="Maintains the skin in good condition.">Skin conditioning</span>, <span data-tooltip aria-haspopup="true" class="has-tip top" style="font-weight:normal" data-disable-hover="false" tabindex="2" title="Dissolves other substances.">Solvent</span></p>
<p>Aqua -EU-,Deionized Water,Distilled Water,Micromatrix Fractile AN,Onsen-Sui -JPN-,Purified Water</p>

	</div>
	<div id="tag_map" class="large-9 columns" style="display: none;">
		<div id="container" style="height: 300px"></div>
	</div>

</div>
<!-- start templates/web/pages/tags_map/map_of_tags.tt.html -->

<link rel="stylesheet" href="https://static.openbeautyfacts.org/css/dist/leaflet.css" />
<script src="https://static.openbeautyfacts.org/js/dist/leaflet.js"></script>
<script src="https://static.openbeautyfacts.org/js/dist/osmtogeojson.js"></script>
<script src="https://static.openbeautyfacts.org/js/dist/display-tag.js"></script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    displayMap([], ["Q283"]);
  });
</script>

<!-- end templates/web/pages/tags_map/map_of_tags.tt.html -->

                </div>
                

                

            

            

            
        </div>

        
            
        
    </div>
</div>

<!-- end templates/web/pages/tag/tag.tt.html -->
<!-- start templates/web/common/includes/list_of_products.tt.html --> 

<div class="row">
  <div class="small-12 columns"> 
    
    
      
      
      
      <!-- display a permalink if the url is for a script that may have POST parameters -->
      
    
    
  </div>
</div>

 

<div class="block short block_ristreto">
  <div class="row">
    <div class="small-12 columns filterProducts">
      <div>
        <span class="filterProducts__results">
          <span class="material-icons" aria-hidden="true">search</span>
          11,590 products
        </span>
      </div>
      <div class="filterProducts__buttons">
        <div>
          <button href="#" data-dropdown="drop_sort" aria-controls="drop_sort" aria-expanded="false" class="button round dropdown small secondary unmarged">
            <span class="material-icons">swap_vert</span>
            Recently modified products
          </button>
          <ul id="drop_sort" data-dropdown-content class="f-dropdown" aria-hidden="true">
          
            <li>
              <a href="/facets/ingredients/water?sort_by=created_t" onclick="$.cookie('last_sort_by', 'created_t', { expires: 180, path: '/' });">Recently added products</a>
            </li>
        
            <li>
              <a href="/facets/ingredients/water?sort_by=last_modified_t" onclick="$.cookie('last_sort_by', 'last_modified_t', { expires: 180, path: '/' });">Recently modified products</a>
            </li>
        
          </ul>
        </div>
        
        
        <div>
          <button href="#" data-dropdown="drop1" aria-controls="drop1" aria-expanded="false" class="button round dropdown small secondary unmarged">
            <span class="material-icons">sort</span>
            Explore products by...
          </button>
          <ul id="drop1" data-dropdown-content class="f-dropdown" aria-hidden="true">
          
            <li>
              <a href="/facets/ingredients/water/countries" rel="nofollow">Countries</a>
            </li>
          
            <li>
              <a href="/facets/ingredients/water/brands" rel="nofollow">Brands</a>
            </li>
          
            <li>
              <a href="/facets/ingredients/water/categories" rel="nofollow">Categories</a>
            </li>
          
            <li>
              <a href="/facets/ingredients/water/labels" rel="nofollow">Labels</a>
            </li>
          
            <li>
              <a href="/facets/ingredients/water/packaging" rel="nofollow">Packaging</a>
            </li>
          
            <li>
              <a href="/facets/ingredients/water/origins" rel="nofollow">Origins of ingredients</a>
            </li>
          
            <li>
              <a href="/facets/ingredients/water/manufacturing-places" rel="nofollow">Manufacturing or processing places</a>
            </li>
          
            <li>
              <a href="/facets/ingredients/water/packager-codes" rel="nofollow">Traceability codes</a>
            </li>
          
            <li>
              <a href="/facets/ingredients/water/ingredients" rel="nofollow">Ingredients</a>
            </li>
          
            <li>
              <a href="/facets/ingredients/water/additives" rel="nofollow">Additives</a>
            </li>
          
            <li>
              <a href="/facets/ingredients/water/vitamins" rel="nofollow">Added vitamins</a>
            </li>
          
            <li>
              <a href="/facets/ingredients/water/minerals" rel="nofollow">Added minerals</a>
            </li>
          
            <li>
              <a href="/facets/ingredients/water/allergens" rel="nofollow">Allergens</a>
            </li>
          
            <li>
              <a href="/facets/ingredients/water/traces" rel="nofollow">Traces</a>
            </li>
          
            <li>
              <a href="/facets/ingredients/water/misc" rel="nofollow">Miscellaneous</a>
            </li>
          
            <li>
              <a href="/facets/ingredients/water/languages" rel="nofollow">Languages</a>
            </li>
          
            <li>
              <a href="/facets/ingredients/water/contributors" rel="nofollow">Contributors</a>
            </li>
          
            <li>
              <a href="/facets/ingredients/water/states" rel="nofollow">States</a>
            </li>
          
            <li>
              <a href="/facets/ingredients/water/data-sources" rel="nofollow">Data sources</a>
            </li>
          
            <li>
              <a href="/facets/ingredients/water/entry-dates" rel="nofollow">Entry dates</a>
            </li>
          
            <li>
              <a href="/facets/ingredients/water/last-edit-dates" rel="nofollow">Last edit dates</a>
            </li>
          
            <li>
              <a href="/facets/ingredients/water/last-check-dates" rel="nofollow">Last check dates</a>
            </li>
          
            <li>
              <a href="/facets/ingredients/water/teams" rel="nofollow">Teams</a>
            </li>
          
          </ul>
        </div>
        
        
      </div>
    </div>
  </div>
</div>


<div class="row">
	<div class="small-12 columns">
    <div id="preferences_selected" class="small-12 flex-grid v-space-short v-align-center direction-row full-width v-align-between"></div>
    <div id="preferences_selection_form" style="display:none"></div>
  </div>
</div>

	 
<div class="row">
<div class="large-12 columns">
    
    <div id="search_results" style="clear:left;">
        <ul class="products">
    
    
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
    
		</ul>
  </div>
      
    
	<ul id="pages" class="pagination"><li class="unavailable">Pages:</li><li class="current"><a href="">1</a></li><li><a href="/facets/ingredients/water/2">2</a></li><li><a href="/facets/ingredients/water/3">3</a></li><li><a href="/facets/ingredients/water/4">4</a></li><li class="unavailable">&hellip;</li><li><a href="/facets/ingredients/water/230">230</a></li><li><a href="/facets/ingredients/water/231">231</a></li><li><a href="/facets/ingredients/water/232">232</a></li><li><a href="/facets/ingredients/water/2" rel="next$nofollow">Next</a></li><li class="unavailable">(50 products per page)</li></ul>

  </div>
</div>


<!-- end templates/web/common/includes/list_of_products.tt.html -->

								</div>
							
						
					</div>
				</div>
			</div>
		</div>
		</div>

		
		<footer>
			<div class="block_light bg-white" id="install_the_app_block">
				<div class="row">
					<div class="small-12 flex-grid v-space-short v-align-center direction-row h-space-tiny">
						<div class="cell small-100 medium-100 large-50 flex-grid v-align-center direction-row">
							<img class="cell small-50 v-align-center" src="/images/illustrations/app-icon-in-the-clouds.svg" alt="The Open Food Facts logo in the cloud" style="height:120px">
							<div class="cell small-50 v-align-center" id="footer_scan" style="display:block">
								<div id="footer_install_the_app">
									Install the app!
								</div>
								Scan your <span id="everyday">everyday</span> <span id="foods">foods</span>
							</div>
						</div>
						<div class="row">
							<div class="small-12 medium-12 large-12 v-space-normal column badge-container">
								<!-- android_app_link - https://play.google.com/store/apps/details?id=org.openbeautyfacts.scanner&hl=en -->
								<a  href="https://play.google.com/store/apps/details?id=org.openfoodfacts.scanner&utm_source=obf&utf_medium=web&utm_campaign=install_the_app_android_footer_en"><img src="/images/misc/playstore/img/latest/GetItOnGooglePlay_Badge_Web_color_English.svg" alt="Get It On Google Play" loading="lazy" height="40" width="120"></a>
								
								<a href=""><img src="/images/misc/f-droid/svg/get-it-on-en.svg" alt="Available on F-Droid" loading="lazy" height="40" width="120"></a>

								<!-- android_apk_app_link - https://world.openfoodfacts.org/images/apps/off.apk -->
								<a href="https://world.openbeautyfacts.org/images/apps/obf.apk?utm_source=obf&utf_medium=web?utm_source=off&utf_medium=web&utm_campaign=install_the_app_apk_footer_en"><img src="/images/misc/app-landing-page/download-apk/download-apk_en.svg" alt="Android APK" loading="lazy" height="40" width="120"></a>
								
								<!-- msgid "https://apps.apple.com/app/open-beauty-facts/id1122926380" -->
								<a href="https://apps.apple.com/app/open-beauty-facts/id1122926380?utm_source=obf&utf_medium=web&utm_campaign=install_the_app_ios_footer_en"><img src="/images/misc/appstore/black/appstore_US.svg" alt="Download on the App Store"  loading="lazy" height="40" width="120"></a>
							</div>
						</div>
					</div>
				</div>
			</div>

			
      			<!-- start templates/web/common/includes/donate_banner.tt.html -->



<!-- Donation banner @ footer -->


<!-- end templates/web/common/includes/donate_banner.tt.html -->

				

<section class="donation-banner-footer row">
  <div class="donation-banner-footer__left-aside">
    <div class="donation-banner-footer__hook-section">
      <p>Help us inform millions of consumers around the world about what they eat</p>
    </div>
    <img src="/images/misc/donation-banners/donation-banner-group-photo.png" alt="group photo donation 2024" />
  </div>
  <div>
    <div>
      <div class="donation-banner-footer__main-section">
        <img
          width="50"
          height="50"
          src="https://world.openfoodfacts.org/images/logos/logo-variants/CMJN-ICON_WHITE_BG_OFF.svg"
          alt="open food facts logo"
        />
        <h3 class="donation-banner-footer__main-title">Please give to our 2025 Fundraiser</h3>
      </div>
      <p>Your donations fund the day-to-day operations of our non-profit association:</p>
      <ul>
        <li>
          keeping our database open & available to all,
          <ul>
            <li>technical infrastructure (website/mobile app) & a small permanent team</li>
          </ul>
        </li>
        <li>
          <p>remain independent of the food industry,</p>
        </li>
        <li>
          <p>engage a community of committed citizens,</p>
        </li>
        <li>
          <p>support the advancement of public health research.</p>
        </li>
      </ul>
    </div>
    <div class="donation-banner-footer__actions-section">
      <div class="donation-banner-footer__actions-section__financial">
        <p>
          Each donation counts! We appreciate your support in bringing further food transparency in the world.
        </p>
      </div>
      <div class="donation-banner-footer__actions-section__donate-button">
        <a href="https://world.openfoodfacts.org/donate-to-open-food-facts?utm_source=off&utf_medium=web&utm_campaign=donate-2024-a&utm_term=en-text-button">
          <button>I SUPPORT</button>
        </a>
      </div>
    </div>
  </div>
</section>


			
      		
			<div class="block_light block_cappucino" id="contribute_and_discover_links_block">
				<div class="row">
					<div class="small-12 large-6 columns v-space-normal block_off">
						<h3 class="title-5 text-medium">Join the community</h3>
						<p>Discover our <a href="/code-of-conduct">Code of conduct</a></p>
						<p>Join us on <a href="https://slack.openfoodfacts.org">Slack</a></p>
						<p><a href="https://forum.openfoodfacts.org/">Forum</a></p>
						<p id="footer_social_icons">Follow us: 
							<a href="https://x.com/OpenFoodFacts"><img src="/images/icons/dist/x.svg" class="footer_social_icon" alt="x"></a>
							<a href="https://www.facebook.com/openfoodfacts?utm_source=obf&utf_medium=web"><img src="/images/icons/dist/facebook.svg" class="footer_social_icon" alt="Facebook"></a>
							<a href="https://www.instagram.com/open.food.facts/"><img src="/images/icons/dist/instagram.svg" class="footer_social_icon" alt="Instagram"></a>
							
						</p>
						<p><a href="https://link.openfoodfacts.org/newsletter-en">Subscribe to our newsletter</a></p>
					</div>
					<div class="small-12 large-6 columns project v-space-normal">
						<h3 class="title-5 text-medium">Discover the project</h3>
						<ul class="inline-list tags_links v-space-tiny h-space-tiny" >
							<li><a class="button small white-button radius" href="/who-we-are">Who we are</a></li>
							<li><a class="button small white-button radius" href="https://world.openfoodfacts.org/open-food-facts-vision-mission-values-and-programs">Vision, Mission, Values and Programs</a></li>
							<li><a class="button small white-button radius" href="https://support.openfoodfacts.org/help/en-gb">Frequently asked questions</a></li>
							<li><a class="button small white-button radius" href="https://blog.openfoodfacts.org/en/">Open Beauty Facts blog</a></li>
							<li><a class="button small white-button radius" href="/press">Press</a></li>
							<li><a class="button small white-button radius" href="https://wiki.openfoodfacts.org">Open Beauty Facts wiki (en)</a></li>
							<li><a class="button small white-button radius" href="/cgi/top_translators.pl">Translators</a></li>
							<li><a class="button small white-button radius" href="/partners">Partners</a></li>
							<li><a class="button small white-button radius" href="https://world.openbeautyfacts.org">Open Beauty Facts - Cosmetics</a></li>
							<li><a class="button small white-button radius" href="https://world.pro.openbeautyfacts.org/">Open Food Facts for Producers</a></li>
						</ul>
					</div>
				</div>
			</div>

			<div class="block_off block_dark block_ristreto" id="footer_block">

				<div id="footer_block_image_banner_outside">
					<div id="footer_block_image_banner_outside2">

						<div class="row">

							<div class="small-12 text-center v-space-short h-space-large">
								<a href="/" style="font-size:1rem;"><img id="logo" src="https://static.openbeautyfacts.org/images/logos/obf-logo-horizontal-mono-white.svg" alt="Open Beauty Facts" style="margin:8px;height:48px;width:auto;"></a>

								<p>A collaborative, free and open database of cosmetic products from around the world.</p>
								
								<ul class="inline-list text-center text-small">
									<li><a href="/legal">Legal</a></li>
									<li><a href="/privacy">Privacy</a></li>
									<li><a href="/terms-of-use">Terms of use</a></li>
									<li><a href="/data">Data, API and SDKs</a></li>
									<li><a href="https://world.openfoodfacts.org/donate-to-open-food-facts">Donate to Open Food Facts</a></li>
									<li><a href="https://world.pro.openfoodfacts.org/">Producers</a></li>
									<li><a href="https://link.openfoodfacts.org/newsletter-en">Subscribe to our newsletter</a></li>
								</ul>
							</div>

						</div>

					</div>
				</div>
			</div>
		</footer>
		

	</div>

<script src="https://static.openbeautyfacts.org/js/dist/modernizr.js" data-base-layout="true"></script>
<script src="https://static.openbeautyfacts.org/js/dist/jquery.js" data-base-layout="true"></script>
<script src="https://static.openbeautyfacts.org/js/dist/jquery-ui.js" data-base-layout="true"></script>
<script src="https://static.openbeautyfacts.org/js/dist/hc-sticky.js"></script>
<script src="https://static.openbeautyfacts.org/js/dist/display.js"></script>
<script src="https://static.openbeautyfacts.org/js/dist/stikelem.js"></script>
<script src="https://static.openbeautyfacts.org/js/dist/scrollNav.js"></script>
  

<script>
$(function() {
display_user_product_preferences("#preferences_selected", "#preferences_selection_form", function () {
	rank_and_display_products("#search_results", products, contributor_prefs);
});
rank_and_display_products("#search_results", products, contributor_prefs);


});
</script>



<script src="https://static.openbeautyfacts.org/js/dist/foundation.js" data-base-layout="true"></script>
<script src="https://static.openbeautyfacts.org/js/dist/jquery.cookie.js"></script>
<script src="https://static.openbeautyfacts.org/js/dist/select2.min.js"></script>
<script type="text/javascript">
var page_type = "products";
var default_preferences = {"labels_fair_trade":"important","labels_organic":"important"};
var preferences_text = "Classify the 50 products below according to your preferences";
var contributor_prefs = {"display_barcode":null,"edit_link":null};
var products = [
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"4005800027932",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/400/580/002/7932/front_fr.7.200.jpg",
      "product_display_name":"Sun Sensitive Protect Kids SPF 50+ Spray Corps – Eucerin – 200 ml",
      "url":"https://world.openbeautyfacts.org/product/4005800027932/sun-sensitive-protect-kids-spf-50-spray-corps-eucerin"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8718452121458",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/871/845/212/1458/front_nl.3.200.jpg",
      "product_display_name":"JUMBO – 1000ml",
      "url":"https://world.openbeautyfacts.org/product/8718452121458/jumbo"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3662361002702",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/366/236/100/2702/front_fr.3.200.jpg",
      "product_display_name":"Deo-douche SPIRIAL – SVR – 400ml",
      "url":"https://world.openbeautyfacts.org/product/3662361002702/deo-douche-spirial-svr"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"4515061013228",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/451/506/101/3228/front_en.3.200.jpg",
      "product_display_name":"Kansosan Skincare Moisture Base AQ – BCL – 30 g",
      "url":"https://world.openbeautyfacts.org/product/4515061013228/kansosan-skincare-moisture-base-aq-bcl"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8909106030534",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/890/910/603/0534/front_en.5.200.jpg",
      "product_display_name":"Glow & LovelyGlow & Lovely Re-New Bright Advanced Multi Vitamin Serum in Cream – Hindustan Unilever Limited – 80g",
      "url":"https://world.openbeautyfacts.org/product/8909106030534/glow-lovelyglow-lovely-re-new-bright-advanced-multi-vitamin-serum-in-cream-hindustan-unilever-limited"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"4630262809187",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/463/026/280/9187/front_ru.3.200.jpg",
      "product_display_name":"Влажные салфетки детские &quot;Бубочка&quot; – Delicare – 8",
      "url":"https://world.openbeautyfacts.org/product/4630262809187/%D0%B2%D0%BB%D0%B0%D0%B6%D0%BD%D1%8B%D0%B5-%D1%81%D0%B0%D0%BB%D1%84%D0%B5%D1%82%D0%BA%D0%B8-%D0%B4%D0%B5%D1%82%D1%81%D0%BA%D0%B8%D0%B5-%D0%B1%D1%83%D0%B1%D0%BE%D1%87%D0%BA%D0%B0-delicare"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8719238060107",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/871/923/806/0107/front_el.7.200.jpg",
      "product_display_name":"",
      "url":"https://world.openbeautyfacts.org/product/8719238060107"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"4056489368182",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/405/648/936/8182/front_fr.13.200.jpg",
      "product_display_name":"lait autobronzant – cien – 250 ml",
      "url":"https://world.openbeautyfacts.org/product/4056489368182/lait-autobronzant-cien"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8999999005580",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/899/999/900/5580/front_en.9.200.jpg",
      "product_display_name":"Complete Care – Dove – 40ml",
      "url":"https://world.openbeautyfacts.org/product/8999999005580/complete-care-dove"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"7791293049120",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/779/129/304/9120/front_es.5.200.jpg",
      "product_display_name":"Bamboo – Rexona – 3 x 125 g",
      "url":"https://world.openbeautyfacts.org/product/7791293049120/bamboo-rexona"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8719134155617",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/871/913/415/5617/front_en.3.200.jpg",
      "product_display_name":"Foaming Shower Gel (Tulip & Japanese Yuzu) – Rituals – 200 mL",
      "url":"https://world.openbeautyfacts.org/product/8719134155617/foaming-shower-gel-tulip-japanese-yuzu-rituals"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3606000537583",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/360/600/053/7583/front_en.8.200.jpg",
      "product_display_name":"CeraVe SA Cream for Rough & Bumpy Skin – 12oz (340 g)",
      "url":"https://world.openbeautyfacts.org/product/3606000537583/cerave-sa-cream-for-rough-bumpy-skin"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8720181385018",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/872/018/138/5018/front_fr.5.200.jpg",
      "product_display_name":"Monsavon – 4 x 100g",
      "url":"https://world.openbeautyfacts.org/product/8720181385018/monsavon"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3574661680651",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/357/466/168/0651/front_fr.3.200.jpg",
      "product_display_name":"Savon à l'ancienne brut – 300g",
      "url":"https://world.openbeautyfacts.org/product/3574661680651/savon-a-l-ancienne-brut"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3600551132099",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/360/055/113/2099/front_fr.3.200.jpg",
      "product_display_name":"450 ml",
      "url":"https://world.openbeautyfacts.org/product/3600551132099"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3666057272967",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/366/605/727/2967/front_en.5.200.jpg",
      "product_display_name":"Extra-Firming Emulsion – Clarins – 3 mL",
      "url":"https://world.openbeautyfacts.org/product/3666057272967/extra-firming-emulsion-clarins"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8809925175303",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/880/992/517/5303/front_en.4.200.jpg",
      "product_display_name":"Concentrated Ginseng Rejuvenating Cream – Sulwhasoo – 1 mL",
      "url":"https://world.openbeautyfacts.org/product/8809925175303/concentrated-ginseng-rejuvenating-cream-sulwhasoo"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"7322541164724",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/732/254/116/4724/front_en.12.200.jpg",
      "product_display_name":"Wet wipes, perfume free – Libero – 64 pcs",
      "url":"https://world.openbeautyfacts.org/product/7322541164724/wet-wipes-perfume-free-libero"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"5029053550039",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/502/905/355/0039/front_en.19.200.jpg",
      "product_display_name":"Baby cleansing wipes – Huggies – 56",
      "url":"https://world.openbeautyfacts.org/product/5029053550039/baby-cleansing-wipes-huggies"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0769915190588",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/076/991/519/0588/front_en.13.200.jpg",
      "product_display_name":"www.THEORDINARY.COM – The Ordinary – 30ml",
      "url":"https://world.openbeautyfacts.org/product/0769915190588/www-theordinary-com-the-ordinary"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3596710497454",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/359/671/049/7454/front_fr.33.200.jpg",
      "product_display_name":"Savon noir mou a l'huile de lin – Auchan – 1 kg",
      "url":"https://world.openbeautyfacts.org/product/3596710497454/savon-noir-mou-a-l-huile-de-lin-auchan"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0764302280200",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/076/430/228/0200/front_fr.5.200.jpg",
      "product_display_name":"Shea moisture – 384 ml",
      "url":"https://world.openbeautyfacts.org/product/0764302280200/shea-moisture"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"a",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan.svg",
                  "id":"vegan",
                  "match":100,
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan",
                  "status":"known",
                  "title":"Vegan"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian.svg",
                  "id":"vegetarian",
                  "match":100,
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian",
                  "status":"known",
                  "title":"Vegetarian"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8436097095735",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/843/609/709/5735/front_fr.20.200.jpg",
      "product_display_name":"Gel douche plaisir Grenade Rose – BYPHASSE – 600 ml",
      "url":"https://world.openbeautyfacts.org/product/8436097095735/gel-douche-plaisir-grenade-rose-byphasse"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0681131135160",
      "product_display_name":"Styling gel –",
      "url":"https://world.openbeautyfacts.org/product/0681131135160/styling-gel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0764302231530",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/076/430/223/1530/front_fr.3.200.jpg",
      "product_display_name":"Manuka Honey & Yogurt – Shea Moisture – 384 ml",
      "url":"https://world.openbeautyfacts.org/product/0764302231530/manuka-honey-yogurt-shea-moisture"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"4005800238963",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/400/580/023/8963/front_fr.10.200.jpg",
      "product_display_name":"sunscreen – Eucerin",
      "url":"https://world.openbeautyfacts.org/product/4005800238963/sunscreen-eucerin"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"4335619230705",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/433/561/923/0705/front_fr.3.200.jpg",
      "product_display_name":"",
      "url":"https://world.openbeautyfacts.org/product/4335619230705"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3549620008449",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/354/962/000/8449/front_en.7.200.jpg",
      "product_display_name":"Démêlant sans rinçage Soin Douceur – Le Petit Olivier – 150 ml",
      "url":"https://world.openbeautyfacts.org/product/3549620008449/demelant-sans-rincage-soin-douceur-le-petit-olivier"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3401347938594",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/340/134/793/8594/front_en.26.200.jpg",
      "product_display_name":"Parodontax Dentifrice quotidien au fluor – GlaxoSmithKline – 2 X 75 ml",
      "url":"https://world.openbeautyfacts.org/product/3401347938594/parodontax-dentifrice-quotidien-au-fluor-glaxosmithkline"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0010181051807",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/001/018/105/1807/front_en.17.200.jpg",
      "product_display_name":"Palmers Raw Shea Nourish 2yrs prod – 250 ml",
      "url":"https://world.openbeautyfacts.org/product/0010181051807/palmers-raw-shea-nourish-2yrs-prod"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0012044037539",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/001/204/403/7539/front_en.9.200.jpg",
      "product_display_name":"Old spice",
      "url":"https://world.openbeautyfacts.org/product/0012044037539/old-spice"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"9000101668834",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/900/010/166/8834/front_en.7.200.jpg",
      "product_display_name":"NATURE BOX – Schwarzkopf and Henkel – 385 ml",
      "url":"https://world.openbeautyfacts.org/product/9000101668834/nature-box-schwarzkopf-and-henkel"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"5060120176134",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/506/012/017/6134/front_en.6.200.jpg",
      "product_display_name":"Botanical hair care – XHC – 400 ml",
      "url":"https://world.openbeautyfacts.org/product/5060120176134/botanical-hair-care-xhc"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3600551054476",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/360/055/105/4476/front_en.5.200.jpg",
      "product_display_name":"Petit – Cadum – 750 ml",
      "url":"https://world.openbeautyfacts.org/product/3600551054476/petit-cadum"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/contains-palm-oil.svg",
                  "id":"palm_oil_free",
                  "match":0,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil",
                  "status":"known",
                  "title":"Palm oil"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3700376300434",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/370/037/630/0434/front_fr.5.200.jpg",
      "product_display_name":"Savon extra doux – SAVONNERIE AUBAGNAISE – 100g",
      "url":"https://world.openbeautyfacts.org/product/3700376300434/savon-extra-doux-savonnerie-aubagnaise"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"0026395001170",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/002/639/500/1170/front_fr.3.200.jpg",
      "product_display_name":"Lily of the desert – 240 ml",
      "url":"https://world.openbeautyfacts.org/product/0026395001170/lily-of-the-desert"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"4056489318057",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/405/648/931/8057/front_el.7.200.jpg",
      "product_display_name":"CIEN MEN – 50 ml",
      "url":"https://world.openbeautyfacts.org/product/4056489318057/cien-men"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"4005808713257",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/400/580/871/3257/front_so.7.200.jpg",
      "product_display_name":"Extra White Body Serum Care & Protect – Nivea – 180ml",
      "url":"https://world.openbeautyfacts.org/product/4005808713257/extra-white-body-serum-care-protect-nivea"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8719134143324",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/871/913/414/3324/front_en.5.200.jpg",
      "product_display_name":"Recovery hand balm – Rituals – 70ml",
      "url":"https://world.openbeautyfacts.org/product/8719134143324/recovery-hand-balm-rituals"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"6932511231649",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/693/251/123/1649/front_ar.10.200.jpg",
      "product_display_name":"Pure Algue –",
      "url":"https://world.openbeautyfacts.org/product/6932511231649/pure-algue"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"4005808701896",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/400/580/870/1896/front_de.3.200.jpg",
      "product_display_name":"Express Body Lotion – Nivea – 400 ml",
      "url":"https://world.openbeautyfacts.org/product/4005808701896/express-body-lotion-nivea"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8718951553286",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/871/895/155/3286/front_sv.7.200.jpg",
      "product_display_name":"Colgate Sensation White",
      "url":"https://world.openbeautyfacts.org/product/8718951553286/colgate-sensation-white"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"8700216203760",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/870/021/620/3760/front_uk.3.200.jpg",
      "product_display_name":"Old spice rock – 50ml",
      "url":"https://world.openbeautyfacts.org/product/8700216203760/old-spice-rock"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3574661700878",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/357/466/170/0878/front_fr.3.200.jpg",
      "product_display_name":"Crème lavante mains - Fleur d'oranger Bio – Le Petit Marseillais – 250ml",
      "url":"https://world.openbeautyfacts.org/product/3574661700878/creme-lavante-mains-fleur-d-oranger-bio-le-petit-marseillais"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3574661792552",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/357/466/179/2552/front_en.7.200.jpg",
      "product_display_name":"Crème de douche extra douce - Lait de Cotton Le Petit Marseillais – 380ml",
      "url":"https://world.openbeautyfacts.org/product/3574661792552/creme-de-douche-extra-douce-lait-de-cotton-le-petit-marseillais"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3600551171630",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/360/055/117/1630/front_fr.3.200.jpg",
      "product_display_name":"Douche Crème - Parfum Framboise – DOP – 480 ml",
      "url":"https://world.openbeautyfacts.org/product/3600551171630/douche-creme-parfum-framboise-dop"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3600551171579",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/360/055/117/1579/front_fr.3.200.jpg",
      "product_display_name":"Douche Crème - Clémentine de Corse – DOP – 480 ml",
      "url":"https://world.openbeautyfacts.org/product/3600551171579/douche-creme-clementine-de-corse-dop"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-content-unknown.svg",
                  "id":"palm_oil_free",
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-content-unknown",
                  "status":"unknown",
                  "title":"Palm oil content unknown"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3600551172316",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/360/055/117/2316/front_fr.3.200.jpg",
      "product_display_name":"Shampooing Antipelliculaire - Parfum de Menthe – Dop – 480 ml",
      "url":"https://world.openbeautyfacts.org/product/3600551172316/shampooing-antipelliculaire-parfum-de-menthe-dop"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-organic.svg",
                  "id":"labels_organic",
                  "match":0,
                  "name":"Organic farming",
                  "status":"known",
                  "title":"Not an organic product"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"e",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/not-fair-trade.svg",
                  "id":"labels_fair_trade",
                  "match":0,
                  "name":"Fair trade",
                  "status":"known",
                  "title":"Not a fair trade product"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3600551172323",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/360/055/117/2323/front_fr.3.200.jpg",
      "product_display_name":"Shampooing Purifiant - Pomme Verte – DOP – 480 ml",
      "url":"https://world.openbeautyfacts.org/product/3600551172323/shampooing-purifiant-pomme-verte-dop"
   },
   {
      "attribute_groups":[
         {
            "attributes":[
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegan-status-unknown.svg",
                  "id":"vegan",
                  "name":"Vegan",
                  "panel_id":"ingredients_analysis_en:vegan-status-unknown",
                  "status":"unknown",
                  "title":"Vegan status unknown"
               },
               {
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/vegetarian-status-unknown.svg",
                  "id":"vegetarian",
                  "name":"Vegetarian",
                  "panel_id":"ingredients_analysis_en:vegetarian-status-unknown",
                  "status":"unknown",
                  "title":"Vegetarian status unknown"
               },
               {
                  "grade":"a",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/palm-oil-free.svg",
                  "id":"palm_oil_free",
                  "match":100,
                  "name":"Palm oil free",
                  "panel_id":"ingredients_analysis_en:palm-oil-free",
                  "status":"known",
                  "title":"Palm oil free"
               }
            ],
            "id":"ingredients_analysis",
            "name":"Ingredients"
         },
         {
            "attributes":[
               {
                  "description":"Organic farming aims to protect the environment and to conserve biodiversity by prohibiting or limiting the use of synthetic fertilizers, pesticides and food additives.",
                  "description_short":"Organic products promote ecological sustainability and biodiversity.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/organic-unknown.svg",
                  "id":"labels_organic",
                  "name":"Organic farming",
                  "status":"unknown",
                  "title":"Missing information: organic product?"
               },
               {
                  "description":"When you buy fair trade products, producers in developing countries are paid an higher and fairer price, which helps them improve and sustain higher social and often environmental standards.",
                  "description_short":"Fair trade products help producers in developing countries.",
                  "grade":"unknown",
                  "icon_url":"https://static.openbeautyfacts.org/images/attributes/dist/fair-trade-unknown.svg",
                  "id":"labels_fair_trade",
                  "name":"Fair trade",
                  "status":"unknown",
                  "title":"Missing information: fair trade product?"
               }
            ],
            "id":"labels",
            "name":"Labels"
         }
      ],
      "code":"3522933034329",
      "image_front_small_url":"https://images.openbeautyfacts.org/images/products/352/293/303/4329/front_en.4.200.jpg",
      "product_display_name":"Brightening Dark Spot Serum – Caudalie – 10 mL",
      "url":"https://world.openbeautyfacts.org/product/3522933034329/brightening-dark-spot-serum-caudalie"
   }
]
;
var product_type = "beauty";
</script>
<script src="https://static.openbeautyfacts.org/js/product-preferences.js"></script>
<script src="https://static.openbeautyfacts.org/js/product-search.js"></script>

<script>
$(document).foundation({
	equalizer : {
		equalize_on_stack: true
	},
	accordion: {
		callback : function (accordion) {
			$(document).foundation('equalizer', 'reflow');
		}
	}
});

</script>
<script type="application/ld+json">
{
	"@context" : "https://schema.org",
	"@type" : "WebSite",
	"name" : "Open Beauty Facts",
	"url" : "https://world.openbeautyfacts.org",
	"potentialAction": {
		"@type": "SearchAction",
		"target": "https://world.openbeautyfacts.org/cgi/search.pl?search_terms=?{search_term_string}",
		"query-input": "required name=search_term_string"
	}
}
</script>
<script type="application/ld+json">
{
	"@context": "https://schema.org/",
	"@type": "Organization",
	"url": "https://world.openbeautyfacts.org",
	"logo": "https://static.openbeautyfacts.org/images/logos/obf-logo-vertical-light.svg",
	"name": "Open Beauty Facts",
	"sameAs" : ["https://www.facebook.com/openfoodfacts?utm_source=obf&utf_medium=web", "https://x.com/OpenFoodFacts"]
}
</script>





</body>
</html>

<!-- data_debug: data_debug start
platform: public
can_use_cache: 1
cache_hit
-->

<!-- end templates/web/common/site_layout.tt.html -->

  recorded_at: Mon, 29 Sep 2025 14:07:22 GMT
recorded_with: VCR 6.3.1
